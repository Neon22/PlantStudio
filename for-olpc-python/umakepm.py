# unit umakepm
# DO NOT EDIT THIS FILE. It was generated by the pdutil program from parameters.tab.

#m edited it :-) added program to extract info about params at end of page.

from conversion_common import *
import uparams
import delphi_compatability

# format is:
# aFieldNumber, aFieldID, aName, aFieldType, anIndexType, aUnitSet, aUnitModel, aUnitMetric, aUnitEnglish, aLowerBound, anUpperBound, aDefaultValueString, aRegrow, aReadOnly, anAccessString, aTransferType, aHint):
# from uparams (make)
def CreateParameters(pm):
    pm.clearParameters()
    pm.addParameterForSection("General parameters", "", uparams.PdParameter().make(0, "header", "Drawing", 7, 0, 0, 0, 0, 0, 0.00000000, 0.00000000, "", False, False, "", 0, "These parameters affect how the whole plant draws."))
    pm.addParameterForSection("General parameters", "Numbers of things", uparams.PdParameter().make(1, "kGeneralLineDivisions", "Number of segments to draw to create curved line", 2, 1, 1, 1, 1, 1, 1.00000000, 20.00000000, "3", False, False, "pGeneral.LineDivisions", 1, "The number of segments to divide each line on the plant (internodes, inflorescence segments, leaf petioles) in order to make the line look curved. Three segments makes a fairly smooth-looking curve."))
    pm.addParameterForSection("General parameters", "Angles", uparams.PdParameter().make(2, "kGeneralRandomSway", "Random sway in drawing angles", 1, 1, 4, 2, 2, 2, 0.00000000, 90.00000000, "0", True, False, "pGeneral.randomSway", 1, "An index of the amount of random 3D variation to use in all drawing angles for the plant."))
    pm.addParameterForSection("General parameters", "", uparams.PdParameter().make(3, "header", "Growth", 7, 0, 0, 0, 0, 0, 0.00000000, 0.00000000, "", False, False, "", 0, "These parameters affect how the whole plant grows."))
    pm.addParameterForSection("General parameters", "Timing", uparams.PdParameter().make(4, "kGeneralAgeAtMaturity", "Age at maturity", 2, 1, 1, 1, 1, 1, 10.00000000, 500.00000000, "100", True, False, "pGeneral.ageAtMaturity", 1, "Age when the plant is fully mature."))
    pm.addParameterForSection("General parameters", "Biomass", uparams.PdParameter().make(5, "kGeneralGrowthSCurve", "Growth curve", 1, 3, 26, 1, 1, 1, 0.00000000, 1.00000000, "0.25 0.1 0.65 0.85", True, False, "pGeneral.growthSCurve", 2, "Fraction of maximum plant biomass (Y) for a given plant age (X). Plants tend to grow in an s-curve fashion, so simulated plant growth follows this curve."))
    pm.addParameterForSection("General parameters", "Timing", uparams.PdParameter().make(6, "kGeneralAgeAtWhichFloweringStarts", "Age at which flowering starts", 2, 1, 1, 1, 1, 1, 0.00000000, 500.00000000, "60", True, False, "pGeneral.ageAtWhichFloweringStarts", 1, "Age when flowering starts."))
    pm.addParameterForSection("General parameters", "Biomass", uparams.PdParameter().make(7, "kGeneralFractionReproductiveAllocationAtMaturity", "Fraction of total plant biomass at maturity in reproductive structures", 1, 1, 26, 1, 1, 1, 0.00000000, 1.00000000, "0.6", True, False, "pGeneral.fractionReproductiveAllocationAtMaturity_frn", 1, "Fraction of total plant biomass at maturity in reproductive structures."))
    pm.addParameterForSection("General parameters", "Arrangement", uparams.PdParameter().make(8, "kGeneralMaleFlowersAreSeparate", "Plant has both primary and secondary flowers", 4, 1, 30, 1, 1, 1, 0.00000000, 0.00000000, "FALSE", True, False, "pGeneral.MaleFlowersAreSeparate", 1, "If 'yes', this plant has both primary flowers (bearing fruit, either female or hermaphroditic) and secondary flowers (not bearing fruit, male). If 'no', the primary flowers are 'perfect' (hermaphroditic), and there are no secondary flowers. In cucum" + "ber and corn, for example, the fruits form out of the female flowers, and the male flowers are very small. "))
    pm.addParameterForSection("General parameters", "Arrangement", uparams.PdParameter().make(9, "kGeneralIsDicot", "Plant is dicotyledonous (has two seedling leaves)", 4, 1, 30, 1, 1, 1, 0.00000000, 0.00000000, "TRUE", True, False, "pGeneral.IsDicot", 1, "If 'yes', this plant belongs to a subclass of angiosperms called dicots which have two seedling leaves (cotyledons). If 'no, this plant is a monocot. Monocots (mostly grasses and grains) have one seedling leaf. In this model the impact of this choice i" + "s only the number of seedling leaves drawn, but in reality there are many differences between monocots and dicots."))
    pm.addParameterForSection("General parameters", "Numbers of things", uparams.PdParameter().make(10, "kGeneralNumApicalInflors", "Number of apical (terminal) inflorescences", 2, 1, 1, 1, 1, 1, 0.00000000, 50.00000000, "0", True, False, "pGeneral.NumApicalInflors", 1, "The number of inflorescences on this plant at the end (apex) of branches. This number of inflorescences develops from the plant's apical meristems no matter the reproductive allocation."))
    pm.addParameterForSection("General parameters", "Numbers of things", uparams.PdParameter().make(11, "kGeneralNumAxillaryInflors", "Number of axillary inflorescences", 2, 1, 1, 1, 1, 1, 0.00000000, 50.00000000, "4", True, False, "pGeneral.NumAxillaryInflors", 1, "The number of inflorescences on this plant found in the leaf axils of the plant's stems. This number of inflorescences develops from the plant's axillary meristems no matter the reproductive allocation."))
    pm.addParameterForSection("General parameters", "Angles", uparams.PdParameter().make(12, "kGeneralPhyllotacticRotationAngle", "Phyllotactic rotation angle", 1, 1, 4, 2, 2, 2, 0.00000000, 180.00000000, "137.5", False, False, "pGeneral.phyllotacticRotationAngle", 1, "The rotation angle between successive leaves on the plant stem. In most plants this angle is either 137 degrees or 180 degrees."))
    pm.addParameterForSection("General parameters", "", uparams.PdParameter().make(13, "kGeneralStartingSeedForRandomNumberGenerator", "Starting seed for random number generator", 2, 1, 1, 1, 1, 1, 1.00000000, 10000.00000000, "1234", True, False, "pGeneral.startingSeedForRandomNumberGenerator", 1, "The starting seed for this plant's random number generator. This affects random choices of angles, lengths, and branching choices. When you randomize the plant, you change this number (randomly)."))
    #
    pm.addParameterForSection("Meristems (buds)", "", uparams.PdParameter().make(14, "header", "Branching", 7, 0, 0, 0, 0, 0, 0.00000000, 0.00000000, "", False, False, "", 0, "\"A meristem is an actively developing group of cells, a bud, out of which grows a leaf or stem. How a plant branches depends on whether each meristem develops into a leaf structure or a new branch. Meristems 'decide' this based on many factors, which we" + " simulate with just a few.\""))
    pm.addParameterForSection("Meristems (buds)", "Arrangement", uparams.PdParameter().make(15, "kMeristemAndLeafArrangement", "Axillary meristem and leaf arrangement", 6, 1, 1, 1, 1, 1, 0.00000000, 0.00000000, "0 Alternate", True, False, "pMeristem.branchingAndLeafArrangement", 1, "If 'alternate', creation of leaves and axillary (side) meristems on any stem is alternate (one to the left, one to the right, etc). If 'opposite', leaves and axillary meristems are opposite (in pairs). Whorled leaves/meristems (more than two) are not " + "simulated here."))
    pm.addParameterForSection("Meristems (buds)", "", uparams.PdParameter().make(16, "kMeristemBranchingIndex", "Branching index", 1, 1, 27, 1, 1, 1, 0.00000000, 100.00000000, "30", True, False, "pMeristem.BranchingIndex", 1, "The probability (as a percent) that any axillary (side) meristem (bud) will create a new vegetative branch on any day *if* it is far enough away from the apical (terminal) meristem to be outside the range of apical dominance."))
    pm.addParameterForSection("Meristems (buds)", "", uparams.PdParameter().make(17, "kMeristemBranchingDistance", "Apical dominance strength (as node distance)", 1, 1, 1, 1, 1, 1, 0.00000000, 10.00000000, "3", True, False, "pMeristem.BranchingDistance", 1, "The distance (number of stem internodes) an axillary (side) meristem (bud) must be from the apical (terminal) meristem before it can consider creating a side branch. In real plants a more subtle hormone gradient prevents the development of axillary buds."))
    pm.addParameterForSection("Meristems (buds)", "", uparams.PdParameter().make(18, "kMeristemSecondaryBranchingIsAllowed", "Secondary branching (branches off branches)", 4, 1, 30, 1, 1, 1, 0.00000000, 0.00000000, "FALSE", True, False, "pMeristem.secondaryBranchingIsAllowed", 1, "If 'yes', secondary (and tertiary, etc) branching is allowed, which means that branches can have branches in turn. If 'no', only the primary stem (main stalk) can have branches."))
    pm.addParameterForSection("Meristems (buds)", "", uparams.PdParameter().make(19, "kMeristemBranchingIsSympodial", "Sympodial branching", 4, 1, 30, 1, 1, 1, 0.00000000, 0.00000000, "FALSE", True, False, "pMeristem.BranchingIsSympodial", 1, "If 'yes', each apical meristem creates only one internode, and an axillary meristem on that internode develops to create the next 'main' stem. Tomato plants grow this way. If 'no', growth is monopodial: each apical meristem creates a series of inter" + "nodes."))
    pm.addParameterForSection("Meristems (buds)", "Angles", uparams.PdParameter().make(20, "kMeristemBranchingAngle", "Branching angle", 1, 1, 4, 2, 2, 2, 0.00000000, 180.00000000, "30", False, False, "pMeristem.branchingAngle", 1, "The angle between the stem the meristem comes from and the new branch it creates. The higher this angle, the more broad the plant will be (if there is branching)."))
    pm.addParameterForSection("Meristems (buds)", "", uparams.PdParameter().make(21, "kMeristemDeterminateProbability", "Probability each meristem will become reproductive when it gets flowering signal", 1, 1, 26, 1, 1, 1, 0.00000000, 1.00000000, "30", True, False, "pMeristem.DeterminateProbability", 1, "When a determinate plant enters the reproductive phase all meristems are dedicated to reproduction, so this probability is 1.0. In an indeterminate plant some meristems continue to produce vegetative parts, and this probability is between zero and one."))
    pm.addParameterForSection("Meristems (buds)", "", uparams.PdParameter().make(22, "header", "Drawing", 7, 0, 0, 0, 0, 0, 0.00000000, 0.00000000, "", False, False, "", 0, "\"Often meristems are very small (and so you wouldn't draw them here), but sometimes you will want to draw leaf/stem buds on your plant, as in the case of Brussels sprouts.\""))
    pm.addParameterForSection("Meristems (buds)", "3D objects", uparams.PdParameter().make(23, "kAxillaryBudObject3D", "Meristem 3D object", 5, 1, 1, 1, 1, 1, 0.00000000, 0.00000000, "N[Default 3D object],P[134 245 150],P[113 208 145],P[135 209 150],P[109 171 142],P[136 171 147],P[135 136 138],P[156 208 145],P[159 171 140],T[1 2 3],T[3 2 4],T[3 4 5],T[4 6 5],T[3 7 1],T[7 3 5],T[8 7 5],T[8 5 6]", False, False, "pAxillaryBud.tdoParams.object3D", 3, "The 3D object used to draw sections of meristems. Meristems are always drawn with five 'section' 3D objects spun around to create an enclosed three-dimensional structure."))
    pm.addParameterForSection("Meristems (buds)", "3D objects", uparams.PdParameter().make(24, "kAxillaryBudScale", "Meristem scale at full size", 1, 1, 27, 1, 1, 1, 0.00000000, 100.00000000, "0", False, False, "pAxillaryBud.tdoParams.scaleAtFullSize", 1, "The drawing scale of the meristem section 3D object when the meristem is fully grown. On most plants you will not want to see meristems, so you will set this parameter to zero."))
    pm.addParameterForSection("Meristems (buds)", "Rotations", uparams.PdParameter().make(25, "kAxillaryBudObject3DXRotationBeforeDraw", "Meristem X rotation", 1, 1, 4, 2, 2, 2, -180.00000000, 180.00000000, "0", False, False, "pAxillaryBud.tdoParams.xRotationBeforeDraw", 1, "Just before this 3D object is drawn, it will be rotated in the X dimension by this amount. Normally you will leave this at zero, but you might need to set it differently if you have imported 3D objects from DXF files."))
    pm.addParameterForSection("Meristems (buds)", "Rotations", uparams.PdParameter().make(26, "kAxillaryBudObject3DYRotationBeforeDraw", "Meristem Y rotation", 1, 1, 4, 2, 2, 2, -180.00000000, 180.00000000, "0", False, False, "pAxillaryBud.tdoParams.yRotationBeforeDraw", 1, "Just before this 3D object is drawn, it will be rotated in the Y dimension by this amount. Normally you will leave this at zero, but you might need to set it differently if you have imported 3D objects from DXF files."))
    pm.addParameterForSection("Meristems (buds)", "Rotations", uparams.PdParameter().make(27, "kAxillaryBudObject3DZRotationBeforeDraw", "Meristem Z rotation", 1, 1, 4, 2, 2, 2, -180.00000000, 180.00000000, "0", False, False, "pAxillaryBud.tdoParams.zRotationBeforeDraw", 1, "Just before this 3D object is drawn, it will be rotated in the Z dimension by this amount. Normally you will leave this at zero, but you might need to set it differently if you have imported 3D objects from DXF files."))
    pm.addParameterForSection("Meristems (buds)", "Colors", uparams.PdParameter().make(28, "kAxillaryBudFaceColor", "Meristem front face color", 3, 1, 1, 1, 1, 1, 0.00000000, 0.00000000, "50 100 50", False, False, "pAxillaryBud.tdoParams.faceColor", 1, "The front face (facing in) color for meristem sections."))
    pm.addParameterForSection("Meristems (buds)", "Colors", uparams.PdParameter().make(29, "kAxillaryBudBackfaceColor", "Meristem back face color", 3, 1, 1, 1, 1, 1, 0.00000000, 0.00000000, "50 100 50", False, False, "pAxillaryBud.tdoParams.backfaceColor", 1, "The back face (facing out) color for meristems sections."))
    #
    pm.addParameterForSection("Internodes (stems)", "", uparams.PdParameter().make(30, "header", "Drawing", 7, 0, 0, 0, 0, 0, 0.00000000, 0.00000000, "", False, False, "", 0, "An internode is the section of stem between two successive leaves or branches."))
    pm.addParameterForSection("Internodes (stems)", "Colors", uparams.PdParameter().make(31, "kInternodeFaceColor", "Internode color", 3, 1, 1, 1, 1, 1, 0.00000000, 0.00000000, "50 100 50", False, False, "pInternode.FaceColor", 1, "The color of internodes."))
    pm.addParameterForSection("Internodes (stems)", "Angles", uparams.PdParameter().make(32, "kInternodeFirstInternodeCurvingIndex", "Curving index for first internode", 1, 1, 27, 1, 1, 1, 0.00000000, 100.00000000, "10", True, False, "pInternode.firstInternodeCurvingIndex", 1, "An index of how much the first internode curves. This determines how upright or bent over the plant is."))
    pm.addParameterForSection("Internodes (stems)", "Angles", uparams.PdParameter().make(33, "kInternodeCurvingIndex", "Curving index for all internodes but first", 1, 1, 27, 1, 1, 1, 0.00000000, 100.00000000, "30", True, False, "pInternode.curvingIndex", 1, "An index of how much stems curve around as they grow. A corn plant would have a curving index close to zero; a cucumber plant would have a larger curving index."))
    pm.addParameterForSection("Internodes (stems)", "", uparams.PdParameter().make(34, "header", "Size", 7, 0, 0, 0, 0, 0, 0.00000000, 0.00000000, "", False, False, "", 0, "\"These parameters control how large the internode is, and thus how 'leggy' the plant is. Plants that stay close to the ground (with rosettes) have very short internodes; vines have long internodes.\""))
    pm.addParameterForSection("Internodes (stems)", "Lengths", uparams.PdParameter().make(35, "kInternodeLengthAtOptimalFinalBiomassAndExpansion_mm", "Length at optimal biomass", 1, 1, 2, 2, 3, 6, 0.00000000, 200.00000000, "60", False, False, "pInternode.LengthAtOptimalFinalBiomassAndExpansion_mm", 1, "The length of an internode when the internode has the optimal internode biomass and when it has expanded to its full size from water uptake."))
    pm.addParameterForSection("Internodes (stems)", "Widths", uparams.PdParameter().make(36, "kInternodeWidthAtOptimalFinalBiomassAndExpansion_mm", "Width at optimal biomass", 1, 1, 2, 2, 3, 6, 0.10000000, 20.00000000, "3", False, False, "pInternode.WidthAtOptimalFinalBiomassAndExpansion_mm", 1, "The width of an internode of this plant when the internode has the optimal internode biomass and when it has expanded to its full size from water uptake."))
    pm.addParameterForSection("Internodes (stems)", "", uparams.PdParameter().make(37, "header", "Creation and growth", 7, 0, 0, 0, 0, 0, 0.00000000, 0.00000000, "", False, False, "", 0, "\"The size of any plant part is determined by an 'optimal' size and the actual conditions of growth. Plant parts compete for the available nutrients, as established by the general growth parameters. To simplify things, we express the weight (biomass) of " + "plant parts simply as a percentage of the total final weight of the plant.\""))
    pm.addParameterForSection("Internodes (stems)", "Biomass", uparams.PdParameter().make(38, "kInternodeOptimalFinalBiomass", "Optimal final biomass (as percent of maximum plant biomass)", 1, 1, 27, 1, 1, 1, 0.00010000, 20.00000000, "4", True, False, "pInternode.OptimalFinalBiomass_pctMPB", 1, "The biomass (dry weight) of a complete or best internode, expressed as a percentage of final plant dry weight."))
    pm.addParameterForSection("Internodes (stems)", "Timing", uparams.PdParameter().make(39, "kInternodeMinDaysToCreateInternode", "Minimum days for meristem to create", 2, 1, 23, 1, 1, 1, 1.00000000, 50.00000000, "3", True, False, "pInternode.MinDaysToCreateInternode", 1, "The shortest number of days in which a vegetative meristem can create an internode, no matter how much biomass is available. This simulates physical limitations on the rate of growth."))
    pm.addParameterForSection("Internodes (stems)", "Timing", uparams.PdParameter().make(40, "kInternodeMaxDaysToCreateInternodeIfOverMinFraction", "Maximum days for meristem to create", 2, 1, 23, 1, 1, 1, 1.00000000, 50.00000000, "10", True, False, "pInternode.MaxDaysToCreateInternodeIfOverMinFraction", 1, "Days a vegetative meristem will accumulate biomass towards creation of an internode before it gives up and creates the internode. This simulates the plant's concentration of resources on newer meristems."))
    pm.addParameterForSection("Internodes (stems)", "Biomass", uparams.PdParameter().make(41, "kInternodeMinFractionOfOptimalInitialBiomassToCreateInternode_frn", "Minimum fraction of optimal biomass needed to create", 1, 1, 26, 1, 1, 1, 0.00000000, 1.00000000, "0.2", True, False, "pInternode.MinFractionOfOptimalInitialBiomassToCreateInternode_frn", 1, "The smallest fraction of the optimal (best) amount of internode biomass that must be accumulated before a vegetative meristem can create an internode."))
    pm.addParameterForSection("Internodes (stems)", "Biomass", uparams.PdParameter().make(42, "kInternodeCanRecoverFromStuntingDuringCreation", "Can recover from stunting at creation", 4, 1, 30, 1, 1, 1, 0.00000000, 0.00000000, "TRUE", True, False, "pInternode.CanRecoverFromStuntingDuringCreation", 1, "If 'yes', the internode attempts to grow after it has been created to achieve the optimal biomass for an internode. If 'no', internodes can never grow in biomass after they are created (though they can expand through water uptake)."))
    pm.addParameterForSection("Internodes (stems)", "", uparams.PdParameter().make(43, "header", "Timing", 7, 0, 0, 0, 0, 0, 0.00000000, 0.00000000, "", False, False, "", 0, "Timing parameters set bounds on how slowly or quickly plant parts can grow to create a realistic growth pattern. These limits effect how many of the plant parts the plant can create during its lifetime (though the general biomass growth curve limits that " + "too)."))
    pm.addParameterForSection("Internodes (stems)", "Timing", uparams.PdParameter().make(44, "kInternodeMinDaysToAccumulateBiomass", "Minimum days to grow", 2, 1, 23, 1, 1, 1, 1.00000000, 50.00000000, "3", True, False, "pInternode.MinDaysToAccumulateBiomass", 1, "The shortest number of days in which an internode can grow to the optimal internode biomass, no matter how much biomass is available. This simulates physical limitations on the rate of growth."))
    pm.addParameterForSection("Internodes (stems)", "Timing", uparams.PdParameter().make(45, "kInternodeMaxDaysToAccumulateBiomass", "Maximum days to grow", 2, 1, 23, 1, 1, 1, 1.00000000, 50.00000000, "10", True, False, "pInternode.MaxDaysToAccumulateBiomass", 1, "Days an internode will accumulate biomass towards the optimal internode biomass before it gives up and stops growing. This simulates the plant's concentration of resources on newer plant parts."))
    pm.addParameterForSection("Internodes (stems)", "", uparams.PdParameter().make(46, "header", "Bolting", 7, 0, 0, 0, 0, 0, 0.00000000, 0.00000000, "", False, False, "", 0, "\"Some plants form a basal rosette (ring of leaves) one year, and in the next year expand and form a large inflorescence. Cabbages do this. These parameters create a simulated bolting plant.\""))
    pm.addParameterForSection("Internodes (stems)", "Lengths", uparams.PdParameter().make(47, "kInternodeLengthMultiplierDueToBolting", "Length increase due to bolting, multiplier", 1, 1, 1, 1, 1, 1, 0.00000000, 100.00000000, "0", True, False, "pInternode.LengthMultiplierDueToBolting", 1, "How much longer internodes become because of bolting. This occurs mainly in plants that flower in the second year such as carrots and cabbages."))
    pm.addParameterForSection("Internodes (stems)", "Timing", uparams.PdParameter().make(48, "kInternodeBoltingMinDaysToBolt", "Days to bolt", 2, 1, 23, 1, 1, 1, 1.00000000, 50.00000000, "10", True, False, "pInternode.MinDaysToBolt", 1, "Days it takes an internode to reach its full bolted length once bolting has begun."))
    #
    pm.addParameterForSection("Leaves", "", uparams.PdParameter().make(49, "header", "Drawing leaf", 7, 0, 0, 0, 0, 0, 0.00000000, 0.00000000, "", False, False, "", 0, "\"Leaves are drawn very simply, with 3D mesh objects either created in our own format or imported from DXF.\""))
    pm.addParameterForSection("Leaves", "3D objects", uparams.PdParameter().make(50, "kLeafObject3D", "Leaf 3D object", 5, 1, 1, 1, 1, 1, 0.00000000, 0.00000000, "N[Default 3D object],P[134 245 150],P[113 208 145],P[135 209 150],P[109 171 142],P[136 171 147],P[135 136 138],P[156 208 145],P[159 171 140],T[1 2 3],T[3 2 4],T[3 4 5],T[4 6 5],T[3 7 1],T[7 3 5],T[8 7 5],T[8 5 6]", False, False, "pLeaf.leafTdoParams.object3D", 3, "The 3D object used to draw leaves."))
    pm.addParameterForSection("Leaves", "3D objects", uparams.PdParameter().make(51, "kLeafScaleAtOptimalBiomass", "Leaf 3D object scale at optimal leaf biomass", 1, 1, 27, 1, 1, 1, 0.00000000, 100.00000000, "30", False, False, "pLeaf.leafTdoParams.scaleAtFullSize", 1, "The drawing scale of the leaf 3D object when the leaf is fully grown."))
    pm.addParameterForSection("Leaves", "Rotations", uparams.PdParameter().make(52, "kLeafObject3DXRotationBeforeDraw", "Leaf X rotation", 1, 1, 4, 2, 2, 2, -180.00000000, 180.00000000, "90", False, False, "pLeaf.leafTdoParams.xRotationBeforeDraw", 1, "Just before this 3D object is drawn, it will be rotated in the X dimension by this amount. For leaves, this will normally be either 90 degrees or -90 degrees. Normally you will leave this at 90 or -90, but you might need to set it differently if you have " + "imported 3D objects from DXF files."))
    pm.addParameterForSection("Leaves", "Rotations", uparams.PdParameter().make(53, "kLeafObject3DYRotationBeforeDraw", "Leaf Y rotation", 1, 1, 4, 2, 2, 2, -180.00000000, 180.00000000, "0", False, False, "pLeaf.leafTdoParams.yRotationBeforeDraw", 1, "Just before this 3D object is drawn, it will be rotated in the Y dimension by this amount. Normally you will leave this at zero, but you might need to set it differently if you have imported 3D objects from DXF files."))
    pm.addParameterForSection("Leaves", "Rotations", uparams.PdParameter().make(54, "kLeafObject3DZRotationBeforeDraw", "Leaf Z rotation", 1, 1, 4, 2, 2, 2, -180.00000000, 180.00000000, "0", False, False, "pLeaf.leafTdoParams.zRotationBeforeDraw", 1, "Just before this 3D object is drawn, it will be rotated in the Z dimension by this amount. Normally you will leave this at zero, but you might need to set it differently if you have imported 3D objects from DXF files."))
    pm.addParameterForSection("Leaves", "Colors", uparams.PdParameter().make(55, "kLeafFaceColor", "Leaf front face color", 3, 1, 1, 1, 1, 1, 0.00000000, 0.00000000, "50 250 50", False, False, "pLeaf.leafTdoParams.FaceColor", 1, "The front face (facing up) color for leaves."))
    pm.addParameterForSection("Leaves", "Colors", uparams.PdParameter().make(56, "kLeafBackfaceColor", "Leaf back face color", 3, 1, 1, 1, 1, 1, 0.00000000, 0.00000000, "50 150 50", False, False, "pLeaf.leafTdoParams.BackfaceColor", 1, "The back face (facing down) color for leaves."))
    pm.addParameterForSection("Leaves", "", uparams.PdParameter().make(57, "header", "Compound leaves", 7, 0, 0, 0, 0, 0, 0.00000000, 0.00000000, "", False, False, "", 0, "\"Compound leaves are made up of smaller leaflets arrayed on a petiole or leaf stem. For example, walnut trees have compound leaves.\""))
    pm.addParameterForSection("Leaves", "Numbers of things", uparams.PdParameter().make(58, "kLeafCompoundNumLeaflets", "Number of leaflets (1 if simple)", 2, 1, 1, 1, 1, 1, 1.00000000, 30.00000000, "0", True, False, "pLeaf.CompoundNumLeaflets", 1, "The number of leaflets per leaf. If this parameter is set to one, the plant will have simple leaves. If this parameter is set to greater than one, the plant will have compound leaves."))
    pm.addParameterForSection("Leaves", "Arrangement", uparams.PdParameter().make(59, "kLeafCompoundPinnateOrPalmate", "Compound leaf shape", 6, 1, 1, 1, 1, 1, 0.00000000, 0.00000000, "0 Pinnate", False, False, "pLeaf.CompoundPinnateOrPalmate", 1, "How the leaflets are arranged within each compound leaf. If 'pinnate', compound leaves are arranged like the barbs on a feather. If 'palmate', compound leaves are arranged like the fingers on a hand."))
    pm.addParameterForSection("Leaves", "Arrangement", uparams.PdParameter().make(60, "kLeafCompoundPinnateArrangement", "If pinnate, alternate or opposite", 6, 1, 1, 1, 1, 1, 0.00000000, 0.00000000, "0 Alternate", False, False, "pLeaf.compoundPinnateLeafletArrangement", 1, "If 'alternate', leaflets in a pinnate compound leaf are alternate (one to the left, one to the right, etc). If 'opposite', leaflets in a pinnate compound leaf are opposite (in pairs). If compound leaves are palmate, this parameter is not used."))
    pm.addParameterForSection("Leaves", "Lengths", uparams.PdParameter().make(61, "kLeafCompoundRachisToPetioleRatio", "Compound leaf spread index", 1, 1, 27, 1, 1, 1, 0.00000000, 100.00000000, "30", False, False, "pLeaf.CompoundRachisToPetioleRatio", 1, "An index of how spread out the compound leaves are within the leaf stalk. The higher the number the greater the spread."))
    pm.addParameterForSection("Leaves", "Angles", uparams.PdParameter().make(62, "kLeafCompoundBendAngleAtStart", "Compound leaf bend angle at start", 1, 1, 4, 2, 2, 2, -30.00000000, 30.00000000, "0", True, False, "pLeaf.compoundCurveAngleAtStart", 1, "The angle to bend the compound leaf between each leaflet when the leaf is first formed. A greater angle here can form an emerging leaf like a fiddlehead."))
    pm.addParameterForSection("Leaves", "Angles", uparams.PdParameter().make(63, "kLeafCompoundBendAngleAtFullSize", "Compound leaf bend angle at full size", 1, 1, 4, 2, 2, 2, -30.00000000, 30.00000000, "4", True, False, "pLeaf.compoundCurveAngleAtFullSize", 1, "The angle to bend the compound leaf between each leaflet when the leaf is at full size."))
    pm.addParameterForSection("Leaves", "", uparams.PdParameter().make(64, "header", "Drawing petiole", 7, 0, 0, 0, 0, 0, 0.00000000, 0.00000000, "", False, False, "", 0, "The leaf petiole is the stalk that connects the leaf to the main plant stem."))
    pm.addParameterForSection("Leaves", "Angles", uparams.PdParameter().make(65, "kLeafPetioleAngle", "Angle between stem and petiole", 1, 1, 4, 2, 2, 2, 0.00000000, 180.00000000, "40", False, False, "pLeaf.PetioleAngle", 1, "The pull-down angle between the main stem and the leaf petiole (stalk)."))
    pm.addParameterForSection("Leaves", "Colors", uparams.PdParameter().make(66, "kLeafPetioleColor", "Petiole color", 3, 1, 1, 1, 1, 1, 0.00000000, 0.00000000, "50 100 50", False, False, "pLeaf.PetioleColor", 1, "The color of leaf petioles (stalks)."))
    pm.addParameterForSection("Leaves", "Lengths", uparams.PdParameter().make(67, "kLeafPetioleLengthAtOptimalBiomass_mm", "Petiole length when leaf has optimal biomass", 1, 1, 2, 2, 3, 6, 0.00000000, 200.00000000, "30", False, False, "pLeaf.PetioleLengthAtOptimalBiomass_mm", 1, "The length of the leaf petiole when the leaf has accumulated the optimal (best) amount of biomass for a leaf."))
    pm.addParameterForSection("Leaves", "Widths", uparams.PdParameter().make(68, "kLeafPetioleWidthAtOptimalBiomass_mm", "Petiole width when leaf has optimal biomass", 1, 1, 2, 2, 3, 6, 0.10000000, 20.00000000, "1", False, False, "pLeaf.PetioleWidthAtOptimalBiomass_mm", 1, "The width of the leaf petiole when the leaf has accumulated the optimal (best) amount of biomass for a leaf."))
    pm.addParameterForSection("Leaves", "Widths", uparams.PdParameter().make(69, "kLeafPetioleTaperIndex", "Petiole taper index (taper to % of width)", 2, 1, 27, 1, 1, 1, 0.00000000, 100.00000000, "100", False, False, "pLeaf.petioleTaperIndex", 1, "How much to taper the leaf petiole's width as it reaches the leaf 3D object. For no tapering, choose 100% of initial width (the default). To taper the petiole, choose a lower percentage."))
    pm.addParameterForSection("Leaves", "", uparams.PdParameter().make(70, "header", "Drawing stipule", 7, 0, 0, 0, 0, 0, 0.00000000, 0.00000000, "", False, False, "", 0, "A stipule is an extra modified leaf that can appear at the base of the leaf petiole. These can sometimes be modified into thorns or tendrils."))
    pm.addParameterForSection("Leaves", "", uparams.PdParameter().make(71, "kStipuleNumSections", "Number of sections in stipule", 2, 1, 1, 1, 1, 1, 1.00000000, 30.00000000, "1", False, False, "pLeaf.stipuleTdoParams.repetitions", 1, "You can make a leaf stipule with one planar 3D object, in which case it looks sort of like a leaf, or you can make it with one 3D object drawn multiple times and spun around to produce an enclosed three-dimensional structure (like sections of an orange ma" + "ke up an orange). This is useful if you want to draw stipules that look like thorns or spikes. This parameter is the number of times to draw the specified 'section' 3D object to form the leaf stipule structure."))
    pm.addParameterForSection("Leaves", "3D objects", uparams.PdParameter().make(72, "kStipuleObject3D", "Stipule section 3D object", 5, 1, 1, 1, 1, 1, 0.00000000, 0.00000000, "N[Default 3D object],P[134 245 150],P[113 208 145],P[135 209 150],P[109 171 142],P[136 171 147],P[135 136 138],P[156 208 145],P[159 171 140],T[1 2 3],T[3 2 4],T[3 4 5],T[4 6 5],T[3 7 1],T[7 3 5],T[8 7 5],T[8 5 6]", False, False, "pLeaf.stipuleTdoParams.object3D", 3, "The 3D object used to draw leaf stipules (or stipule sections)."))
    pm.addParameterForSection("Leaves", "3D objects", uparams.PdParameter().make(73, "kStipuleScaleAtOptimalLeafBiomass", "Stipule section 3D object scale at optimal leaf biomass", 1, 1, 27, 1, 1, 1, 0.00000000, 100.00000000, "0", False, False, "pLeaf.stipuleTdoParams.scaleAtFullSize", 1, "The drawing scale of the leaf stipule (or stipule section) 3D object when the leaf is fully grown."))
    pm.addParameterForSection("Leaves", "Rotations", uparams.PdParameter().make(74, "kStipuleObject3DXRotationBeforeDraw", "Stipule section X rotation", 1, 1, 4, 2, 2, 2, -180.00000000, 180.00000000, "90", False, False, "pLeaf.stipuleTdoParams.xRotationBeforeDraw", 1, "Just before this 3D object is drawn, it will be rotated in the X dimension by this amount. For leaf stipules, this will normally be either 90 degrees or -90 degrees. Normally you will leave this at 90 or -90, but you might need to set it differently if yo" + "u have imported 3D objects from DXF files."))
    pm.addParameterForSection("Leaves", "Rotations", uparams.PdParameter().make(75, "kStipuleObject3DYRotationBeforeDraw", "Stipule section Y rotation", 1, 1, 4, 2, 2, 2, -180.00000000, 180.00000000, "0", False, False, "pLeaf.stipuleTdoParams.yRotationBeforeDraw", 1, "Just before this 3D object is drawn, it will be rotated in the Y dimension by this amount. Normally you will leave this at zero, but you might need to set it differently if you have imported 3D objects from DXF files."))
    pm.addParameterForSection("Leaves", "Rotations", uparams.PdParameter().make(76, "kStipuleObject3DZRotationBeforeDraw", "Stipule section Z rotation", 1, 1, 4, 2, 2, 2, -180.00000000, 180.00000000, "0", False, False, "pLeaf.stipuleTdoParams.zRotationBeforeDraw", 1, "Just before this 3D object is drawn, it will be rotated in the Z dimension by this amount. Normally you will leave this at zero, but you might need to set it differently if you have imported 3D objects from DXF files."))
    pm.addParameterForSection("Leaves", "Colors", uparams.PdParameter().make(77, "kStipuleFaceColor", "Stipule section front face color", 3, 1, 1, 1, 1, 1, 0.00000000, 0.00000000, "50 250 50", False, False, "pLeaf.stipuleTdoParams.FaceColor", 1, "The front face (facing up) color for leaf stipules (or stipule sections)."))
    pm.addParameterForSection("Leaves", "Colors", uparams.PdParameter().make(78, "kStipuleBackfaceColor", "Stipule section back face color", 3, 1, 1, 1, 1, 1, 0.00000000, 0.00000000, "50 150 50", False, False, "pLeaf.stipuleTdoParams.BackfaceColor", 1, "The back face (facing down) color for leaf stipules (or stipule sections)."))
    pm.addParameterForSection("Leaves", "Angles", uparams.PdParameter().make(79, "kStipuleAngleFromStem", "Angle between stipule and main stem", 1, 1, 4, 2, 2, 2, -180.00000000, 180.00000000, "50", False, False, "pLeaf.stipuleTdoParams.pullBackAngle", 1, "The angle between the main stem of the plant and the leaf stipule. You will usually want to set this lower than the angle between the main stem and the leaf."))
    pm.addParameterForSection("Leaves", "", uparams.PdParameter().make(80, "header", "Creation and growth", 7, 0, 0, 0, 0, 0, 0.00000000, 0.00000000, "", False, False, "", 0, "\"The size of any plant part is determined by an 'optimal' size and the actual conditions of growth. Plant parts compete for the available nutrients, as established by the general growth parameters. To simplify things, we express the weight (biomass) of " + "plant parts simply as a percentage of the total final weight of the plant.\""))
    pm.addParameterForSection("Leaves", "Biomass", uparams.PdParameter().make(81, "kLeafOptimalBiomass", "Optimal biomass (as percent of maximum plant biomass)", 1, 1, 27, 1, 1, 1, 0.00010000, 20.00000000, "5", True, False, "pLeaf.optimalBiomass_pctMPB", 1, "The biomass (dry weight) of a complete or best leaf, expressed as a percentage of final plant dry weight."))
    pm.addParameterForSection("Leaves", "Biomass", uparams.PdParameter().make(82, "kLeafSCurve", "Growth curve", 1, 3, 26, 1, 1, 1, 0.00000000, 1.00000000, "0.25 0.1 0.65 0.85", True, False, "pLeaf.sCurveParams", 2, "Fraction of final optimal (best) leaf biomass (Y) for a given leaf age (X). Leaves tend to grow in an s-curve fashion, so simulated leaf demands for biomass from the plant attempt to follow this curve."))
    pm.addParameterForSection("Leaves", "Biomass", uparams.PdParameter().make(83, "kLeafOptimalFractionOfOptimalBiomassAtCreation_frn", "Fraction of optimal final biomass at creation", 1, 1, 26, 1, 1, 1, 0.00000000, 1.00000000, "0.2", True, False, "pLeaf.optimalFractionOfOptimalBiomassAtCreation_frn", 1, "A leaf is created by a meristem with some amount of biomass, and then grows to its final biomass. This is the fraction of final biomass the leaf has when it is created. If zero, the leaf starts with nothing; if one, the leaf starts at full size."))
    pm.addParameterForSection("Leaves", "", uparams.PdParameter().make(84, "header", "Timing", 7, 0, 0, 0, 0, 0, 0.00000000, 0.00000000, "", False, False, "", 0, "Timing parameters set bounds on how slowly or quickly plant parts can grow to create a realistic growth pattern. These limits effect how many of the plant parts the plant can create during its lifetime (though the general biomass growth curve limits that " + "too)."))
    pm.addParameterForSection("Leaves", "Timing", uparams.PdParameter().make(85, "kLeafMinDaysToGrow", "Minimum days to grow", 2, 1, 23, 1, 1, 1, 1.00000000, 50.00000000, "3", True, False, "pLeaf.minDaysToGrow", 1, "The shortest number of days in which a leaf can grow to maturity, no matter how much biomass is available. This simulates physical limitations on the rate of growth."))
    pm.addParameterForSection("Leaves", "Timing", uparams.PdParameter().make(86, "kLeafMaxDaysToGrow", "Maximum days to grow", 2, 1, 23, 1, 1, 1, 1.00000000, 50.00000000, "10", True, False, "pLeaf.MaxDaysToGrow", 1, "Days a leaf will accumulate biomass towards the optimal leaf biomass before it gives up and stops growing. This simulates the plant's concentration of resources on newer plant parts."))
    #
    pm.addParameterForSection("Seedling leaves", "", uparams.PdParameter().make(87, "header", "Drawing", 7, 0, 0, 0, 0, 0, 0.00000000, 0.00000000, "", False, False, "", 0, "\"Seedling leaves, or cotyledons, are the first leaves that form on the plant. They often look quite different from the leaves that come afterward.\""))
    pm.addParameterForSection("Seedling leaves", "3D objects", uparams.PdParameter().make(88, "kSeedlingLeafObject3D", "Seedling leaf 3D object", 5, 1, 1, 1, 1, 1, 0.00000000, 0.00000000, "N[Default 3D object],P[134 245 150],P[113 208 145],P[135 209 150],P[109 171 142],P[136 171 147],P[135 136 138],P[156 208 145],P[159 171 140],T[1 2 3],T[3 2 4],T[3 4 5],T[4 6 5],T[3 7 1],T[7 3 5],T[8 7 5],T[8 5 6]", False, False, "pSeedlingLeaf.leafTdoParams.object3D", 3, "The 3D object used to draw the seedling leaf or leaves (cotyledons) of this plant when it has just emerged from germination."))
    pm.addParameterForSection("Seedling leaves", "3D objects", uparams.PdParameter().make(89, "kSeedlingLeafScale", "Seedling leaf scale at full size", 1, 1, 27, 1, 1, 1, 0.00000000, 100.00000000, "20", False, False, "pSeedlingLeaf.leafTdoParams.scaleAtFullSize", 1, "The drawing scale of the seedling leaf 3D object when the seedling leaf is fully grown."))
    pm.addParameterForSection("Seedling leaves", "Rotations", uparams.PdParameter().make(90, "kSeedlingLeafObject3DXRotationBeforeDraw", "Seedling leaf X rotation", 1, 1, 4, 2, 2, 2, -180.00000000, 180.00000000, "90", False, False, "pSeedlingLeaf.leafTdoParams.xRotationBeforeDraw", 1, "Just before this 3D object is drawn, it will be rotated in the X dimension by this amount. For leaves, this will normally be either 90 degrees or -90 degrees. Normally you will leave this at 90 or -90, but you might need to set it differently if you have " + "imported 3D objects from DXF files."))
    pm.addParameterForSection("Seedling leaves", "Rotations", uparams.PdParameter().make(91, "kSeedlingLeafObject3DYRotationBeforeDraw", "Seedling leaf Y rotation", 1, 1, 4, 2, 2, 2, -180.00000000, 180.00000000, "0", False, False, "pSeedlingLeaf.leafTdoParams.yRotationBeforeDraw", 1, "Just before this 3D object is drawn, it will be rotated in the Y dimension by this amount. Normally you will leave this at zero, but you might need to set it differently if you have imported 3D objects from DXF files."))
    pm.addParameterForSection("Seedling leaves", "Rotations", uparams.PdParameter().make(92, "kSeedlingLeafObject3DZRotationBeforeDraw", "Seedling leaf Z rotation", 1, 1, 4, 2, 2, 2, -180.00000000, 180.00000000, "0", False, False, "pSeedlingLeaf.leafTdoParams.zRotationBeforeDraw", 1, "Just before this 3D object is drawn, it will be rotated in the Z dimension by this amount. Normally you will leave this at zero, but you might need to set it differently if you have imported 3D objects from DXF files."))
    pm.addParameterForSection("Seedling leaves", "Colors", uparams.PdParameter().make(93, "kSeedlingLeafFaceColor", "Seedling leaf front face color", 3, 1, 1, 1, 1, 1, 0.00000000, 0.00000000, "50 100 50", False, False, "pSeedlingLeaf.leafTdoParams.FaceColor", 1, "The front face (facing up) color for seedling leaves."))
    pm.addParameterForSection("Seedling leaves", "Colors", uparams.PdParameter().make(94, "kSeedlingLeafBackfaceColor", "Seedling leaf back face color", 3, 1, 1, 1, 1, 1, 0.00000000, 0.00000000, "100 200 100", False, False, "pSeedlingLeaf.leafTdoParams.BackfaceColor", 1, "The back face (facing down) color for seedling leaves."))
    pm.addParameterForSection("Seedling leaves", "", uparams.PdParameter().make(95, "header", "Timing", 7, 0, 0, 0, 0, 0, 0.00000000, 0.00000000, "", False, False, "", 0, "\"The seedling leaves usually fall off the plant at some point. To place that point developmentally, we measure it by the number of internodes the plant has when the seedling leaves fall off. \""))
    pm.addParameterForSection("Seedling leaves", "Timing", uparams.PdParameter().make(96, "kSeedlingLeafNodesOnStemWhenFallsOff", "Number of nodes on main stem when seedling leaf falls off", 2, 1, 1, 1, 1, 1, 1.00000000, 50.00000000, "3", True, False, "pSeedlingLeaf.NodesOnStemWhenFallsOff", 1, "This is when the seedling leaf or leaves for this plant should fall off, based on the number of nodes (leaf positions) on the main stem. For example, if this number is 4, the seedling leaves will disappear when four leaves have appeared above the seedling" + " leaves."))
    #
    pm.addParameterForSection("Primary flowers", "", uparams.PdParameter().make(97, "header", "Petals", 7, 0, 0, 0, 0, 0, 0.00000000, 0.00000000, "", False, False, "", 0, "\"Primary flowers are perfect (hermaphroditic) or female, and secondary flowers are only male. Ninety percent of flowering plants have only perfect flowers. The primary flower parameters are divided into 'simple' and 'advanced' categories, the 'advanc" + "ed' category including all the flower parts except one row of petals.\""))
    pm.addParameterForSection("Primary flowers", "Numbers of things", uparams.PdParameter().make(98, "kFlowerNumPetalsFemale", "Number of petals on flower", 2, 1, 1, 1, 1, 1, 0.00000000, 30.00000000, "5", False, False, "pFlower[kGenderFemale].tdoParams[kFirstPetals].repetitions", 1, "The number of petals in this row on the flower."))
    pm.addParameterForSection("Primary flowers", "3D objects", uparams.PdParameter().make(99, "kFlowerFemaleObject3D", "Flower petal 3D object", 5, 1, 1, 1, 1, 1, 0.00000000, 0.00000000, "N[Default 3D object],P[134 245 150],P[113 208 145],P[135 209 150],P[109 171 142],P[136 171 147],P[135 136 138],P[156 208 145],P[159 171 140],T[1 2 3],T[3 2 4],T[3 4 5],T[4 6 5],T[3 7 1],T[7 3 5],T[8 7 5],T[8 5 6]", False, False, "pFlower[kGenderFemale].tdoParams[kFirstPetals].object3D", 3, "The 3D object used to draw first-row petals."))
    pm.addParameterForSection("Primary flowers", "3D objects", uparams.PdParameter().make(100, "kFlowerScaleAtFullSizeFemale", "Flower petal scale at full size", 1, 1, 27, 1, 1, 1, 0.00000000, 100.00000000, "3", False, False, "pFlower[kGenderFemale].tdoParams[kFirstPetals].ScaleAtFullSize", 1, "The drawing scale of the first-row petal 3D object when the flower is fully grown."))
    pm.addParameterForSection("Primary flowers", "Rotations", uparams.PdParameter().make(101, "kFlowerFemaleObject3DXRotationBeforeDraw", "Flower petal X rotation", 1, 1, 4, 2, 2, 2, -180.00000000, 180.00000000, "0", False, False, "pFlower[kGenderFemale].tdoParams[kFirstPetals].xRotationBeforeDraw", 1, "Just before this 3D object is drawn, it will be rotated in the X dimension by this amount. Normally you will leave this at zero, but you might need to set it differently if you have imported 3D objects from DXF files."))
    pm.addParameterForSection("Primary flowers", "Rotations", uparams.PdParameter().make(102, "kFlowerFemaleObject3DYRotationBeforeDraw", "Flower petal Y rotation", 1, 1, 4, 2, 2, 2, -180.00000000, 180.00000000, "0", False, False, "pFlower[kGenderFemale].tdoParams[kFirstPetals].yRotationBeforeDraw", 1, "Just before this 3D object is drawn, it will be rotated in the Y dimension by this amount. Normally you will leave this at zero, but you might need to set it differently if you have imported 3D objects from DXF files."))
    pm.addParameterForSection("Primary flowers", "Rotations", uparams.PdParameter().make(103, "kFlowerFemaleObject3DZRotationBeforeDraw", "Flower petal Z rotation", 1, 1, 4, 2, 2, 2, -180.00000000, 180.00000000, "0", False, False, "pFlower[kGenderFemale].tdoParams[kFirstPetals].zRotationBeforeDraw", 1, "Just before this 3D object is drawn, it will be rotated in the Z dimension by this amount. Normally you will leave this at zero, but you might need to set it differently if you have imported 3D objects from DXF files."))
    pm.addParameterForSection("Primary flowers", "Colors", uparams.PdParameter().make(104, "kFlowerFemaleFaceColor", "Flower petal front face color", 3, 1, 1, 1, 1, 1, 0.00000000, 0.00000000, "100 100 0", False, False, "pFlower[kGenderFemale].tdoParams[kFirstPetals].FaceColor", 1, "The front face (facing in) color for flower petals."))
    pm.addParameterForSection("Primary flowers", "Colors", uparams.PdParameter().make(105, "kFlowerFemaleBackfaceColor", "Flower petal back face color", 3, 1, 1, 1, 1, 1, 0.00000000, 0.00000000, "150 150 0", False, False, "pFlower[kGenderFemale].tdoParams[kFirstPetals].BackfaceColor", 1, "The back face (facing out) color for flower petals."))
    pm.addParameterForSection("Primary flowers", "Arrangement", uparams.PdParameter().make(106, "kFlowerPetalsAreRadiallyArrangedFemale", "Flower petals are radially arranged", 4, 1, 30, 1, 1, 1, 0.00000000, 0.00000000, "TRUE", False, False, "pFlower[kGenderFemale].tdoParams[kFirstPetals].radiallyArranged", 1, "If 'yes', the petals in this row are drawn rotated at different angles to make them form a circle around the stem. If 'no', they are all drawn at the same angle (and usually there is only one oddly-shaped 3D object)."))
    pm.addParameterForSection("Primary flowers", "Angles", uparams.PdParameter().make(107, "kFlowerFemaleObject3DPullbackAngle", "Angle between petals and main stem", 1, 1, 4, 2, 2, 2, -180.00000000, 180.00000000, "0", False, False, "pFlower[kGenderFemale].tdoParams[kFirstPetals].pullBackAngle", 1, "The angle at which the first-row petals are drawn back from the center of the flower. Usually you will want to specify an increasing angle for each layer of floral parts. How this appears on the plant depends on how the 3D object you are using for petals " + "was defined."))
    pm.addParameterForSection("Primary flowers", "", uparams.PdParameter().make(108, "header", "Creation and growth", 7, 0, 0, 0, 0, 0, 0.00000000, 0.00000000, "", False, False, "", 0, "\"The size of any plant part is determined by an 'optimal' size and the actual conditions of growth. Plant parts compete for the available nutrients, as established by the general growth parameters. To simplify things, we express the weight (biomass) of " + "plant parts simply as a percentage of the total final weight of the plant.\""))
    pm.addParameterForSection("Primary flowers", "Biomass", uparams.PdParameter().make(109, "kFlowerOptimalBiomassFemale", "Optimal biomass (as percent of maximum plant biomass)", 1, 1, 27, 1, 1, 1, 0.00010000, 20.00000000, "1", True, False, "pFlower[kGenderFemale].OptimalBiomass_pctMPB", 1, "The biomass (dry weight) of a complete or best flower, expressed as a percentage of final plant dry weight."))
    pm.addParameterForSection("Primary flowers", "Biomass", uparams.PdParameter().make(110, "kFlowerMinFractOptBiomassToOpenFlowerFemale", "Minimum fraction of optimal biomass needed to open", 1, 1, 26, 1, 1, 1, 0.00000000, 1.00000000, "0.5", True, False, "pFlower[kGenderFemale].MinFractionOfOptimalBiomassToOpenFlower_frn", 1, "The smallest fraction of the optimal (best) amount of flower biomass that must be accumulated before the flower can open."))
    pm.addParameterForSection("Primary flowers", "Biomass", uparams.PdParameter().make(111, "kFlowerMinFractionOfOptimalBiomassToCreateFruitFemale", "Minimum fraction of optimal biomass needed to set fruit", 1, 1, 26, 1, 1, 1, 0.00000000, 1.00000000, "0.8", True, False, "pFlower[kGenderFemale].minFractionOfOptimalBiomassToCreateFruit_frn", 1, "The smallest fraction of the optimal (best) amount of flower biomass that must be accumulated before the flower can create a fruit."))
    pm.addParameterForSection("Primary flowers", "", uparams.PdParameter().make(112, "header", "Timing", 7, 0, 0, 0, 0, 0, 0.00000000, 0.00000000, "", False, False, "", 0, "\"Timing parameters set bounds on how slowly or quickly plant parts can grow to create a realistic growth pattern. For female or perfect flowers, additional timing limits support showing (or not showing) different stages of flower and fruit development.\""))
    pm.addParameterForSection("Primary flowers", "Timing", uparams.PdParameter().make(113, "kFlowerMinDaysToGrowFemale", "Minimum days to grow", 2, 1, 23, 1, 1, 1, 1.00000000, 50.00000000, "3", True, False, "pFlower[kGenderFemale].MinDaysToGrow", 1, "The shortest number of days in which the flower can grow to maturity, no matter how much biomass is available. This simulates physical limitations on the rate of growth."))
    pm.addParameterForSection("Primary flowers", "Timing", uparams.PdParameter().make(114, "kFlowerMaxDaysToGrowIfOverMinFractionFemale", "Maximum days to grow", 2, 1, 23, 1, 1, 1, 1.00000000, 50.00000000, "10", True, False, "pFlower[kGenderFemale].MaxDaysToGrowIfOverMinFraction", 1, "Days the flower will accumulate biomass towards maturity before it gives up and stops growing. This simulates the plant's concentration of resources on newer meristems."))
    pm.addParameterForSection("Primary flowers", "Timing", uparams.PdParameter().make(115, "kFlowerMinDaysBeforeOpeningFemale", "Minimum days before opening", 2, 1, 23, 1, 1, 1, 1.00000000, 100.00000000, "3", True, False, "pFlower[kGenderFemale].minDaysToOpenFlower", 1, "The shortest number of days after flower creation that the flower can open from the flower bud."))
    pm.addParameterForSection("Primary flowers", "Timing", uparams.PdParameter().make(116, "kFlowerMinDaysBeforeSettingFruit", "Minimum days before fruit can be set", 2, 1, 23, 1, 1, 1, 1.00000000, 200.00000000, "3", True, False, "pFlower[kGenderFemale].minDaysBeforeSettingFruit", 1, "The shortest number of days the flower can appear and grow before it can set a fruit. Set this to a high number if you don't want fruits on your plant."))
    pm.addParameterForSection("Primary flowers", "Timing", uparams.PdParameter().make(117, "kFlowerDaysBeforeDropFemale", "Days until drop if fruit not set", 2, 1, 23, 1, 1, 1, 1.00000000, 200.00000000, "200", True, False, "pFlower[kGenderFemale].DaysBeforeDrop", 1, "Days between the appearance of flowers and their abscission (falling off)."))
    #
    pm.addParameterForSection("Primary inflorescences", "", uparams.PdParameter().make(118, "header", "Architecture", 7, 0, 0, 0, 0, 0, 0.00000000, 0.00000000, "", False, False, "", 0, "\"An inflorescence is a structure that holds the flowers on the plant. It can have many shapes, many of which can be created by combining these parameters (note that sunflower-like inflorescences have a special parameter). As with flowers, inflorescences c" + "an be primary (hermaphroditic or female) or secondary (male only).\""))
    pm.addParameterForSection("Primary inflorescences", "Numbers of things", uparams.PdParameter().make(119, "kInflorescenceNumFlowersOnMainBranchFemale", "Number of flowers on main branch", 2, 1, 1, 1, 1, 1, 0.00000000, 30.00000000, "3", True, False, "pInflor[kGenderFemale].numFlowersOnMainBranch", 1, "The number of flowers on the main branch of the inflorescence. This is produced without variation."))
    pm.addParameterForSection("Primary inflorescences", "Numbers of things", uparams.PdParameter().make(120, "kInflorescenceNumFlowersPerBranchFemale", "Number of flowers per secondary branch", 2, 1, 1, 1, 1, 1, 0.00000000, 30.00000000, "3", True, False, "pInflor[kGenderFemale].numFlowersPerBranch", 1, "The number of flowers on each secondary branch (not the main branch) of the inflorescence. This number of flowers will be produced on each branch whenever an inflorescence is produced, with no variation."))
    pm.addParameterForSection("Primary inflorescences", "Numbers of things", uparams.PdParameter().make(121, "kInflorescenceNumBranchesFemale", "Number of secondary branches", 2, 1, 1, 1, 1, 1, 0.00000000, 10.00000000, "3", True, False, "pInflor[kGenderFemale].NumBranches", 1, "The number of secondary inflorescence stems on the inflorescence. For spikes, racemes and umbels, this number should be zero. For panicles, this number depends on the number of flowers. Tertiary branches cannot be drawn."))
    pm.addParameterForSection("Primary inflorescences", "Colors", uparams.PdParameter().make(122, "kInflorescenceFemaleStalkColor", "Stalk color", 3, 1, 1, 1, 1, 1, 0.00000000, 0.00000000, "50 100 50", False, False, "pInflor[kGenderFemale].StalkColor", 1, "The color of the inflorescence stem."))
    pm.addParameterForSection("Primary inflorescences", "Colors", uparams.PdParameter().make(123, "kInflorescenceFemalePedicelColor", "Pedicel color", 3, 1, 1, 1, 1, 1, 0.00000000, 0.00000000, "50 100 50", False, False, "pInflor[kGenderFemale].pedicelColor", 1, "The color of pedicels (flower stems)."))
    pm.addParameterForSection("Primary inflorescences", "Arrangement", uparams.PdParameter().make(124, "kInflorescenceBranchesAreAlternateFemale", "Inflorescence branches are alternate", 4, 1, 30, 1, 1, 1, 0.00000000, 0.00000000, "TRUE", False, False, "pInflor[kGenderFemale].BranchesAreAlternate", 1, "If 'yes', the branches on the inflorescence are alternate (one to the left, then one to the right, etc). If 'no', the branches on the inflorescence (if any) will be drawn opposite (in pairs)."))
    pm.addParameterForSection("Primary inflorescences", "Angles", uparams.PdParameter().make(125, "kInflorescenceBranchAngleFemale", "Angle of inflor. branch with inflor. stem", 1, 1, 4, 2, 2, 2, 0.00000000, 180.00000000, "40", False, False, "pInflor[kGenderFemale].BranchAngle", 1, "The angle between the main inflorescence stem and each 'branch' of the inflorescence -- that is, each secondary inflorescence stem. Panicle inflorescences have branches; racemes do not."))
    pm.addParameterForSection("Primary inflorescences", "Angles", uparams.PdParameter().make(126, "kInflorescenceInternodeAngleFemale", "Angle between flowers (to bend infllorescence)", 1, 1, 4, 2, 2, 2, 0.00000000, 30.00000000, "0", False, False, "pInflor[kGenderFemale].angleBetweenInternodes", 1, "The angle between sections of the inflorescence. To make the inflorescence bend over its length, make this angle greater than zero."))
    pm.addParameterForSection("Primary inflorescences", "Angles", uparams.PdParameter().make(127, "kInflorescencePedicelAngleFemale", "Angle of pedicel with inflor. stem", 1, 1, 4, 2, 2, 2, 0.00000000, 180.00000000, "40", False, False, "pInflor[kGenderFemale].PedicelAngle", 1, "The angle between the main inflorescence stem and each single flower stalk or pedicel."))
    pm.addParameterForSection("Primary inflorescences", "Angles", uparams.PdParameter().make(128, "kInflorescencePeduncleAngleFromVegetativeStemFemale", "Angle of peduncle with plant stem if axillary", 1, 1, 4, 2, 2, 2, -180.00000000, 180.00000000, "40", False, False, "pInflor[kGenderFemale].peduncleAngleFromVegetativeStem", 1, "The angle at the start of the inflorescence if it comes out of an axillary bud from a plant stem (not used if the inflorescence is apical)."))
    pm.addParameterForSection("Primary inflorescences", "Angles", uparams.PdParameter().make(129, "kInflorescencePeduncleAngleFromVegetativeStemApicalFemale", "Angle of peduncle with plant stem if apical", 1, 1, 4, 2, 2, 2, -180.00000000, 180.00000000, "0", False, False, "pInflor[kGenderFemale].apicalStalkAngleFromVegetativeStem", 1, "The angle at the start of the inflorescence if it comes out of an apical bud from a plant stem (not used if the inflorescence is axillary)."))
    pm.addParameterForSection("Primary inflorescences", "Arrangement", uparams.PdParameter().make(130, "kInflorescenceFlowersSpiralOnStemFemale", "Flowers spiral around main stem", 4, 1, 30, 1, 1, 1, 0.00000000, 0.00000000, "TRUE", False, False, "pInflor[kGenderFemale].FlowersSpiralOnStem", 1, "If 'yes', the flowers on the inflorescence are drawn using the same phyllotaxis (spiraling) around the inflorescence stem (and branches) as is used for the main stem. If 'no', the flowers are drawn without spiraling."))
    pm.addParameterForSection("Primary inflorescences", "Arrangement", uparams.PdParameter().make(131, "kInflorescenceIsHeadFemale", "Head type (like sunflower)", 4, 1, 30, 1, 1, 1, 0.00000000, 0.00000000, "FALSE", False, False, "pInflor[kGenderFemale].IsHead", 1, "If 'yes', the inflorescence is of the composite type. The small disc flowers are drawn in a circle, each with one petal that looks something like a ray flower. This is not botanically accurate but looks right."))
    pm.addParameterForSection("Primary inflorescences", "", uparams.PdParameter().make(132, "header", "Size", 7, 0, 0, 0, 0, 0, 0.00000000, 0.00000000, "", False, False, "", 0, "These parameters control how large all the parts of the inflorescence will appear on the plant. Apical inflorescences are found at the tips of branches; axillary inflorescences are found in the angle between leaf and stem."))
    pm.addParameterForSection("Primary inflorescences", "Lengths", uparams.PdParameter().make(133, "kInflorescenceTerminalStalkLengthFemale", "Primary stalk length if apical (terminal)", 1, 1, 2, 2, 3, 6, 0.00000000, 200.00000000, "0", False, False, "pInflor[kGenderFemale].TerminalStalkLength_mm", 1, "The length of the main inflorescence stem before the first flower if the inflorescence is apical (at the apex or end of a plant stem)."))
    pm.addParameterForSection("Primary inflorescences", "Lengths", uparams.PdParameter().make(134, "kInflorescencePeduncleLengthFemale", "Primary stalk length if axillary", 1, 1, 2, 2, 3, 6, 0.00000000, 200.00000000, "10", False, False, "pInflor[kGenderFemale].PeduncleLength_mm", 1, "The length of the inflorescence stem before the first flower stalk (pedicel) if the  inflorescence is axillary (coming out of the leaf axils on plant stems)."))
    pm.addParameterForSection("Primary inflorescences", "Lengths", uparams.PdParameter().make(135, "kInflorescenceInternodeLengthFemale", "Internode length (between flowers)", 1, 1, 2, 2, 3, 6, 0.00000000, 200.00000000, "10", False, False, "pInflor[kGenderFemale].InternodeLength_mm", 1, "The length of the segments of the main inflorescence stem between pedicels (flower stalks). Similar to the internode length for the entire plant. For an umbelliferous flower, make this number very small; for a raceme or spike make this number larger."))
    pm.addParameterForSection("Primary inflorescences", "Lengths", uparams.PdParameter().make(136, "kInflorescencePedicelLengthFemale", "Pedicel (flower stalk) length", 1, 1, 2, 2, 3, 6, 0.00000000, 200.00000000, "10", False, False, "pInflor[kGenderFemale].PedicelLength_mm", 1, "The length of each pedicel (flower stalk) in the inflorescence."))
    pm.addParameterForSection("Primary inflorescences", "Widths", uparams.PdParameter().make(137, "kInflorescenceInternodeWidthFemale", "Stem width", 1, 1, 2, 2, 3, 6, 0.10000000, 20.00000000, "2", False, False, "pInflor[kGenderFemale].InternodeWidth_mm", 1, "The width of the inflorescence stem when the inflorescence is fully grown."))
    pm.addParameterForSection("Primary inflorescences", "Widths", uparams.PdParameter().make(138, "kInflorescencePedicelTaperIndexFemale", "Pedicel taper index", 2, 1, 27, 1, 1, 1, 0.00000000, 100.00000000, "100", False, False, "pInflor[kGenderFemale].pedicelTaperIndex", 1, "How much to taper the pedicel's width as it reaches the flower. For no tapering, choose 100% of initial width (the default). To taper the pedicel, choose a lower percentage."))
    pm.addParameterForSection("Primary inflorescences", "", uparams.PdParameter().make(139, "header", "Creation and growth", 7, 0, 0, 0, 0, 0, 0.00000000, 0.00000000, "", False, False, "", 0, "\"The size of any plant part is determined by an 'optimal' size and the actual conditions of growth. Plant parts compete for the available nutrients, as established by the general growth parameters. To simplify things, we express the weight (biomass) of " + "plant parts simply as a percentage of the total final weight of the plant.\""))
    pm.addParameterForSection("Primary inflorescences", "", uparams.PdParameter().make(140, "kInflorescenceIsTerminalFemale", "Apical (terminal)", 4, 1, 30, 1, 1, 1, 0.00000000, 0.00000000, "FALSE", True, False, "pInflor[kGenderFemale].IsTerminal", 1, "The primary inflorescences for this plant are apical (at the apex or end of a plant stem). This parameter is only used if separate primary and secondary inflorescences are present on the plant."))
    pm.addParameterForSection("Primary inflorescences", "Biomass", uparams.PdParameter().make(141, "kInflorescenceBiomassRequiredFemale", "Optimal biomass (as percent of maximum plant biomass)", 1, 1, 27, 1, 1, 1, 0.00010000, 20.00000000, "3", True, False, "pInflor[kGenderFemale].optimalBiomass_pctMPB", 1, "The biomass (dry weight) of a complete or best inflorescence, expressed as a percentage of final plant dry weight."))
    pm.addParameterForSection("Primary inflorescences", "Biomass", uparams.PdParameter().make(142, "kInflorescenceMinFractOptBiomassToCreateFemale", "Minimum fraction of optimal biomass needed to create", 1, 1, 26, 1, 1, 1, 0.00000000, 1.00000000, "0.1", True, False, "pInflor[kGenderFemale].MinFractionOfOptimalBiomassToCreateInflorescence_frn", 1, "The smallest fraction of the optimal (best) amount of inflorescence biomass that must be accumulated before the inflorescence can be created."))
    pm.addParameterForSection("Primary inflorescences", "Biomass", uparams.PdParameter().make(143, "kInflorescenceMinFractOptBiomassForFlowersFemale", "Minimum fraction of optimal biomass needed to make flowers", 1, 1, 26, 1, 1, 1, 0.00000000, 1.00000000, "0.3", True, False, "pInflor[kGenderFemale].MinFractionOfOptimalBiomassToMakeFlowers_frn", 1, "The smallest fraction of the optimal (best) amount of inflorescence biomass that must be accumulated before the inflorescence can begin to create flowers."))
    pm.addParameterForSection("Primary inflorescences", "", uparams.PdParameter().make(144, "header", "Timing", 7, 0, 0, 0, 0, 0, 0.00000000, 0.00000000, "", False, False, "", 0, "\"Timing parameters set bounds on how slowly or quickly plant parts can grow to create a realistic growth pattern. For inflorescences, timing parameters control not only limits on growth, but also how the inflorescence produces its flowers.\""))
    pm.addParameterForSection("Primary inflorescences", "Timing", uparams.PdParameter().make(145, "kInflorescenceDaysToAllFlowersShowingFemale", "Days for all flowers to develop", 2, 1, 23, 1, 1, 1, 1.00000000, 50.00000000, "10", True, False, "pInflor[kGenderFemale].daysToAllFlowersCreated", 1, "Days it takes to create the flowers on the inflorescence. Flowers are created without accumulating biomass beforehand. They begin to demand biomass as soon as they are created, to open from buds to flowers and then to grow to full size."))
    pm.addParameterForSection("Primary inflorescences", "Arrangement", uparams.PdParameter().make(146, "kInflorescenceFlowersDrawTopToBottomFemale", "Flowers develop from top to bottom", 4, 1, 30, 1, 1, 1, 0.00000000, 0.00000000, "FALSE", True, False, "pInflor[kGenderFemale].FlowersDrawTopToBottom", 1, "If 'yes', the flowers on the inflorescence develop in order from the top to the bottom (basipetal). If 'no', flowers develop from the bottom to the top (acropetal)."))
    pm.addParameterForSection("Primary inflorescences", "Timing", uparams.PdParameter().make(147, "kInflorescenceMinDaysToCreateInflorescenceFemale", "Minimum days for meristem to create", 2, 1, 23, 1, 1, 1, 1.00000000, 50.00000000, "3", True, False, "pInflor[kGenderFemale].MinDaysToCreateInflorescence", 1, "The shortest number of days in which a reproductive meristem can produce an inflorescence, no matter how much biomass is available. This simulates physical limitations on the rate of growth."))
    pm.addParameterForSection("Primary inflorescences", "Timing", uparams.PdParameter().make(148, "kInflorescenceMaxDaysToCreateIfOverMinFractFemale", "Maximum days for meristem to create", 2, 1, 23, 1, 1, 1, 1.00000000, 50.00000000, "10", True, False, "pInflor[kGenderFemale].MaxDaysToCreateInflorescenceIfOverMinFraction", 1, "Days a reproductive meristem will accumulate biomass towards creation of an inflorescence before it gives up and creates a smaller inflorescence. This simulates the plant's concentration of resources on newer meristems."))
    pm.addParameterForSection("Primary inflorescences", "Timing", uparams.PdParameter().make(149, "kInflorescenceMinDaysToGrowFemale", "Minimum days to grow", 2, 1, 23, 1, 1, 1, 1.00000000, 50.00000000, "3", True, False, "pInflor[kGenderFemale].MinDaysToGrow", 1, "The shortest number of days in which the inflorescence can possibly reach its optimal biomass after its creation. This simulates physical limitations on the rate of growth."))
    pm.addParameterForSection("Primary inflorescences", "Timing", uparams.PdParameter().make(150, "kInflorescenceMaxDaysToGrowFemale", "Maximum days to grow", 2, 1, 23, 1, 1, 1, 1.00000000, 50.00000000, "10", True, False, "pInflor[kGenderFemale].MaxDaysToGrow", 1, "Days the inflorescence will attempt to accumulate biomass to reach its optimal biomass (after its creation) before it stops growing. This simulates the plant's concentration of resources on the demands of newer plant parts."))
    pm.addParameterForSection("Primary inflorescences", "", uparams.PdParameter().make(151, "header", "Bracts", 7, 0, 0, 0, 0, 0, 0.00000000, 0.00000000, "", False, False, "", 0, "Some inflorescences begin with a set of modified leaves called bracts. The red 'petals' of poinsetta plants are actually large bracts below the tiny yellow flowers in the inflorescence."))
    pm.addParameterForSection("Primary inflorescences", "Numbers of things", uparams.PdParameter().make(152, "kInflorescenceFemaleBractNumBracts", "Number of bracts", 2, 1, 1, 1, 1, 1, 0.00000000, 30.00000000, "5", False, False, "pInflor[kGenderFemale].bractTdoParams.repetitions", 1, "The number of inflorescence bracts."))
    pm.addParameterForSection("Primary inflorescences", "3D objects", uparams.PdParameter().make(153, "kInflorescenceFemaleBractObject3D", "Bract 3D object", 5, 1, 1, 1, 1, 1, 0.00000000, 0.00000000, "N[Default 3D object],P[134 245 150],P[113 208 145],P[135 209 150],P[109 171 142],P[136 171 147],P[135 136 138],P[156 208 145],P[159 171 140],T[1 2 3],T[3 2 4],T[3 4 5],T[4 6 5],T[3 7 1],T[7 3 5],T[8 7 5],T[8 5 6]", False, False, "pInflor[kGenderFemale].bractTdoParams.object3D", 3, "The 3D object used to draw inflorescence bracts."))
    pm.addParameterForSection("Primary inflorescences", "3D objects", uparams.PdParameter().make(154, "kInflorescenceFemaleBractScaleAtFullSize", "Bract scale at full size", 1, 1, 1, 1, 1, 1, 0.00000000, 100.00000000, "0", False, False, "pInflor[kGenderFemale].bractTdoParams.scaleAtFullSize", 1, "The drawing scale of the inflorescence bract 3D object when the inflorescence is fully grown."))
    pm.addParameterForSection("Primary inflorescences", "Rotations", uparams.PdParameter().make(155, "kInflorescenceFemaleBractObject3DXRotationBeforeDraw", "Bract X rotation", 1, 1, 4, 2, 2, 2, -180.00000000, 180.00000000, "0", False, False, "pInflor[kGenderFemale].bractTdoParams.xRotationBeforeDraw", 1, "Just before this 3D object is drawn, it will be rotated in the X dimension by this amount. Normally you will leave this at zero, but you might need to set it differently if you have imported 3D objects from DXF files."))
    pm.addParameterForSection("Primary inflorescences", "Rotations", uparams.PdParameter().make(156, "kInflorescenceFemaleBractObject3DYRotationBeforeDraw", "Bract Y rotation", 1, 1, 4, 2, 2, 2, -180.00000000, 180.00000000, "0", False, False, "pInflor[kGenderFemale].bractTdoParams.yRotationBeforeDraw", 1, "Just before this 3D object is drawn, it will be rotated in the Y dimension by this amount. Normally you will leave this at zero, but you might need to set it differently if you have imported 3D objects from DXF files."))
    pm.addParameterForSection("Primary inflorescences", "Rotations", uparams.PdParameter().make(157, "kInflorescenceFemaleBractObject3DZRotationBeforeDraw", "Bract Z rotation", 1, 1, 4, 2, 2, 2, -180.00000000, 180.00000000, "0", False, False, "pInflor[kGenderFemale].bractTdoParams.zRotationBeforeDraw", 1, "Just before this 3D object is drawn, it will be rotated in the Z dimension by this amount. Normally you will leave this at zero, but you might need to set it differently if you have imported 3D objects from DXF files."))
    pm.addParameterForSection("Primary inflorescences", "Colors", uparams.PdParameter().make(158, "kInflorescenceFemaleBractFaceColor", "Bract front face color", 3, 1, 1, 1, 1, 1, 0.00000000, 0.00000000, "100 100 0", False, False, "pInflor[kGenderFemale].bractTdoParams.faceColor", 1, "The front face (facing up) color for inflorescence bracts."))
    pm.addParameterForSection("Primary inflorescences", "Colors", uparams.PdParameter().make(159, "kInflorescenceFemaleBractBackfaceColor", "Bract back face color", 3, 1, 1, 1, 1, 1, 0.00000000, 0.00000000, "150 150 0", False, False, "pInflor[kGenderFemale].bractTdoParams.backfaceColor", 1, "The back face (facing down) color for inflorescence bracts."))
    pm.addParameterForSection("Primary inflorescences", "Arrangement", uparams.PdParameter().make(160, "kInflorescenceFemaleBractsAreRadiallyArranged", "Bracts are radially arranged", 4, 1, 30, 1, 1, 1, 0.00000000, 0.00000000, "TRUE", False, False, "pInflor[kGenderFemale].bractTdoParams.radiallyArranged", 1, "If 'yes', the 3D objects used to draw inflorescence bracts are drawn rotated at different angles to make them form a circle around the stem. If 'no', they are all drawn at the same angle (and usually there is only one oddly-shaped 3D object)."))
    pm.addParameterForSection("Primary inflorescences", "Angles", uparams.PdParameter().make(161, "kInflorescenceFemaleBractObject3DPullbackAngle", "Angle between bracts and stem", 1, 1, 4, 2, 2, 2, -180.00000000, 180.00000000, "60", False, False, "pInflor[kGenderFemale].bractTdoParams.pullBackAngle", 1, "The angle at which the inflorescence bracts are drawn back from the center of the stem."))
    #
    pm.addParameterForSection("Fruit", "", uparams.PdParameter().make(162, "header", "Drawing", 7, 0, 0, 0, 0, 0, 0.00000000, 0.00000000, "", False, False, "", 0, "\"Fruits are drawn very simply with a 3D object, usually rotated around in 'sections' to form a solid-looking object. You can specify colors for the fruit in its ripe and unripe stages.\""))
    pm.addParameterForSection("Fruit", "3D objects", uparams.PdParameter().make(163, "kFruitNumSections", "Number of sections in fruit", 2, 1, 1, 1, 1, 1, 1.00000000, 30.00000000, "5", False, False, "pFruit.tdoParams.repetitions", 1, "You can make a fruit with one planar 3D object, in which case it looks sort of like a leaf, or you can make it with one 3D object drawn multiple times and spun around to produce an enclosed three-dimensional structure (like sections of an orange make up a" + "n orange). This parameter is the number of times to draw the specified 'section' 3D object to form the fruit structure."))
    pm.addParameterForSection("Fruit", "3D objects", uparams.PdParameter().make(164, "kFruitObject3D", "Fruit section 3D object", 5, 1, 1, 1, 1, 1, 0.00000000, 0.00000000, "N[Default 3D object],P[134 245 150],P[113 208 145],P[135 209 150],P[109 171 142],P[136 171 147],P[135 136 138],P[156 208 145],P[159 171 140],T[1 2 3],T[3 2 4],T[3 4 5],T[4 6 5],T[3 7 1],T[7 3 5],T[8 7 5],T[8 5 6]", False, False, "pFruit.tdoParams.object3D", 3, "The 3D object used to draw fruit sections. Fruit sections do not simulate real objects; they just make it easier to draw roughly spherical fruits."))
    pm.addParameterForSection("Fruit", "3D objects", uparams.PdParameter().make(165, "kFruitScaleAtFullSize", "Fruit section scale at full size", 1, 1, 27, 1, 1, 1, 0.00000000, 100.00000000, "10", False, False, "pFruit.tdoParams.scaleAtFullSize", 1, "The drawing scale of the fruit section 3D object when the fruit is fully grown."))
    pm.addParameterForSection("Fruit", "Rotations", uparams.PdParameter().make(166, "kFruitObject3DXRotationBeforeDraw", "Fruit section X rotation", 1, 1, 4, 2, 2, 2, -180.00000000, 180.00000000, "0", False, False, "pFruit.tdoParams.xRotationBeforeDraw", 1, "Just before this 3D object is drawn, it will be rotated in the X dimension by this amount. Normally you will leave this at zero, but you might need to set it differently if you have imported 3D objects from DXF files."))
    pm.addParameterForSection("Fruit", "Rotations", uparams.PdParameter().make(167, "kFruitObject3DYRotationBeforeDraw", "Fruit section Y rotation", 1, 1, 4, 2, 2, 2, -180.00000000, 180.00000000, "0", False, False, "pFruit.tdoParams.yRotationBeforeDraw", 1, "Just before this 3D object is drawn, it will be rotated in the Y dimension by this amount. Normally you will leave this at zero, but you might need to set it differently if you have imported 3D objects from DXF files."))
    pm.addParameterForSection("Fruit", "Rotations", uparams.PdParameter().make(168, "kFruitObject3DZRotationBeforeDraw", "Fruit section Z rotation", 1, 1, 4, 2, 2, 2, -180.00000000, 180.00000000, "0", False, False, "pFruit.tdoParams.zRotationBeforeDraw", 1, "Just before this 3D object is drawn, it will be rotated in the Z dimension by this amount. Normally you will leave this at zero, but you might need to set it differently if you have imported 3D objects from DXF files."))
    pm.addParameterForSection("Fruit", "Arrangement", uparams.PdParameter().make(169, "kFruitSectionsAreRadiallyArranged", "Fruit sections are radially arranged", 4, 1, 30, 1, 1, 1, 0.00000000, 0.00000000, "TRUE", False, False, "pFruit.tdoParams.radiallyArranged", 1, "If 'yes', the 3D objects used to draw sections of a fruit are drawn rotated at different angles to make them form a circle around the stem. If 'no', they are all drawn at the same angle (and usually there is only one oddly-shaped 3D object)."))
    pm.addParameterForSection("Fruit", "Colors", uparams.PdParameter().make(170, "kFruitUnripeFaceColor", "Unripe fruit section front face color", 3, 1, 1, 1, 1, 1, 0.00000000, 0.00000000, "0 100 100", False, False, "pFruit.tdoParams.alternateFaceColor", 1, "The front face (facing in) color for sections of an unripe fruit."))
    pm.addParameterForSection("Fruit", "Colors", uparams.PdParameter().make(171, "kFruitUnripeBackfaceColor", "Unripe fruit section back face color", 3, 1, 1, 1, 1, 1, 0.00000000, 0.00000000, "0 100 100", False, False, "pFruit.tdoParams.alternateBackfaceColor", 1, "The back face (facing out) color for sections of an unripe fruit."))
    pm.addParameterForSection("Fruit", "Colors", uparams.PdParameter().make(172, "kFruitRipeFaceColor", "Ripe fruit section front face color", 3, 1, 1, 1, 1, 1, 0.00000000, 0.00000000, "0 200 200", False, False, "pFruit.tdoParams.faceColor", 1, "The front face (facing in) color for sections of a ripe fruit."))
    pm.addParameterForSection("Fruit", "Colors", uparams.PdParameter().make(173, "kFruitRipeBackfaceColor", "Ripe fruit section back face color", 3, 1, 1, 1, 1, 1, 0.00000000, 0.00000000, "0 200 200", False, False, "pFruit.tdoParams.backfaceColor", 1, "The back face (facing out) color for sections of a ripe fruit. "))
    pm.addParameterForSection("Fruit", "", uparams.PdParameter().make(174, "header", "Creation and growth", 7, 0, 0, 0, 0, 0, 0.00000000, 0.00000000, "", False, False, "", 0, "\"The size of any plant part is determined by an 'optimal' size and the actual conditions of growth. Plant parts compete for the available nutrients, as established by the general growth parameters. To simplify things, we express the weight (biomass) of " + "plant parts simply as a percentage of the total final weight of the plant.\""))
    pm.addParameterForSection("Fruit", "Biomass", uparams.PdParameter().make(175, "kFruitOptimumMass_pctMPB", "Optimum biomass (as percent of maximum plant biomass)", 1, 1, 27, 1, 1, 1, 0.00010000, 20.00000000, "5", True, False, "pFruit.optimalBiomass_pctMPB", 1, "The biomass (dry weight) of a complete or best fruit, expressed as a percentage of final plant dry weight."))
    pm.addParameterForSection("Fruit", "Biomass", uparams.PdParameter().make(176, "kFruitSCurve", "Growth curve", 1, 3, 26, 1, 1, 1, 0.00000000, 1.00000000, "0.25 0.1 0.65 0.85", True, False, "pFruit.sCurveParams", 2, "Fraction of final optimal (best) fruit biomass (Y) for a given fruit age (X). Fruits tend to grow in an s-curve fashion, so simulated fruit demands for biomass from the plant attempt to follow this curve."))
    pm.addParameterForSection("Fruit", "", uparams.PdParameter().make(177, "header", "Timing", 7, 0, 0, 0, 0, 0, 0.00000000, 0.00000000, "", False, False, "", 0, "\"Timing parameters set bounds on how slowly or quickly plant parts can grow to create a realistic growth pattern. For fruit, they also determine when the fruit 'ripens' by changing color.\""))
    pm.addParameterForSection("Fruit", "Timing", uparams.PdParameter().make(178, "kFruitMinDaysToGrow", "Minimum days to grow", 2, 1, 23, 1, 1, 1, 1.00000000, 50.00000000, "7", True, False, "pFruit.MinDaysToGrow", 1, "The shortest number of days in which a fruit can grow to maturity, no matter how much biomass is available. This simulates physical limitations on the rate of growth."))
    pm.addParameterForSection("Fruit", "Timing", uparams.PdParameter().make(179, "kFruitMaxDaysToGrow", "Maximum days to grow", 2, 1, 23, 1, 1, 1, 1.00000000, 50.00000000, "20", True, False, "pFruit.MaxDaysToGrow", 1, "Days a fruit will accumulate biomass towards maturity before it gives up and stops growing. This simulates the plant's concentration of resources on newer meristems."))
    pm.addParameterForSection("Fruit", "Timing", uparams.PdParameter().make(180, "kFruitDaysToRipen", "Days to ripen once full-sized", 2, 1, 23, 1, 1, 1, 1.00000000, 100.00000000, "5", True, False, "pFruit.DaysToRipen", 1, "Days it takes for a fruit on this plant to ripen once it has stopped expanding. This is only for drawing (it has a different color when it is ripe) and does not affect the model."))
    #
    pm.addParameterForSection("Root top", "", uparams.PdParameter().make(181, "header", "Drawing", 7, 0, 0, 0, 0, 0, 0.00000000, 0.00000000, "", False, False, "", 0, "\"The root top isn't modeled as part of the plant; it's just drawn on the bottom of the plant very simply, to accommodate plants like carrots and beets.\""))
    pm.addParameterForSection("Root top", "", uparams.PdParameter().make(182, "kRootTopShowsAboveGround", "Root top shows above ground", 4, 1, 1, 1, 1, 1, 0.00000000, 0.00000000, "FALSE", False, False, "pRoot.ShowsAboveGround", 1, "The top of the root for this plant shows above the ground (and is worth looking at, as in a carrot or beet). If 'yes', a 3D object and colors should be chosen for the root top."))
    pm.addParameterForSection("Root top", "3D objects", uparams.PdParameter().make(183, "kRootTopObject3D", "Root top 3D object", 5, 1, 1, 1, 1, 1, 0.00000000, 0.00000000, "N[Default 3D object],P[134 245 150],P[113 208 145],P[135 209 150],P[109 171 142],P[136 171 147],P[135 136 138],P[156 208 145],P[159 171 140],T[1 2 3],T[3 2 4],T[3 4 5],T[4 6 5],T[3 7 1],T[7 3 5],T[8 7 5],T[8 5 6]", False, False, "pRoot.tdoParams.object3D", 3, "The 3D object used to draw the top of the root (the part you can see sticking out of the ground, as in a carrot)."))
    pm.addParameterForSection("Root top", "3D objects", uparams.PdParameter().make(184, "kRootTopScaleAtFullSize", "Root top scale at full size", 1, 1, 27, 1, 1, 1, 0.00000000, 100.00000000, "0", False, False, "pRoot.tdoParams.scaleAtFullSize", 1, "The drawing scale of the root top 3D object when the plant is mature."))
    pm.addParameterForSection("Root top", "Rotations", uparams.PdParameter().make(185, "kRootTopObject3DXRotationBeforeDraw", "Root top X rotation", 1, 1, 4, 2, 2, 2, -180.00000000, 180.00000000, "0", False, False, "pRoot.tdoParams.xRotationBeforeDraw", 1, "Just before this 3D object is drawn, it will be rotated in the X dimension by this amount. Normally you will leave this at zero, but you might need to set it differently if you have imported 3D objects from DXF files."))
    pm.addParameterForSection("Root top", "Rotations", uparams.PdParameter().make(186, "kRootTopObject3DYRotationBeforeDraw", "Root top Y rotation", 1, 1, 4, 2, 2, 2, -180.00000000, 180.00000000, "0", False, False, "pRoot.tdoParams.yRotationBeforeDraw", 1, "Just before this 3D object is drawn, it will be rotated in the Y dimension by this amount. Normally you will leave this at zero, but you might need to set it differently if you have imported 3D objects from DXF files."))
    pm.addParameterForSection("Root top", "Rotations", uparams.PdParameter().make(187, "kRootTopObject3DZRotationBeforeDraw", "Root top Z rotation", 1, 1, 4, 2, 2, 2, -180.00000000, 180.00000000, "0", False, False, "pRoot.tdoParams.zRotationBeforeDraw", 1, "Just before this 3D object is drawn, it will be rotated in the Z dimension by this amount. Normally you will leave this at zero, but you might need to set it differently if you have imported 3D objects from DXF files."))
    pm.addParameterForSection("Root top", "Colors", uparams.PdParameter().make(188, "kRootTopFaceColor", "Root top front face color", 3, 1, 1, 1, 1, 1, 0.00000000, 0.00000000, "150 150 0", False, False, "pRoot.tdoParams.faceColor", 1, "The front face (facing in) color for the root top."))
    pm.addParameterForSection("Root top", "Colors", uparams.PdParameter().make(189, "kRootTopBackfaceColor", "Root top back face color", 3, 1, 1, 1, 1, 1, 0.00000000, 0.00000000, "150 150 0", False, False, "pRoot.tdoParams.backfaceColor", 1, "The back face (facing out) color for the root top."))
    #
    pm.addParameterForSection("(no section)", "", uparams.PdParameter().make(190, "kStateAge", "Age for drawing", 2, 1, 1, 1, 1, 1, 0.00000000, 0.00000000, "20", False, True, "age", 1, "none"))
    pm.addParameterForSection("(no section)", "", uparams.PdParameter().make(191, "kStateBasePointX", "Base point x", 1, 1, 1, 1, 1, 1, 0.00000000, 0.00000000, "100", False, True, "basePoint_mm.x", 1, "none"))
    pm.addParameterForSection("(no section)", "", uparams.PdParameter().make(192, "kStateBasePointY", "Base point y", 1, 1, 1, 1, 1, 1, 0.00000000, 0.00000000, "100", False, True, "basePoint_mm.y", 1, "none"))
    pm.addParameterForSection("(no section)", "", uparams.PdParameter().make(193, "kStateDrawingScale", "Drawing scale", 1, 1, 1, 1, 1, 1, 0.00000000, 0.00000000, "1", False, True, "drawingScale_PixelsPerMm", 1, "none"))
    pm.addParameterForSection("(no section)", "", uparams.PdParameter().make(194, "kStateHidden", "Hidden", 4, 1, 30, 1, 1, 1, 0.00000000, 0.00000000, "", False, True, "hidden", 1, "none"))
    pm.addParameterForSection("(no section)", "", uparams.PdParameter().make(195, "kStateSelected", "Selected", 4, 1, 30, 1, 1, 1, 0.00000000, 0.00000000, "", False, True, "selectedWhenLastSaved", 1, "none"))
    pm.addParameterForSection("(no section)", "", uparams.PdParameter().make(196, "kStateRotationX", "X rotation", 1, 1, 1, 1, 1, 1, -360.00000000, 360.00000000, "0", False, True, "xRotation", 1, "none"))
    pm.addParameterForSection("(no section)", "", uparams.PdParameter().make(197, "kStateRotationY", "Y rotation", 1, 1, 1, 1, 1, 1, -360.00000000, 360.00000000, "0", False, True, "yRotation", 1, "none"))
    pm.addParameterForSection("(no section)", "", uparams.PdParameter().make(198, "kStateRotationZ", "Z rotation", 1, 1, 1, 1, 1, 1, -360.00000000, 360.00000000, "0", False, True, "zRotation", 1, "none"))
    #
    pm.addParameterForSection("Secondary flowers", "", uparams.PdParameter().make(199, "header", "Flower petals", 7, 0, 0, 0, 0, 0, 0.00000000, 0.00000000, "", False, False, "", 0, "\"Primary flowers are perfect (hermaphroditic) or female, and secondary flowers are only male. Ninety percent of flowering plants have only perfect flowers. Secondary flowers can only have stamens, one row of petals, and sepals (because it's not worth inc" + "luding so many parameters for parts rarely used).\""))
    pm.addParameterForSection("Secondary flowers", "Numbers of things", uparams.PdParameter().make(200, "kFlowerNumPetalsMale", "Number of petals on flower", 2, 1, 1, 1, 1, 1, 0.00000000, 30.00000000, "5", False, False, "pFlower[kGenderMale].tdoParams[kFirstPetals].repetitions", 1, "The number of petals on the flower."))
    pm.addParameterForSection("Secondary flowers", "3D objects", uparams.PdParameter().make(201, "kFlowerMaleObject3D", "Flower petal 3D object", 5, 1, 1, 1, 1, 1, 0.00000000, 0.00000000, "N[Default 3D object],P[134 245 150],P[113 208 145],P[135 209 150],P[109 171 142],P[136 171 147],P[135 136 138],P[156 208 145],P[159 171 140],T[1 2 3],T[3 2 4],T[3 4 5],T[4 6 5],T[3 7 1],T[7 3 5],T[8 7 5],T[8 5 6]", False, False, "pFlower[kGenderMale].tdoParams[kFirstPetals].object3D", 3, "The 3D object used to draw the flower petals."))
    pm.addParameterForSection("Secondary flowers", "3D objects", uparams.PdParameter().make(202, "kFlowerScaleAtFullSizeMale", "Flower petal scale at full size", 1, 1, 27, 1, 1, 1, 0.00000000, 100.00000000, "3", False, False, "pFlower[kGenderMale].tdoParams[kFirstPetals].ScaleAtFullSize", 1, "The drawing scale of the flower petal 3D object when the flower is fully grown."))
    pm.addParameterForSection("Secondary flowers", "Rotations", uparams.PdParameter().make(203, "kFlowerMaleObject3DXRotationBeforeDraw", "Flower petal X rotation", 1, 1, 4, 2, 2, 2, -180.00000000, 180.00000000, "0", False, False, "pFlower[kGenderMale].tdoParams[kFirstPetals].xRotationBeforeDraw", 1, "Just before this 3D object is drawn, it will be rotated in the X dimension by this amount. Normally you will leave this at zero, but you might need to set it differently if you have imported 3D objects from DXF files."))
    pm.addParameterForSection("Secondary flowers", "Rotations", uparams.PdParameter().make(204, "kFlowerMaleObject3DYRotationBeforeDraw", "Flower petal Y rotation", 1, 1, 4, 2, 2, 2, -180.00000000, 180.00000000, "0", False, False, "pFlower[kGenderMale].tdoParams[kFirstPetals].yRotationBeforeDraw", 1, "Just before this 3D object is drawn, it will be rotated in the Y dimension by this amount. Normally you will leave this at zero, but you might need to set it differently if you have imported 3D objects from DXF files."))
    pm.addParameterForSection("Secondary flowers", "Rotations", uparams.PdParameter().make(205, "kFlowerMaleObject3DZRotationBeforeDraw", "Flower petal Z rotation", 1, 1, 4, 2, 2, 2, -180.00000000, 180.00000000, "0", False, False, "pFlower[kGenderMale].tdoParams[kFirstPetals].zRotationBeforeDraw", 1, "Just before this 3D object is drawn, it will be rotated in the Z dimension by this amount. Normally you will leave this at zero, but you might need to set it differently if you have imported 3D objects from DXF files."))
    pm.addParameterForSection("Secondary flowers", "Colors", uparams.PdParameter().make(206, "kFlowerMaleFaceColor", "Flower petal front face color", 3, 1, 1, 1, 1, 1, 0.00000000, 0.00000000, "100 100 0", False, False, "pFlower[kGenderMale].tdoParams[kFirstPetals].FaceColor", 1, "The front face (facing in) color for flower petals."))
    pm.addParameterForSection("Secondary flowers", "Colors", uparams.PdParameter().make(207, "kFlowerMaleBackfaceColor", "Flower petal back face color", 3, 1, 1, 1, 1, 1, 0.00000000, 0.00000000, "150 150 0", False, False, "pFlower[kGenderMale].tdoParams[kFirstPetals].BackfaceColor", 1, "The back face (facing out) color for flower petals."))
    pm.addParameterForSection("Secondary flowers", "Arrangement", uparams.PdParameter().make(208, "kFlowerPetalsAreRadiallyArrangedMale", "Flower petals are radially arranged", 4, 1, 30, 1, 1, 1, 0.00000000, 0.00000000, "TRUE", False, False, "pFlower[kGenderMale].tdoParams[kFirstPetals].radiallyArranged", 1, "If 'yes', the petals are drawn rotated at different angles to make them form a circle around the stem. If 'no', they are all drawn at the same angle (and usually there is only one oddly-shaped 3D object)."))
    pm.addParameterForSection("Secondary flowers", "Angles", uparams.PdParameter().make(209, "kFlowerMaleObject3DPullbackAngle", "Angle between petals and main stem", 1, 1, 4, 2, 2, 2, -180.00000000, 180.00000000, "0", False, False, "pFlower[kGenderMale].tdoParams[kFirstPetals].pullBackAngle", 1, "The angle at which the petals are drawn back from the center of the flower. Usually you will want to specify an increasing angle for each layer of floral parts. How this appears on the plant depends on how the 3D object you are using for petals was define" + "d."))
    pm.addParameterForSection("Secondary flowers", "", uparams.PdParameter().make(210, "header", "Creation and growth", 7, 0, 0, 0, 0, 0, 0.00000000, 0.00000000, "", False, False, "", 0, "\"The size of any plant part is determined by an 'optimal' size and the actual conditions of growth. Plant parts compete for the available nutrients, as established by the general growth parameters. To simplify things, we express the weight (biomass) of " + "plant parts simply as a percentage of the total final weight of the plant.\""))
    pm.addParameterForSection("Secondary flowers", "Biomass", uparams.PdParameter().make(211, "kFlowerOptimalBiomassMale", "Optimal biomass (as percent of maximum plant biomass)", 1, 1, 27, 1, 1, 1, 0.00010000, 20.00000000, "0.1", True, False, "pFlower[kGenderMale].OptimalBiomass_pctMPB", 1, "The biomass (dry weight) of a complete or best flower, expressed as a percentage of final plant dry weight."))
    pm.addParameterForSection("Secondary flowers", "Biomass", uparams.PdParameter().make(212, "kFlowerMinFractOptBiomassToOpenFlowerMale", "Minimum fraction of optimal biomass needed to open", 1, 1, 26, 1, 1, 1, 0.00000000, 1.00000000, "0.5", True, False, "pFlower[kGenderMale].MinFractionOfOptimalBiomassToOpenFlower_frn", 1, "The smallest fraction of the optimal (best) amount of flower biomass that must be accumulated before the flower can open."))
    pm.addParameterForSection("Secondary flowers", "", uparams.PdParameter().make(213, "header", "Timing", 7, 0, 0, 0, 0, 0, 0.00000000, 0.00000000, "", False, False, "", 0, "\"Timing parameters set bounds on how slowly or quickly plant parts can grow to create a realistic growth pattern. For secondary (male) flowers, additional timing limits support showing (or not showing) different stages of flower development, including dro" + "pping off the plant after pollination is finished.\""))
    pm.addParameterForSection("Secondary flowers", "Timing", uparams.PdParameter().make(214, "kFlowerMinDaysToGrowMale", "Minimum days to grow", 2, 1, 23, 1, 1, 1, 1.00000000, 50.00000000, "3", True, False, "pFlower[kGenderMale].MinDaysToGrow", 1, "The shortest number of days in which the flower can grow to maturity, no matter how much biomass is available. This simulates physical limitations on the rate of growth."))
    pm.addParameterForSection("Secondary flowers", "Timing", uparams.PdParameter().make(215, "kFlowerMaxDaysToGrowIfOverMinFractionMale", "Maximum days to grow", 2, 1, 23, 1, 1, 1, 1.00000000, 50.00000000, "10", True, False, "pFlower[kGenderMale].MaxDaysToGrowIfOverMinFraction", 1, "Days the flower will accumulate biomass towards maturity before it gives up and stops growing. This simulates the plant's concentration of resources on newer meristems."))
    pm.addParameterForSection("Secondary flowers", "Timing", uparams.PdParameter().make(216, "kFlowerMinDaysBeforeOpeningMale", "Minimum days before opening", 2, 1, 23, 1, 1, 1, 1.00000000, 100.00000000, "3", True, False, "pFlower[kGenderMale].minDaysToOpenFlower", 1, "The shortest number of days after flower creation that the flower can open from the flower bud."))
    pm.addParameterForSection("Secondary flowers", "Timing", uparams.PdParameter().make(217, "kFlowerDaysBeforeDropMale", "Days until drop", 2, 1, 23, 1, 1, 1, 1.00000000, 200.00000000, "200", True, False, "pFlower[kGenderMale].DaysBeforeDrop", 1, "Days between the appearance of flowers and their abscission (falling off)."))
    pm.addParameterForSection("Secondary flowers", "", uparams.PdParameter().make(218, "header", "Stamens", 7, 0, 0, 0, 0, 0, 0.00000000, 0.00000000, "", False, False, "", 0, "\"Stamens are the male organs of the flower. The anther, which holds the pollen, is connected to the flower base by a stalk called the filament, and together these make up a stamen.\""))
    pm.addParameterForSection("Secondary flowers", "Numbers of things", uparams.PdParameter().make(219, "kFlowerNumStamensMale", "Number of stamens in flower", 2, 1, 1, 1, 1, 1, 0.00000000, 30.00000000, "5", False, False, "pFlower[kGenderMale].numStamens", 1, "The number of stamens on the flower."))
    pm.addParameterForSection("Secondary flowers", "Lengths", uparams.PdParameter().make(220, "kFlowerFilamentLengthMale", "Filament length at full size", 1, 1, 2, 2, 3, 6, 0.00000000, 100.00000000, "0", False, False, "pFlower[kGenderMale].filamentLength_mm", 1, "How long to draw the filament when the flower is fully grown. A filament is the stalk that (with the anther) makes up the stamen, the pollen-holding part of the flower."))
    pm.addParameterForSection("Secondary flowers", "Widths", uparams.PdParameter().make(221, "kFlowerFilamentWidthMale", "Filament width at full size", 1, 1, 2, 2, 3, 6, 0.10000000, 10.00000000, "0.3", False, False, "pFlower[kGenderMale].filamentWidth_mm", 1, "The width of the filament when the flower is fully grown."))
    pm.addParameterForSection("Secondary flowers", "Widths", uparams.PdParameter().make(222, "kFlowerFilamentTaperIndexMale", "Filament taper index (taper to % of width)", 2, 1, 27, 1, 1, 1, 0.00000000, 100.00000000, "100", False, False, "pFlower[kGenderMale].filamentTaperIndex", 1, "How much to taper the filament's width as it reaches the anther 3D object. For no tapering, choose 100% of initial width (the default). To taper the filament, choose a lower percentage."))
    pm.addParameterForSection("Secondary flowers", "Colors", uparams.PdParameter().make(223, "kFlowerFilamentColorMale", "Filament color", 3, 1, 1, 1, 1, 1, 0.00000000, 0.00000000, "100 100 0", False, False, "pFlower[kGenderMale].filamentColor", 1, "The color of filaments (anther stalks)."))
    pm.addParameterForSection("Secondary flowers", "Angles", uparams.PdParameter().make(224, "kFlowerAntherMaleObject3DPullbackAngle", "Angle between filament and main flower axis", 1, 1, 4, 2, 2, 2, -180.00000000, 180.00000000, "10", False, False, "pFlower[kGenderMale].tdoParams[kStamens].pullBackAngle", 1, "The angle at which the filaments are drawn back from the center of the flower. Usually you will want to specify an increasing angle for each layer of floral parts."))
    pm.addParameterForSection("Secondary flowers", "3D objects", uparams.PdParameter().make(225, "kFlowerAntherNumSectionsMale", "Number of sections in anther", 2, 1, 1, 1, 1, 1, 1.00000000, 10.00000000, "3", False, False, "pFlower[kGenderMale].tdoParams[kStamens].repetitions", 1, "You can make an anther with one planar 3D object, in which case it looks sort of like a leaf, or you can make it with one 3D object drawn multiple times and spun around to produce an enclosed three-dimensional structure (like sections of an orange make up" + " an orange). This parameter is the number of times to draw the specified 'section' 3D object to form the anther structure."))
    pm.addParameterForSection("Secondary flowers", "3D objects", uparams.PdParameter().make(226, "kFlowerMaleAntherObject3D", "Anther section 3D object", 5, 1, 1, 1, 1, 1, 0.00000000, 0.00000000, "N[Default 3D object],P[134 245 150],P[113 208 145],P[135 209 150],P[109 171 142],P[136 171 147],P[135 136 138],P[156 208 145],P[159 171 140],T[1 2 3],T[3 2 4],T[3 4 5],T[4 6 5],T[3 7 1],T[7 3 5],T[8 7 5],T[8 5 6]", False, False, "pFlower[kGenderMale].tdoParams[kStamens].object3D", 3, "The 3D object used to draw the anthers on the flower."))
    pm.addParameterForSection("Secondary flowers", "3D objects", uparams.PdParameter().make(227, "kFlowerAntherScaleAtFullSizeMale", "Anther section scale at full size", 1, 1, 1, 1, 1, 1, 0.00000000, 100.00000000, "0", False, False, "pFlower[kGenderMale].tdoParams[kStamens].scaleAtFullSize", 1, "The drawing scale of the anther 3D object when the flower is fully grown."))
    pm.addParameterForSection("Secondary flowers", "Rotations", uparams.PdParameter().make(228, "kFlowerMaleAntherObject3DXRotationBeforeDraw", "Anther section X rotation", 1, 1, 4, 2, 2, 2, -180.00000000, 180.00000000, "0", False, False, "pFlower[kGenderMale].tdoParams[kStamens].xRotationBeforeDraw", 1, "Just before this 3D object is drawn, it will be rotated in the X dimension by this amount. Normally you will leave this at zero, but you might need to set it differently if you have imported 3D objects from DXF files."))
    pm.addParameterForSection("Secondary flowers", "Rotations", uparams.PdParameter().make(229, "kFlowerMaleAntherObject3DYRotationBeforeDraw", "Anther section Y rotation", 1, 1, 4, 2, 2, 2, -180.00000000, 180.00000000, "0", False, False, "pFlower[kGenderMale].tdoParams[kStamens].yRotationBeforeDraw", 1, "Just before this 3D object is drawn, it will be rotated in the Y dimension by this amount. Normally you will leave this at zero, but you might need to set it differently if you have imported 3D objects from DXF files."))
    pm.addParameterForSection("Secondary flowers", "Rotations", uparams.PdParameter().make(230, "kFlowerMaleAntherObject3DZRotationBeforeDraw", "Anther section Z rotation", 1, 1, 4, 2, 2, 2, -180.00000000, 180.00000000, "0", False, False, "pFlower[kGenderMale].tdoParams[kStamens].zRotationBeforeDraw", 1, "Just before this 3D object is drawn, it will be rotated in the Z dimension by this amount. Normally you will leave this at zero, but you might need to set it differently if you have imported 3D objects from DXF files."))
    pm.addParameterForSection("Secondary flowers", "Colors", uparams.PdParameter().make(231, "kFlowerAntherMaleFaceColor", "Anther section front face color", 3, 1, 1, 1, 1, 1, 0.00000000, 0.00000000, "100 100 0", False, False, "pFlower[kGenderMale].tdoParams[kStamens].faceColor", 1, "The front face (facing in) color for anthers."))
    pm.addParameterForSection("Secondary flowers", "Colors", uparams.PdParameter().make(232, "kFlowerAntherMaleBackfaceColor", "Anther section back face color", 3, 1, 1, 1, 1, 1, 0.00000000, 0.00000000, "150 150 0", False, False, "pFlower[kGenderMale].tdoParams[kStamens].backfaceColor", 1, "The back face (facing out) color for anthers."))
    pm.addParameterForSection("Secondary flowers", "Arrangement", uparams.PdParameter().make(233, "kFlowerAntherSectionsAreRadiallyArrangedMale", "Anther sections are radially arranged", 4, 1, 30, 1, 1, 1, 0.00000000, 0.00000000, "TRUE", False, False, "pFlower[kGenderMale].tdoParams[kStamens].radiallyArranged", 1, "If 'yes', the 3D objects used to draw one anther are drawn rotated at different angles to make them form a circle around the stem. If 'no', they are all drawn at the same angle (and usually there is only one oddly-shaped 3D object)."))
    pm.addParameterForSection("Secondary flowers", "", uparams.PdParameter().make(234, "header", "Sepals", 7, 0, 0, 0, 0, 0, 0.00000000, 0.00000000, "", False, False, "", 0, "\"Sepals are the outermost layer of the flower's covering parts, and are often green.\""))
    pm.addParameterForSection("Secondary flowers", "Numbers of things", uparams.PdParameter().make(235, "kFlowerSepalNumPetalsMale", "Number of sepals on flower", 2, 1, 1, 1, 1, 1, 0.00000000, 30.00000000, "5", False, False, "pFlower[kGenderMale].tdoParams[kSepals].repetitions", 1, "The number of sepals on the flower."))
    pm.addParameterForSection("Secondary flowers", "3D objects", uparams.PdParameter().make(236, "kFlowerMaleSepalObject3D", "Sepal 3D object", 5, 1, 1, 1, 1, 1, 0.00000000, 0.00000000, "N[Default 3D object],P[134 245 150],P[113 208 145],P[135 209 150],P[109 171 142],P[136 171 147],P[135 136 138],P[156 208 145],P[159 171 140],T[1 2 3],T[3 2 4],T[3 4 5],T[4 6 5],T[3 7 1],T[7 3 5],T[8 7 5],T[8 5 6]", False, False, "pFlower[kGenderMale].tdoParams[kSepals].object3D", 3, "The 3D object used to draw the sepals."))
    pm.addParameterForSection("Secondary flowers", "3D objects", uparams.PdParameter().make(237, "kFlowerSepalScaleAtFullSizeMale", "Sepal scale at full size", 1, 1, 1, 1, 1, 1, 0.00000000, 100.00000000, "0", False, False, "pFlower[kGenderMale].tdoParams[kSepals].scaleAtFullSize", 1, "The drawing scale of the sepal 3D object when the flower is fully grown."))
    pm.addParameterForSection("Secondary flowers", "Rotations", uparams.PdParameter().make(238, "kFlowerMaleSepalObject3DXRotationBeforeDraw", "Sepal X rotation", 1, 1, 4, 2, 2, 2, -180.00000000, 180.00000000, "0", False, False, "pFlower[kGenderMale].tdoParams[kSepals].xRotationBeforeDraw", 1, "Just before this 3D object is drawn, it will be rotated in the X dimension by this amount. Normally you will leave this at zero, but you might need to set it differently if you have imported 3D objects from DXF files."))
    pm.addParameterForSection("Secondary flowers", "Rotations", uparams.PdParameter().make(239, "kFlowerMaleSepalObject3DYRotationBeforeDraw", "Sepal Y rotation", 1, 1, 4, 2, 2, 2, -180.00000000, 180.00000000, "0", False, False, "pFlower[kGenderMale].tdoParams[kSepals].yRotationBeforeDraw", 1, "Just before this 3D object is drawn, it will be rotated in the Y dimension by this amount. Normally you will leave this at zero, but you might need to set it differently if you have imported 3D objects from DXF files."))
    pm.addParameterForSection("Secondary flowers", "Rotations", uparams.PdParameter().make(240, "kFlowerMaleSepalObject3DZRotationBeforeDraw", "Sepal Z rotation", 1, 1, 4, 2, 2, 2, -180.00000000, 180.00000000, "0", False, False, "pFlower[kGenderMale].tdoParams[kSepals].zRotationBeforeDraw", 1, "Just before this 3D object is drawn, it will be rotated in the Z dimension by this amount. Normally you will leave this at zero, but you might need to set it differently if you have imported 3D objects from DXF files."))
    pm.addParameterForSection("Secondary flowers", "Colors", uparams.PdParameter().make(241, "kFlowerSepalMaleFaceColor", "Sepal front face color", 3, 1, 1, 1, 1, 1, 0.00000000, 0.00000000, "100 100 0", False, False, "pFlower[kGenderMale].tdoParams[kSepals].faceColor", 1, "The front face (facing in) color for sepals."))
    pm.addParameterForSection("Secondary flowers", "Colors", uparams.PdParameter().make(242, "kFlowerSepalMaleBackfaceColor", "Sepal back face color", 3, 1, 1, 1, 1, 1, 0.00000000, 0.00000000, "150 150 0", False, False, "pFlower[kGenderMale].tdoParams[kSepals].backfaceColor", 1, "The back face (facing out) color for sepals."))
    pm.addParameterForSection("Secondary flowers", "Arrangement", uparams.PdParameter().make(243, "kFlowerSepalPetalsAreRadiallyArrangedMale", "Sepals are radially arranged", 4, 1, 30, 1, 1, 1, 0.00000000, 0.00000000, "TRUE", False, False, "pFlower[kGenderMale].tdoParams[kSepals].radiallyArranged", 1, "If 'yes', the 3D objects used to draw the sepals are drawn rotated at different angles to make them form a circle around the stem. If 'no', they are all drawn at the same angle (and usually there is only one oddly-shaped 3D object)."))
    pm.addParameterForSection("Secondary flowers", "Angles", uparams.PdParameter().make(244, "kFlowerSepalMaleObject3DPullbackAngle", "Angle between sepals and main stem", 1, 1, 4, 2, 2, 2, -180.00000000, 180.00000000, "60", False, False, "pFlower[kGenderMale].tdoParams[kSepals].pullBackAngle", 1, "The angle at which the sepals are drawn back from the center of the flower. Usually you will want to specify an increasing angle for each layer of floral parts. How this appears on the plant depends on how the 3D object you are using for sepals was define" + "d."))
    pm.addParameterForSection("Secondary flowers", "", uparams.PdParameter().make(245, "header", "Flower bud", 7, 0, 0, 0, 0, 0, 0.00000000, 0.00000000, "", False, False, "", 0, "\"You can draw the flower bud either as a separate 3D object, or simply by opening up the angles that draw the floral parts.\""))
    pm.addParameterForSection("Secondary flowers", "Arrangement", uparams.PdParameter().make(246, "kFlowerMaleBudOption", "How to draw bud", 6, 1, 1, 1, 1, 1, 0.00000000, 0.00000000, "1 BudTdo", True, False, "pFlower[kGenderMale].budDrawingOption", 1, "If 'no bud', don't draw a bud on the flower at all. If 'single 3D object bud', draw a single 3D object (usually spun around in a circle) during the bud stage (this is the pre-PS2 style). If 'unfolding flower', don't draw a separate bud, but 'open" + " up' the flower by drawing all of its parts small and folded in together."))
    pm.addParameterForSection("Secondary flowers", "Numbers of things", uparams.PdParameter().make(247, "kFlowerBudNumPetalsMale", "Number of petals on flower bud", 2, 1, 1, 1, 1, 1, 0.00000000, 30.00000000, "5", False, False, "pFlower[kGenderMale].tdoParams[kBud].repetitions", 1, "The number of flower bud petals."))
    pm.addParameterForSection("Secondary flowers", "3D objects", uparams.PdParameter().make(248, "kFlowerMaleBudObject3D", "Bud petal 3D object", 5, 1, 1, 1, 1, 1, 0.00000000, 0.00000000, "N[Default 3D object],P[134 245 150],P[113 208 145],P[135 209 150],P[109 171 142],P[136 171 147],P[135 136 138],P[156 208 145],P[159 171 140],T[1 2 3],T[3 2 4],T[3 4 5],T[4 6 5],T[3 7 1],T[7 3 5],T[8 7 5],T[8 5 6]", False, False, "pFlower[kGenderMale].tdoParams[kBud].object3D", 3, "The 3D object used to draw the flower petals."))
    pm.addParameterForSection("Secondary flowers", "3D objects", uparams.PdParameter().make(249, "kFlowerBudScaleAtFullSizeMale", "Bud petal scale at full size", 1, 1, 1, 1, 1, 1, 0.00000000, 100.00000000, "10", False, False, "pFlower[kGenderMale].tdoParams[kBud].scaleAtFullSize", 1, "The drawing scale of the flower bud petal 3D object when the flower bud is fully grown (before the flower appears)."))
    pm.addParameterForSection("Secondary flowers", "Rotations", uparams.PdParameter().make(250, "kFlowerMaleBudObject3DXRotationBeforeDraw", "Bud petal X rotation", 1, 1, 4, 2, 2, 2, -180.00000000, 180.00000000, "0", False, False, "pFlower[kGenderMale].tdoParams[kBud].xRotationBeforeDraw", 1, "Just before this 3D object is drawn, it will be rotated in the X dimension by this amount. Normally you will leave this at zero, but you might need to set it differently if you have imported 3D objects from DXF files."))
    pm.addParameterForSection("Secondary flowers", "Rotations", uparams.PdParameter().make(251, "kFlowerMaleBudObject3DYRotationBeforeDraw", "Bud petal Y rotation", 1, 1, 4, 2, 2, 2, -180.00000000, 180.00000000, "0", False, False, "pFlower[kGenderMale].tdoParams[kBud].yRotationBeforeDraw", 1, "Just before this 3D object is drawn, it will be rotated in the Y dimension by this amount. Normally you will leave this at zero, but you might need to set it differently if you have imported 3D objects from DXF files."))
    pm.addParameterForSection("Secondary flowers", "Rotations", uparams.PdParameter().make(252, "kFlowerMaleBudObject3DZRotationBeforeDraw", "Bud petal Z rotation", 1, 1, 4, 2, 2, 2, -180.00000000, 180.00000000, "0", False, False, "pFlower[kGenderMale].tdoParams[kBud].zRotationBeforeDraw", 1, "Just before this 3D object is drawn, it will be rotated in the Z dimension by this amount. Normally you will leave this at zero, but you might need to set it differently if you have imported 3D objects from DXF files."))
    pm.addParameterForSection("Secondary flowers", "Colors", uparams.PdParameter().make(253, "kFlowerBudMaleFaceColor", "Bud petal front face color", 3, 1, 1, 1, 1, 1, 0.00000000, 0.00000000, "100 100 0", False, False, "pFlower[kGenderMale].tdoParams[kBud].faceColor", 1, "The front face (facing in) color for flower bud petals."))
    pm.addParameterForSection("Secondary flowers", "Colors", uparams.PdParameter().make(254, "kFlowerBudMaleBackfaceColor", "Bud petal back face color", 3, 1, 1, 1, 1, 1, 0.00000000, 0.00000000, "150 150 0", False, False, "pFlower[kGenderMale].tdoParams[kBud].backfaceColor", 1, "The back face (facing out) color for flower bud petals."))
    pm.addParameterForSection("Secondary flowers", "Arrangement", uparams.PdParameter().make(255, "kFlowerBudPetalsAreRadiallyArrangedMale", "Bud petals are radially arranged", 4, 1, 30, 1, 1, 1, 0.00000000, 0.00000000, "TRUE", False, False, "pFlower[kGenderMale].tdoParams[kBud].radiallyArranged", 1, "If 'yes', the 3D objects used to draw the flower bud are drawn rotated at different angles to make them form a circle around the stem. If 'no', they are all drawn at the same angle (and usually there is only one oddly-shaped 3D object)."))
    pm.addParameterForSection("Secondary flowers", "Angles", uparams.PdParameter().make(256, "kFlowerBudMaleObject3DPullbackAngle", "Angle between bud petals and main stem", 1, 1, 4, 2, 2, 2, -180.00000000, 180.00000000, "0", False, False, "pFlower[kGenderMale].tdoParams[kBud].pullBackAngle", 1, "The angle at which the bud petals are drawn back from the center of the flower."))
    #
    pm.addParameterForSection("Secondary inflorescences", "", uparams.PdParameter().make(257, "header", "Architecture", 7, 0, 0, 0, 0, 0, 0.00000000, 0.00000000, "", False, False, "", 0, "\"An inflorescence is a structure that holds the flowers on the plant. It can have many shapes, many of which can be created by combining these parameters (note that sunflower-like inflorescences have a special parameter). As with flowers, inflorescences c" + "an be primary (hermaphroditic or female) or secondary (male only).\""))
    pm.addParameterForSection("Secondary inflorescences", "Numbers of things", uparams.PdParameter().make(258, "kInflorescenceNumFlowersOnMainBranchMale", "Number of flowers on main branch", 2, 1, 1, 1, 1, 1, 0.00000000, 30.00000000, "3", True, False, "pInflor[kGenderMale].numFlowersOnMainBranch", 1, "The number of flowers on the main branch of the inflorescence. This is produced without variation."))
    pm.addParameterForSection("Secondary inflorescences", "Numbers of things", uparams.PdParameter().make(259, "kInflorescenceNumFlowersPerBranchMale", "Number of flowers per secondary branch", 2, 1, 1, 1, 1, 1, 0.00000000, 30.00000000, "10", True, False, "pInflor[kGenderMale].numFlowersPerBranch", 1, "The number of flowers on each secondary branch (not the main branch) of the inflorescence. This number of flowers will be produced on each branch whenever an inflorescence is produced, with no variation."))
    pm.addParameterForSection("Secondary inflorescences", "Numbers of things", uparams.PdParameter().make(260, "kInflorescenceNumBranchesMale", "Number of secondary branches", 2, 1, 1, 1, 1, 1, 0.00000000, 10.00000000, "3", True, False, "pInflor[kGenderMale].NumBranches", 1, "The number of secondary inflorescence stems on the inflorescence. For spikes, racemes and umbels, this number should be zero. For panicles, this number depends on the number of flowers. Tertiary branches cannot be drawn."))
    pm.addParameterForSection("Secondary inflorescences", "Colors", uparams.PdParameter().make(261, "kInflorescenceMaleStalkColor", "Stalk color", 3, 1, 1, 1, 1, 1, 0.00000000, 0.00000000, "50 100 50", False, False, "pInflor[kGenderMale].StalkColor", 1, "The color of the inflorescence stem."))
    pm.addParameterForSection("Secondary inflorescences", "Colors", uparams.PdParameter().make(262, "kInflorescenceMalePedicelColor", "Pedicel color", 3, 1, 1, 1, 1, 1, 0.00000000, 0.00000000, "50 100 50", False, False, "pInflor[kGenderMale].pedicelColor", 1, "The color of pedicels (flower stems)."))
    pm.addParameterForSection("Secondary inflorescences", "Arrangement", uparams.PdParameter().make(263, "kInflorescenceBranchesAreAlternateMale", "Inflorescence branches are alternate", 4, 1, 30, 1, 1, 1, 0.00000000, 0.00000000, "TRUE", False, False, "pInflor[kGenderMale].BranchesAreAlternate", 1, "If 'yes', the branches on the inflorescence are alternate (one to the left, then one to the right, etc). If  'no', the branches on the inflorescence (if any) will be drawn opposite (in pairs)."))
    pm.addParameterForSection("Secondary inflorescences", "Angles", uparams.PdParameter().make(264, "kInflorescenceBranchAngleMale", "Angle of inflor. branch with inflor. stem", 1, 1, 4, 2, 2, 2, 0.00000000, 180.00000000, "40", False, False, "pInflor[kGenderMale].BranchAngle", 1, "The angle between the main inflorescence stem and each 'branch' of the inflorescence -- that is, each secondary inflorescence stem. Panicle inflorescences have branches; racemes do not."))
    pm.addParameterForSection("Secondary inflorescences", "Angles", uparams.PdParameter().make(265, "kInflorescenceInternodeAngleMale", "Angle between flowers (to bend infllorescence)", 1, 1, 4, 2, 2, 2, 0.00000000, 30.00000000, "0", False, False, "pInflor[kGenderMale].angleBetweenInternodes", 1, "The angle between sections of the inflorescence. To make the inflorescence bend over its length, make this angle greater than zero."))
    pm.addParameterForSection("Secondary inflorescences", "Angles", uparams.PdParameter().make(266, "kInflorescencePedicelAngleMale", "Angle of pedicel with inflor. stem", 1, 1, 4, 2, 2, 2, 0.00000000, 180.00000000, "40", False, False, "pInflor[kGenderMale].PedicelAngle", 1, "The angle between the main inflorescence stem and each single flower stalk or pedicel."))
    pm.addParameterForSection("Secondary inflorescences", "Angles", uparams.PdParameter().make(267, "kInflorescencePeduncleAngleFromVegetativeStemMale", "Angle of peduncle with plant stem if axillary", 1, 1, 4, 2, 2, 2, 0.00000000, 180.00000000, "40", False, False, "pInflor[kGenderMale].peduncleAngleFromVegetativeStem", 1, "The angle at the start of the inflorescence if it comes out of an axillary bud from a plant stem (not used if the inflorescence is apical)."))
    pm.addParameterForSection("Secondary inflorescences", "Angles", uparams.PdParameter().make(268, "kInflorescencePeduncleAngleFromVegetativeStemApicalMale", "Angle of peduncle with plant stem if apical", 1, 1, 4, 2, 2, 2, 0.00000000, 180.00000000, "0", False, False, "pInflor[kGenderMale].apicalStalkAngleFromVegetativeStem", 1, "The angle at the start of the inflorescence if it comes out of an apical bud from a plant stem (not used if the inflorescence is axillary)."))
    pm.addParameterForSection("Secondary inflorescences", "Arrangement", uparams.PdParameter().make(269, "kInflorescenceFlowersSpiralOnStemMale", "Flowers spiral around main stem", 4, 1, 30, 1, 1, 1, 0.00000000, 0.00000000, "TRUE", False, False, "pInflor[kGenderMale].FlowersSpiralOnStem", 1, "If 'yes', the flowers on the inflorescence are drawn using the same phyllotaxis (spiraling) around the inflorescence stem (and branches) as is used for the main stem. If 'no', the flowers are drawn without spiraling."))
    pm.addParameterForSection("Secondary inflorescences", "Arrangement", uparams.PdParameter().make(270, "kInflorescenceIsHeadMale", "Head type (like sunflower)", 4, 1, 30, 1, 1, 1, 0.00000000, 0.00000000, "FALSE", False, False, "pInflor[kGenderMale].IsHead", 1, "The inflorescence is of the composite type. The small disc flowers are drawn in a circle, each with one petal that looks something like a ray flower. This is not botanically accurate but looks right."))
    pm.addParameterForSection("Secondary inflorescences", "", uparams.PdParameter().make(271, "header", "Size", 7, 0, 0, 0, 0, 0, 0.00000000, 0.00000000, "", False, False, "", 0, "These parameters control how large all the parts of the inflorescence will appear on the plant. Apical inflorescences are found at the tips of branches; axillary inflorescences are found in the angle between leaf and stem."))
    pm.addParameterForSection("Secondary inflorescences", "Lengths", uparams.PdParameter().make(272, "kInflorescenceTerminalStalkLengthMale", "Primary stalk length if apical (terminal)", 1, 1, 2, 2, 3, 6, 0.00000000, 200.00000000, "0", False, False, "pInflor[kGenderMale].TerminalStalkLength_mm", 1, "The length of the main inflorescence stem before the first flower if the inflorescence is apical (at the apex or end of a plant stem)."))
    pm.addParameterForSection("Secondary inflorescences", "Lengths", uparams.PdParameter().make(273, "kInflorescencePeduncleLengthMale", "Primary stalk length if axillary", 1, 1, 2, 2, 3, 6, 0.00000000, 200.00000000, "10", False, False, "pInflor[kGenderMale].PeduncleLength_mm", 1, "The length of the primary inflorescence stem before the first flower stalk (pedicel) if the inflorescence is axillary (coming out of the leaf axils on plant stems)."))
    pm.addParameterForSection("Secondary inflorescences", "Lengths", uparams.PdParameter().make(274, "kInflorescenceInternodeLengthMale", "Internode length (between flowers)", 1, 1, 2, 2, 3, 6, 0.00000000, 200.00000000, "10", False, False, "pInflor[kGenderMale].InternodeLength_mm", 1, "The length of the segments of the main inflorescence stem between pedicels (flower stalks). Similar to the internode length for the entire plant. For an umbelliferous flower, make this number very small; for a raceme or spike make this number larger."))
    pm.addParameterForSection("Secondary inflorescences", "Lengths", uparams.PdParameter().make(275, "kInflorescencePedicelLengthMale", "Pedicel (flower stalk) length", 1, 1, 2, 2, 3, 6, 0.00000000, 200.00000000, "10", False, False, "pInflor[kGenderMale].PedicelLength_mm", 1, "The length of each pedicel (flower stalk) in the inflorescence."))
    pm.addParameterForSection("Secondary inflorescences", "Widths", uparams.PdParameter().make(276, "kInflorescenceInternodeWidthMale", "Stem width", 1, 1, 2, 2, 3, 6, 0.10000000, 20.00000000, "2", False, False, "pInflor[kGenderMale].InternodeWidth_mm", 1, "The width of the inflorescence stem when the inflorescence is fully grown."))
    pm.addParameterForSection("Secondary inflorescences", "Widths", uparams.PdParameter().make(277, "kInflorescencePedicelTaperIndexMale", "Pedicel taper index", 2, 1, 27, 1, 1, 1, 0.00000000, 100.00000000, "100", False, False, "pInflor[kGenderMale].pedicelTaperIndex", 1, "How much to taper the pedicel's width as it reaches the flower. For no tapering, choose 100% of initial width (the default). To taper the pedicel, choose a lower percentage."))
    pm.addParameterForSection("Secondary inflorescences", "", uparams.PdParameter().make(278, "header", "Creation and growth", 7, 0, 0, 0, 0, 0, 0.00000000, 0.00000000, "", False, False, "", 0, "\"The size of any plant part is determined by an 'optimal' size and the actual conditions of growth. Plant parts compete for the available nutrients, as established by the general growth parameters. To simplify things, we express the weight (biomass) of " + "plant parts simply as a percentage of the total final weight of the plant.\""))
    pm.addParameterForSection("Secondary inflorescences", "Arrangement", uparams.PdParameter().make(279, "kInflorescenceIsTerminalMale", "Apical (terminal)", 4, 1, 30, 1, 1, 1, 0.00000000, 0.00000000, "FALSE", True, False, "pInflor[kGenderMale].IsTerminal", 1, "The secondary inflorescences for this plant are apical (at the apex or end of a plant stem). This parameter is only used if separate primary and secondary inflorescences are present on the plant."))
    pm.addParameterForSection("Secondary inflorescences", "Biomass", uparams.PdParameter().make(280, "kInflorescenceBiomassRequiredMale", "Optimal biomass (as percent of maximum plant biomass)", 1, 1, 27, 1, 1, 1, 0.00010000, 20.00000000, "3", True, False, "pInflor[kGenderMale].optimalBiomass_pctMPB", 1, "The biomass (dry weight) of a complete or best inflorescence, expressed as a percentage of final plant dry weight."))
    pm.addParameterForSection("Secondary inflorescences", "Biomass", uparams.PdParameter().make(281, "kInflorescenceMinFractOptBiomassToCreateMale", "Minimum fraction of optimal biomass needed to create", 1, 1, 26, 1, 1, 1, 0.00000000, 1.00000000, "0.1", True, False, "pInflor[kGenderMale].MinFractionOfOptimalBiomassToCreateInflorescence_frn", 1, "The smallest fraction of the optimal (best) amount of inflorescence biomass that must be accumulated before the inflorescence can be created."))
    pm.addParameterForSection("Secondary inflorescences", "Biomass", uparams.PdParameter().make(282, "kInflorescenceMinFractOptBiomassForFlowersMale", "Minimum fraction of optimal biomass needed to make flowers", 1, 1, 26, 1, 1, 1, 0.00000000, 1.00000000, "0.3", True, False, "pInflor[kGenderMale].MinFractionOfOptimalBiomassToMakeFlowers_frn", 1, "The smallest fraction of the optimal (best) amount of inflorescence biomass that must be accumulated before the inflorescence can begin to create flowers."))
    pm.addParameterForSection("Secondary inflorescences", "", uparams.PdParameter().make(283, "header", "Timing", 7, 0, 0, 0, 0, 0, 0.00000000, 0.00000000, "", False, False, "", 0, "\"Timing parameters set bounds on how slowly or quickly plant parts can grow to create a realistic growth pattern. For inflorescences, timing parameters control not only limits on growth, but also how the inflorescence produces its flowers.\""))
    pm.addParameterForSection("Secondary inflorescences", "Timing", uparams.PdParameter().make(284, "kInflorescenceDaysToAllFlowersShowingMale", "Days for all flowers to develop", 2, 1, 23, 1, 1, 1, 1.00000000, 50.00000000, "20", True, False, "pInflor[kGenderMale].daysToAllFlowersCreated", 1, "Days it takes to create the flowers on the inflorescence. Flowers are created without accumulating biomass beforehand. They begin to demand biomass as soon as they are created, to open from buds to flowers and then to grow to full size."))
    pm.addParameterForSection("Secondary inflorescences", "Timing", uparams.PdParameter().make(285, "kInflorescenceFlowersDrawTopToBottomMale", "Flowers develop from top to bottom", 4, 1, 30, 1, 1, 1, 0.00000000, 0.00000000, "FALSE", True, False, "pInflor[kGenderMale].FlowersDrawTopToBottom", 1, "If 'yes', the flowers on the inflorescence develop in order from the top to the bottom (basipetal). If 'no', flowers develop from the bottom to the top (acropetal)."))
    pm.addParameterForSection("Secondary inflorescences", "Timing", uparams.PdParameter().make(286, "kInflorescenceMinDaysToCreateInflorescenceMale", "Minimum days for meristem to create", 2, 1, 23, 1, 1, 1, 1.00000000, 50.00000000, "3", True, False, "pInflor[kGenderMale].MinDaysToCreateInflorescence", 1, "The shortest number of days in which a reproductive meristem can produce an inflorescence, no matter how much biomass is available. This simulates physical limitations on the rate of growth."))
    pm.addParameterForSection("Secondary inflorescences", "Timing", uparams.PdParameter().make(287, "kInflorescenceMaxDaysToCreateIfOverMinFractMale", "Maximum days for meristem to create", 2, 1, 23, 1, 1, 1, 1.00000000, 50.00000000, "10", True, False, "pInflor[kGenderMale].MaxDaysToCreateInflorescenceIfOverMinFraction", 1, "Days a reproductive meristem will accumulate biomass towards creation of an inflorescence before it gives up and creates a smaller inflorescence. This simulates the plant's concentration of resources on newer meristems."))
    pm.addParameterForSection("Secondary inflorescences", "Timing", uparams.PdParameter().make(288, "kInflorescenceMinDaysToGrowMale", "Minimum days to grow", 2, 1, 23, 1, 1, 1, 1.00000000, 50.00000000, "3", True, False, "pInflor[kGenderMale].MinDaysToGrow", 1, "The shortest number of days in which the inflorescence can possibly reach its optimal biomass after its creation. This simulates physical limitations on the rate of growth."))
    pm.addParameterForSection("Secondary inflorescences", "Timing", uparams.PdParameter().make(289, "kInflorescenceMaxDaysToGrowMale", "Maximum days to grow", 2, 1, 23, 1, 1, 1, 1.00000000, 50.00000000, "10", True, False, "pInflor[kGenderMale].MaxDaysToGrow", 1, "Days the inflorescence will attempt to accumulate biomass to reach its optimal biomass (after its creation) before it stops growing. This simulates the plant's concentration of resources on the demands of newer plant parts."))
    pm.addParameterForSection("Secondary inflorescences", "", uparams.PdParameter().make(290, "header", "Bracts", 7, 0, 0, 0, 0, 0, 0.00000000, 0.00000000, "", False, False, "", 0, "Some inflorescences begin with a set of modified leaves called bracts. The red 'petals' of poinsetta plants are actually large bracts below the tiny yellow flowers in the inflorescence."))
    pm.addParameterForSection("Secondary inflorescences", "Numbers of things", uparams.PdParameter().make(291, "kInflorescenceMaleBractNumBracts", "Number of bracts at start of inflorescence", 2, 1, 1, 1, 1, 1, 0.00000000, 30.00000000, "5", False, False, "pInflor[kGenderMale].bractTdoParams.repetitions", 1, "The number of inflorescence bracts."))
    pm.addParameterForSection("Secondary inflorescences", "3D objects", uparams.PdParameter().make(292, "kInflorescenceMaleBractObject3D", "Bract 3D object", 5, 1, 1, 1, 1, 1, 0.00000000, 0.00000000, "N[Default 3D object],P[134 245 150],P[113 208 145],P[135 209 150],P[109 171 142],P[136 171 147],P[135 136 138],P[156 208 145],P[159 171 140],T[1 2 3],T[3 2 4],T[3 4 5],T[4 6 5],T[3 7 1],T[7 3 5],T[8 7 5],T[8 5 6]", False, False, "pInflor[kGenderMale].bractTdoParams.object3D", 3, "The 3D object used to draw inflorescence bracts."))
    pm.addParameterForSection("Secondary inflorescences", "3D objects", uparams.PdParameter().make(293, "kInflorescenceMaleBractScaleAtFullSize", "Bract scale at full size", 1, 1, 1, 1, 1, 1, 0.00000000, 100.00000000, "0", False, False, "pInflor[kGenderMale].bractTdoParams.scaleAtFullSize", 1, "The drawing scale of the inflorescence bract 3D object when the inflorescence is fully grown."))
    pm.addParameterForSection("Secondary inflorescences", "Rotations", uparams.PdParameter().make(294, "kInflorescenceMaleBractObject3DXRotationBeforeDraw", "Bract X rotation", 1, 1, 4, 2, 2, 2, -180.00000000, 180.00000000, "0", False, False, "pInflor[kGenderMale].bractTdoParams.xRotationBeforeDraw", 1, "Just before this 3D object is drawn, it will be rotated in the X dimension by this amount. Normally you will leave this at zero, but you might need to set it differently if you have imported 3D objects from DXF files."))
    pm.addParameterForSection("Secondary inflorescences", "Rotations", uparams.PdParameter().make(295, "kInflorescenceMaleBractObject3DYRotationBeforeDraw", "Bract Y rotation", 1, 1, 4, 2, 2, 2, -180.00000000, 180.00000000, "0", False, False, "pInflor[kGenderMale].bractTdoParams.yRotationBeforeDraw", 1, "Just before this 3D object is drawn, it will be rotated in the Y dimension by this amount. Normally you will leave this at zero, but you might need to set it differently if you have imported 3D objects from DXF files."))
    pm.addParameterForSection("Secondary inflorescences", "Rotations", uparams.PdParameter().make(296, "kInflorescenceMaleBractObject3DZRotationBeforeDraw", "Bract Z rotation", 1, 1, 4, 2, 2, 2, -180.00000000, 180.00000000, "0", False, False, "pInflor[kGenderMale].bractTdoParams.zRotationBeforeDraw", 1, "Just before this 3D object is drawn, it will be rotated in the Z dimension by this amount. Normally you will leave this at zero, but you might need to set it differently if you have imported 3D objects from DXF files."))
    pm.addParameterForSection("Secondary inflorescences", "Colors", uparams.PdParameter().make(297, "kInflorescenceMaleBractFaceColor", "Bract front face color", 3, 1, 1, 1, 1, 1, 0.00000000, 0.00000000, "100 100 0", False, False, "pInflor[kGenderMale].bractTdoParams.faceColor", 1, "The front face (facing in) color for inflorescence bracts."))
    pm.addParameterForSection("Secondary inflorescences", "Colors", uparams.PdParameter().make(298, "kInflorescenceMaleBractBackfaceColor", "Bract back face color", 3, 1, 1, 1, 1, 1, 0.00000000, 0.00000000, "150 150 0", False, False, "pInflor[kGenderMale].bractTdoParams.backfaceColor", 1, "The back face (facing out) color for inflorescence bracts."))
    pm.addParameterForSection("Secondary inflorescences", "Arrangement", uparams.PdParameter().make(299, "kInflorescenceMaleBractsAreRadiallyArranged", "Bracts are radially arranged", 4, 1, 30, 1, 1, 1, 0.00000000, 0.00000000, "TRUE", False, False, "pInflor[kGenderMale].bractTdoParams.radiallyArranged", 1, "If 'yes', the 3D objects used to draw inflorescence bracts are drawn rotated at different angles to make them form a circle around the stem. If 'no', they are all drawn at the same angle (and usually there is only one oddly-shaped 3D object)."))
    pm.addParameterForSection("Secondary inflorescences", "Angles", uparams.PdParameter().make(300, "kInflorescenceMaleBractObject3DPullbackAngle", "Angle between bracts and inflorescence stem", 1, 1, 4, 2, 2, 2, -180.00000000, 180.00000000, "60", False, False, "pInflor[kGenderMale].bractTdoParams.pullBackAngle", 1, "The angle at which the inflorescence bracts are drawn back from the center of the stem."))
    #
    pm.addParameterForSection("Primary flowers, advanced", "", uparams.PdParameter().make(301, "header", "Pistils", 7, 0, 0, 0, 0, 0, 0.00000000, 0.00000000, "", False, False, "", 0, "\"Pistils are the female organs of the plant. The stigma receives the pollen, and it is connected to the floral base by a stalk called the style, and together these make up the pistil. Though male flowers can have non-functional pistils, we only draw them " + "on female or hermaphroditic (perfect) flowers here.\""))
    pm.addParameterForSection("Primary flowers, advanced", "Numbers of things", uparams.PdParameter().make(302, "kFlowerNumPistilsFemale", "Number of pistils in flower", 2, 1, 1, 1, 1, 1, 0.00000000, 30.00000000, "1", False, False, "pFlower[kGenderFemale].numPistils", 1, "The number of pistils on the flower."))
    pm.addParameterForSection("Primary flowers, advanced", "Lengths", uparams.PdParameter().make(303, "kFlowerStyleLengthFemale", "Style length at full size", 1, 1, 2, 2, 3, 6, 0.00000000, 100.00000000, "0", False, False, "pFlower[kGenderFemale].styleLength_mm", 1, "How long to draw the style at its full size. A style is the stalk that (with the stigma) makes up the pistil, the pollen-receiving part of the flower."))
    pm.addParameterForSection("Primary flowers, advanced", "Widths", uparams.PdParameter().make(304, "kFlowerStyleWidthFemale", "Style width at full size", 1, 1, 2, 2, 3, 6, 0.10000000, 10.00000000, "0.5", False, False, "pFlower[kGenderFemale].styleWidth_mm", 1, "The width of the style when the flower is fully grown."))
    pm.addParameterForSection("Primary flowers, advanced", "Widths", uparams.PdParameter().make(305, "kFlowerStyleTaperIndexFemale", "Style taper index (taper to % of width)", 2, 1, 27, 1, 1, 1, 0.00000000, 100.00000000, "100", False, False, "pFlower[kGenderFemale].styleTaperIndex", 1, "How much to taper the style's width as it reaches the anther 3D object. For no tapering, choose 100% of initial width (the default). To taper the style, choose a lower percentage."))
    pm.addParameterForSection("Primary flowers, advanced", "Angles", uparams.PdParameter().make(306, "kFlowerStigmaFemaleObject3DPullbackAngle", "Angle between style and main flower axis", 1, 1, 4, 2, 2, 2, -180.00000000, 180.00000000, "0", False, False, "pFlower[kGenderFemale].tdoParams[kPistils].pullBackAngle", 1, "The angle at which the styles are drawn back from the center of the flower. Usually you will want to specify an increasing angle for each layer of floral parts."))
    pm.addParameterForSection("Primary flowers, advanced", "Colors", uparams.PdParameter().make(307, "kFlowerStyleColorFemale", "Style color", 3, 1, 1, 1, 1, 1, 0.00000000, 0.00000000, "100 100 0", False, False, "pFlower[kGenderFemale].styleColor", 1, "The color of styles (pistil stalks)."))
    pm.addParameterForSection("Primary flowers, advanced", "3D objects", uparams.PdParameter().make(308, "kFlowerStigmaNumSectionsFemale", "Number of sections in stigma", 2, 1, 1, 1, 1, 1, 1.00000000, 10.00000000, "3", False, False, "pFlower[kGenderFemale].tdoParams[kPistils].repetitions", 1, "You can make a stigma with one planar 3D object, in which case it looks sort of like a leaf, or you can make it with one 3D object drawn multiple times and spun around to produce an enclosed three-dimensional structure (like sections of an orange make up " + "an orange). This parameter is the number of times to draw the specified 'section' 3D object to form the stigma structure."))
    pm.addParameterForSection("Primary flowers, advanced", "3D objects", uparams.PdParameter().make(309, "kFlowerFemaleStigmaObject3D", "Stigma section 3D object", 5, 1, 1, 1, 1, 1, 0.00000000, 0.00000000, "N[Default 3D object],P[134 245 150],P[113 208 145],P[135 209 150],P[109 171 142],P[136 171 147],P[135 136 138],P[156 208 145],P[159 171 140],T[1 2 3],T[3 2 4],T[3 4 5],T[4 6 5],T[3 7 1],T[7 3 5],T[8 7 5],T[8 5 6]", False, False, "pFlower[kGenderFemale].tdoParams[kPistils].object3D", 3, "The 3D object used to draw the stigma (pollen receiver)."))
    pm.addParameterForSection("Primary flowers, advanced", "3D objects", uparams.PdParameter().make(310, "kFlowerStigmaScaleAtFullSizeFemale", "Stigma section scale at full size", 1, 1, 1, 1, 1, 1, 0.00000000, 100.00000000, "0", False, False, "pFlower[kGenderFemale].tdoParams[kPistils].scaleAtFullSize", 1, "The drawing scale of the stigma section 3D object when the flower is fully grown."))
    pm.addParameterForSection("Primary flowers, advanced", "Rotations", uparams.PdParameter().make(311, "kFlowerFemaleStigmaObject3DXRotationBeforeDraw", "Stigma section X rotation", 1, 1, 4, 2, 2, 2, -180.00000000, 180.00000000, "0", False, False, "pFlower[kGenderFemale].tdoParams[kPistils].xRotationBeforeDraw", 1, "Just before this 3D object is drawn, it will be rotated in the X dimension by this amount. Normally you will leave this at zero, but you might need to set it differently if you have imported 3D objects from DXF files."))
    pm.addParameterForSection("Primary flowers, advanced", "Rotations", uparams.PdParameter().make(312, "kFlowerFemaleStigmaObject3DYRotationBeforeDraw", "Stigma section Y rotation", 1, 1, 4, 2, 2, 2, -180.00000000, 180.00000000, "0", False, False, "pFlower[kGenderFemale].tdoParams[kPistils].yRotationBeforeDraw", 1, "Just before this 3D object is drawn, it will be rotated in the Y dimension by this amount. Normally you will leave this at zero, but you might need to set it differently if you have imported 3D objects from DXF files."))
    pm.addParameterForSection("Primary flowers, advanced", "Rotations", uparams.PdParameter().make(313, "kFlowerFemaleStigmaObject3DZRotationBeforeDraw", "Stigma section Z rotation", 1, 1, 4, 2, 2, 2, -180.00000000, 180.00000000, "0", False, False, "pFlower[kGenderFemale].tdoParams[kPistils].zRotationBeforeDraw", 1, "Just before this 3D object is drawn, it will be rotated in the Z dimension by this amount. Normally you will leave this at zero, but you might need to set it differently if you have imported 3D objects from DXF files."))
    pm.addParameterForSection("Primary flowers, advanced", "Colors", uparams.PdParameter().make(314, "kFlowerStigmaFemaleFaceColor", "Stigma section front face color", 3, 1, 1, 1, 1, 1, 0.00000000, 0.00000000, "100 100 0", False, False, "pFlower[kGenderFemale].tdoParams[kPistils].faceColor", 1, "The front face (facing in) color for stigmas."))
    pm.addParameterForSection("Primary flowers, advanced", "Colors", uparams.PdParameter().make(315, "kFlowerStigmaFemaleBackfaceColor", "Stigma section back face color", 3, 1, 1, 1, 1, 1, 0.00000000, 0.00000000, "150 150 0", False, False, "pFlower[kGenderFemale].tdoParams[kPistils].backfaceColor", 1, "The back face (facing out) color for stigmas."))
    pm.addParameterForSection("Primary flowers, advanced", "Arrangement", uparams.PdParameter().make(316, "kFlowerStigmaSectionsAreRadiallyArrangedFemale", "Stigma sections are radially arranged", 4, 1, 30, 1, 1, 1, 0.00000000, 0.00000000, "TRUE", False, False, "pFlower[kGenderFemale].tdoParams[kPistils].radiallyArranged", 1, "If 'yes', the 3D objects used to draw the stigma are drawn rotated at different angles to make them form a circle around the stem. If 'no', they are all drawn at the same angle (and usually there is only one oddly-shaped 3D object)."))
    pm.addParameterForSection("Primary flowers, advanced", "", uparams.PdParameter().make(317, "header", "Stamens", 7, 0, 0, 0, 0, 0, 0.00000000, 0.00000000, "", False, False, "", 0, "\"Stamens are the male organs of the flower. The anther, which holds the pollen, is connected to the flower base by a stalk called the filament, and together these make up a stamen. Perfect flowers have stamens and female flowers don't (though rarely they" + " have non-functional stamens).\""))
    pm.addParameterForSection("Primary flowers, advanced", "Numbers of things", uparams.PdParameter().make(318, "kFlowerNumStamensFemale", "Number of stamens in flower", 2, 1, 1, 1, 1, 1, 0.00000000, 30.00000000, "5", False, False, "pFlower[kGenderFemale].numStamens", 1, "The number of stamens on the flower."))
    pm.addParameterForSection("Primary flowers, advanced", "Lengths", uparams.PdParameter().make(319, "kFlowerFilamentLengthFemale", "Filament length at full size", 1, 1, 2, 2, 3, 6, 0.00000000, 100.00000000, "0", False, False, "pFlower[kGenderFemale].filamentLength_mm", 1, "How long to draw the filament at its full size. A filament is the stalk that (with the anther) makes up the stamen, the pollen-holding part of the flower."))
    pm.addParameterForSection("Primary flowers, advanced", "Widths", uparams.PdParameter().make(320, "kFlowerFilamentWidthFemale", "Filament width at full size", 1, 1, 2, 2, 3, 6, 0.10000000, 10.00000000, "0.3", False, False, "pFlower[kGenderFemale].filamentWidth_mm", 1, "The width of the filament when the flower is fully grown."))
    pm.addParameterForSection("Primary flowers, advanced", "Widths", uparams.PdParameter().make(321, "kFlowerFilamentTaperIndexFemale", "Filament taper index (taper to % of width)", 2, 1, 27, 1, 1, 1, 0.00000000, 100.00000000, "100", False, False, "pFlower[kGenderFemale].filamentTaperIndex", 1, "How much to taper the filament's width as it reaches the anther 3D object. For no tapering, choose 100% of initial width (the default). To taper the filament, choose a lower percentage."))
    pm.addParameterForSection("Primary flowers, advanced", "Colors", uparams.PdParameter().make(322, "kFlowerFilamentColorFemale", "Filament color", 3, 1, 1, 1, 1, 1, 0.00000000, 0.00000000, "100 100 0", False, False, "pFlower[kGenderFemale].filamentColor", 1, "The color of filaments (anther stalks)."))
    pm.addParameterForSection("Primary flowers, advanced", "Angles", uparams.PdParameter().make(323, "kFlowerAntherFemaleObject3DPullbackAngle", "Angle between filament and main flower axis", 1, 1, 4, 2, 2, 2, -180.00000000, 180.00000000, "10", False, False, "pFlower[kGenderFemale].tdoParams[kStamens].pullBackAngle", 1, "The angle at which the filaments are drawn back from the center of the flower. Usually you will want to specify an increasing angle for each layer of floral parts."))
    pm.addParameterForSection("Primary flowers, advanced", "3D objects", uparams.PdParameter().make(324, "kFlowerAntherNumSectionsFemale", "Number of sections in anther", 2, 1, 1, 1, 1, 1, 1.00000000, 10.00000000, "3", False, False, "pFlower[kGenderFemale].tdoParams[kStamens].repetitions", 1, "You can make an anther with one planar 3D object, in which case it looks sort of like a leaf, or you can make it with one 3D object drawn multiple times and spun around to produce an enclosed three-dimensional structure (like sections of an orange make up" + " an orange). This parameter is the number of times to draw the specified 'section' 3D object to form the anther structure."))
    pm.addParameterForSection("Primary flowers, advanced", "3D objects", uparams.PdParameter().make(325, "kFlowerFemaleAntherObject3D", "Anther section 3D object", 5, 1, 1, 1, 1, 1, 0.00000000, 0.00000000, "N[Default 3D object],P[134 245 150],P[113 208 145],P[135 209 150],P[109 171 142],P[136 171 147],P[135 136 138],P[156 208 145],P[159 171 140],T[1 2 3],T[3 2 4],T[3 4 5],T[4 6 5],T[3 7 1],T[7 3 5],T[8 7 5],T[8 5 6]", False, False, "pFlower[kGenderFemale].tdoParams[kStamens].object3D", 3, "The 3D object used to draw the anthers on the flower."))
    pm.addParameterForSection("Primary flowers, advanced", "3D objects", uparams.PdParameter().make(326, "kFlowerAntherScaleAtFullSizeFemale", "Anther section scale at full size", 1, 1, 1, 1, 1, 1, 0.00000000, 100.00000000, "0", False, False, "pFlower[kGenderFemale].tdoParams[kStamens].scaleAtFullSize", 1, "The drawing scale of the anther section 3D object when the flower is fully grown."))
    pm.addParameterForSection("Primary flowers, advanced", "Rotations", uparams.PdParameter().make(327, "kFlowerFemaleAntherObject3DXRotationBeforeDraw", "Anther section X rotation", 1, 1, 4, 2, 2, 2, -180.00000000, 180.00000000, "0", False, False, "pFlower[kGenderFemale].tdoParams[kStamens].xRotationBeforeDraw", 1, "Just before this 3D object is drawn, it will be rotated in the X dimension by this amount. Normally you will leave this at zero, but you might need to set it differently if you have imported 3D objects from DXF files."))
    pm.addParameterForSection("Primary flowers, advanced", "Rotations", uparams.PdParameter().make(328, "kFlowerFemaleAntherObject3DYRotationBeforeDraw", "Anther section Y rotation", 1, 1, 4, 2, 2, 2, -180.00000000, 180.00000000, "0", False, False, "pFlower[kGenderFemale].tdoParams[kStamens].yRotationBeforeDraw", 1, "Just before this 3D object is drawn, it will be rotated in the Y dimension by this amount. Normally you will leave this at zero, but you might need to set it differently if you have imported 3D objects from DXF files."))
    pm.addParameterForSection("Primary flowers, advanced", "Rotations", uparams.PdParameter().make(329, "kFlowerFemaleAntherObject3DZRotationBeforeDraw", "Anther section Z rotation", 1, 1, 4, 2, 2, 2, -180.00000000, 180.00000000, "0", False, False, "pFlower[kGenderFemale].tdoParams[kStamens].zRotationBeforeDraw", 1, "Just before this 3D object is drawn, it will be rotated in the Z dimension by this amount. Normally you will leave this at zero, but you might need to set it differently if you have imported 3D objects from DXF files."))
    pm.addParameterForSection("Primary flowers, advanced", "Colors", uparams.PdParameter().make(330, "kFlowerAntherFemaleFaceColor", "Anther section front face color", 3, 1, 1, 1, 1, 1, 0.00000000, 0.00000000, "100 100 0", False, False, "pFlower[kGenderFemale].tdoParams[kStamens].faceColor", 1, "The front face (facing in) color for anthers."))
    pm.addParameterForSection("Primary flowers, advanced", "Colors", uparams.PdParameter().make(331, "kFlowerAntherFemaleBackfaceColor", "Anther section back face color", 3, 1, 1, 1, 1, 1, 0.00000000, 0.00000000, "150 150 0", False, False, "pFlower[kGenderFemale].tdoParams[kStamens].backfaceColor", 1, "The back face (facing out) color for anthers."))
    pm.addParameterForSection("Primary flowers, advanced", "Arrangement", uparams.PdParameter().make(332, "kFlowerAntherSectionsAreRadiallyArrangedFemale", "Anther sections are radially arranged", 4, 1, 30, 1, 1, 1, 0.00000000, 0.00000000, "TRUE", False, False, "pFlower[kGenderFemale].tdoParams[kStamens].radiallyArranged", 1, "If 'yes', the 3D objects used to draw the anther are drawn rotated at different angles to make them form a circle around the stem. If 'no', they are all drawn at the same angle (and usually there is only one oddly-shaped 3D object)."))
    pm.addParameterForSection("Primary flowers, advanced", "", uparams.PdParameter().make(333, "header", "Second row of petals", 7, 0, 0, 0, 0, 0, 0.00000000, 0.00000000, "", False, False, "", 0, "\"You can optionally include five rows of petals in a flower (the first row is in the simple flower parameters). To make the petals look better together, it's a good idea to slightly vary them in color, size, and starting X rotations.\""))
    pm.addParameterForSection("Primary flowers, advanced", "Numbers of things", uparams.PdParameter().make(334, "kFlowerPetal2NumPetalsFemale", "Number of petals in second petal row", 2, 1, 1, 1, 1, 1, 0.00000000, 30.00000000, "5", False, False, "pFlower[kGenderFemale].tdoParams[kSecondPetals].repetitions", 1, "The number of second-row petals."))
    pm.addParameterForSection("Primary flowers, advanced", "3D objects", uparams.PdParameter().make(335, "kFlowerFemalePetal2Object3D", "Second petal row 3D object", 5, 1, 1, 1, 1, 1, 0.00000000, 0.00000000, "N[Default 3D object],P[134 245 150],P[113 208 145],P[135 209 150],P[109 171 142],P[136 171 147],P[135 136 138],P[156 208 145],P[159 171 140],T[1 2 3],T[3 2 4],T[3 4 5],T[4 6 5],T[3 7 1],T[7 3 5],T[8 7 5],T[8 5 6]", False, False, "pFlower[kGenderFemale].tdoParams[kSecondPetals].object3D", 3, "The 3D object used to draw second-row petals."))
    pm.addParameterForSection("Primary flowers, advanced", "3D objects", uparams.PdParameter().make(336, "kFlowerPetal2ScaleAtFullSizeFemale", "Second petal row scale at full size", 1, 1, 1, 1, 1, 1, 0.00000000, 100.00000000, "0", False, False, "pFlower[kGenderFemale].tdoParams[kSecondPetals].scaleAtFullSize", 1, "The drawing scale of the second-row petal 3D object when the flower is fully grown."))
    pm.addParameterForSection("Primary flowers, advanced", "Rotations", uparams.PdParameter().make(337, "kFlowerFemalePetal2Object3DXRotationBeforeDraw", "Second petal row X rotation", 1, 1, 4, 2, 2, 2, -180.00000000, 180.00000000, "0", False, False, "pFlower[kGenderFemale].tdoParams[kSecondPetals].xRotationBeforeDraw", 1, "Just before this 3D object is drawn, it will be rotated in the X dimension by this amount. Normally you will leave this at zero, but you might need to set it differently if you have imported 3D objects from DXF files."))
    pm.addParameterForSection("Primary flowers, advanced", "Rotations", uparams.PdParameter().make(338, "kFlowerFemalePetal2Object3DYRotationBeforeDraw", "Second petal row Y rotation", 1, 1, 4, 2, 2, 2, -180.00000000, 180.00000000, "0", False, False, "pFlower[kGenderFemale].tdoParams[kSecondPetals].yRotationBeforeDraw", 1, "Just before this 3D object is drawn, it will be rotated in the Y dimension by this amount. Normally you will leave this at zero, but you might need to set it differently if you have imported 3D objects from DXF files."))
    pm.addParameterForSection("Primary flowers, advanced", "Rotations", uparams.PdParameter().make(339, "kFlowerFemalePetal2Object3DZRotationBeforeDraw", "Second petal row Z rotation", 1, 1, 4, 2, 2, 2, -180.00000000, 180.00000000, "0", False, False, "pFlower[kGenderFemale].tdoParams[kSecondPetals].zRotationBeforeDraw", 1, "Just before this 3D object is drawn, it will be rotated in the Z dimension by this amount. Normally you will leave this at zero, but you might need to set it differently if you have imported 3D objects from DXF files."))
    pm.addParameterForSection("Primary flowers, advanced", "Colors", uparams.PdParameter().make(340, "kFlowerPetal2FemaleFaceColor", "Second petal row front face color", 3, 1, 1, 1, 1, 1, 0.00000000, 0.00000000, "100 100 0", False, False, "pFlower[kGenderFemale].tdoParams[kSecondPetals].faceColor", 1, "The front face (facing in) color for second-row petals."))
    pm.addParameterForSection("Primary flowers, advanced", "Colors", uparams.PdParameter().make(341, "kFlowerPetal2FemaleBackfaceColor", "Second petal row back face color", 3, 1, 1, 1, 1, 1, 0.00000000, 0.00000000, "150 150 0", False, False, "pFlower[kGenderFemale].tdoParams[kSecondPetals].backfaceColor", 1, "The back face (facing out) color for second-row petals."))
    pm.addParameterForSection("Primary flowers, advanced", "Arrangement", uparams.PdParameter().make(342, "kFlowerPetal2PetalsAreRadiallyArrangedFemale", "Second row petals are radially arranged", 4, 1, 30, 1, 1, 1, 0.00000000, 0.00000000, "TRUE", False, False, "pFlower[kGenderFemale].tdoParams[kSecondPetals].radiallyArranged", 1, "If 'yes', the 3D objects used to draw second-row petals are drawn rotated at different angles to make them form a circle around the stem. If 'no', they are all drawn at the same angle (and usually there is only one oddly-shaped 3D object)."))
    pm.addParameterForSection("Primary flowers, advanced", "Angles", uparams.PdParameter().make(343, "kFlowerPetal2FemaleObject3DPullbackAngle", "Angle between second-row petals and main stem", 1, 1, 4, 2, 2, 2, -180.00000000, 180.00000000, "30", False, False, "pFlower[kGenderFemale].tdoParams[kSecondPetals].pullBackAngle", 1, "The angle at which the second-row petals are drawn back from the center of the flower. Usually you will want to specify an increasing angle for each layer of floral parts. How this appears on the plant depends on how the 3D object you are using for these " + "petals was defined."))
    pm.addParameterForSection("Primary flowers, advanced", "", uparams.PdParameter().make(344, "header", "Third row of petals", 7, 0, 0, 0, 0, 0, 0.00000000, 0.00000000, "", False, False, "", 0, "You can optionally include five rows of petals in a flower (the first row is in the simple flower parameters). The angles between each row of petals and the main stem control how the petals appear next to each other."))
    pm.addParameterForSection("Primary flowers, advanced", "Numbers of things", uparams.PdParameter().make(345, "kFlowerPetal3NumPetalsFemale", "Number of petals in third petal row", 2, 1, 1, 1, 1, 1, 0.00000000, 30.00000000, "5", False, False, "pFlower[kGenderFemale].tdoParams[kThirdPetals].repetitions", 1, "The number of third-row petals."))
    pm.addParameterForSection("Primary flowers, advanced", "3D objects", uparams.PdParameter().make(346, "kFlowerFemalePetal3Object3D", "Third petal row 3D object", 5, 1, 1, 1, 1, 1, 0.00000000, 0.00000000, "N[Default 3D object],P[134 245 150],P[113 208 145],P[135 209 150],P[109 171 142],P[136 171 147],P[135 136 138],P[156 208 145],P[159 171 140],T[1 2 3],T[3 2 4],T[3 4 5],T[4 6 5],T[3 7 1],T[7 3 5],T[8 7 5],T[8 5 6]", False, False, "pFlower[kGenderFemale].tdoParams[kThirdPetals].object3D", 3, "The 3D object used to draw third-row petals."))
    pm.addParameterForSection("Primary flowers, advanced", "3D objects", uparams.PdParameter().make(347, "kFlowerPetal3ScaleAtFullSizeFemale", "Third petal row scale at full size", 1, 1, 1, 1, 1, 1, 0.00000000, 100.00000000, "0", False, False, "pFlower[kGenderFemale].tdoParams[kThirdPetals].scaleAtFullSize", 1, "The drawing scale of the third-row petal 3D object when the flower is fully grown."))
    pm.addParameterForSection("Primary flowers, advanced", "Rotations", uparams.PdParameter().make(348, "kFlowerFemalePetal3Object3DXRotationBeforeDraw", "Third petal row X rotation", 1, 1, 4, 2, 2, 2, -180.00000000, 180.00000000, "0", False, False, "pFlower[kGenderFemale].tdoParams[kThirdPetals].xRotationBeforeDraw", 1, "Just before this 3D object is drawn, it will be rotated in the X dimension by this amount. Normally you will leave this at zero, but you might need to set it differently if you have imported 3D objects from DXF files."))
    pm.addParameterForSection("Primary flowers, advanced", "Rotations", uparams.PdParameter().make(349, "kFlowerFemalePetal3Object3DYRotationBeforeDraw", "Third petal row Y rotation", 1, 1, 4, 2, 2, 2, -180.00000000, 180.00000000, "0", False, False, "pFlower[kGenderFemale].tdoParams[kThirdPetals].yRotationBeforeDraw", 1, "Just before this 3D object is drawn, it will be rotated in the Y dimension by this amount. Normally you will leave this at zero, but you might need to set it differently if you have imported 3D objects from DXF files."))
    pm.addParameterForSection("Primary flowers, advanced", "Rotations", uparams.PdParameter().make(350, "kFlowerFemalePetal3Object3DZRotationBeforeDraw", "Third petal row Z rotation", 1, 1, 4, 2, 2, 2, -180.00000000, 180.00000000, "0", False, False, "pFlower[kGenderFemale].tdoParams[kThirdPetals].zRotationBeforeDraw", 1, "Just before this 3D object is drawn, it will be rotated in the Z dimension by this amount. Normally you will leave this at zero, but you might need to set it differently if you have imported 3D objects from DXF files."))
    pm.addParameterForSection("Primary flowers, advanced", "Colors", uparams.PdParameter().make(351, "kFlowerPetal3FemaleFaceColor", "Third petal row front face color", 3, 1, 1, 1, 1, 1, 0.00000000, 0.00000000, "100 100 0", False, False, "pFlower[kGenderFemale].tdoParams[kThirdPetals].faceColor", 1, "The front face (facing in) color for third-row petals."))
    pm.addParameterForSection("Primary flowers, advanced", "Colors", uparams.PdParameter().make(352, "kFlowerPetal3FemaleBackfaceColor", "Third petal row back face color", 3, 1, 1, 1, 1, 1, 0.00000000, 0.00000000, "150 150 0", False, False, "pFlower[kGenderFemale].tdoParams[kThirdPetals].backfaceColor", 1, "The back face (facing out) color for third-row petals."))
    pm.addParameterForSection("Primary flowers, advanced", "Arrangement", uparams.PdParameter().make(353, "kFlowerPetal3PetalsAreRadiallyArrangedFemale", "Third row petals are radially arranged", 4, 1, 30, 1, 1, 1, 0.00000000, 0.00000000, "TRUE", False, False, "pFlower[kGenderFemale].tdoParams[kThirdPetals].radiallyArranged", 1, "If 'yes', the 3D objects used to draw third-row petals are drawn rotated at different angles to make them form a circle around the stem. If 'no', they are all drawn at the same angle (and usually there is only one oddly-shaped 3D object)."))
    pm.addParameterForSection("Primary flowers, advanced", "Angles", uparams.PdParameter().make(354, "kFlowerPetal3FemaleObject3DPullbackAngle", "Angle between third-row petals and main stem", 1, 1, 4, 2, 2, 2, -180.00000000, 180.00000000, "35", False, False, "pFlower[kGenderFemale].tdoParams[kThirdPetals].pullBackAngle", 1, "The angle at which the third-row petals are drawn back from the center of the flower. Usually you will want to specify an increasing angle for each layer of floral parts. How this appears on the plant depends on how the 3D object you are using for these p" + "etals was defined."))
    pm.addParameterForSection("Primary flowers, advanced", "", uparams.PdParameter().make(355, "header", "Fourth row of petals", 7, 0, 0, 0, 0, 0, 0.00000000, 0.00000000, "", False, False, "", 0, "You can optionally include five rows of petals in a flower (the first row is in the simple flower parameters). You can create flowers with non-radial symmetry (like orchids) by placing only one petal in each row and using the X rotations of each row to pl" + "ace the petals around the central axis."))
    pm.addParameterForSection("Primary flowers, advanced", "Numbers of things", uparams.PdParameter().make(356, "kFlowerPetal4NumPetalsFemale", "Number of petals in fourth petal row", 2, 1, 1, 1, 1, 1, 0.00000000, 30.00000000, "5", False, False, "pFlower[kGenderFemale].tdoParams[kFourthPetals].repetitions", 1, "The number of fourth-row petals."))
    pm.addParameterForSection("Primary flowers, advanced", "3D objects", uparams.PdParameter().make(357, "kFlowerFemalePetal4Object3D", "Fourth petal row 3D object", 5, 1, 1, 1, 1, 1, 0.00000000, 0.00000000, "N[Default 3D object],P[134 245 150],P[113 208 145],P[135 209 150],P[109 171 142],P[136 171 147],P[135 136 138],P[156 208 145],P[159 171 140],T[1 2 3],T[3 2 4],T[3 4 5],T[4 6 5],T[3 7 1],T[7 3 5],T[8 7 5],T[8 5 6]", False, False, "pFlower[kGenderFemale].tdoParams[kFourthPetals].object3D", 3, "The 3D object used to draw fourth-row petals."))
    pm.addParameterForSection("Primary flowers, advanced", "3D objects", uparams.PdParameter().make(358, "kFlowerPetal4ScaleAtFullSizeFemale", "Fourth petal row scale at full size", 1, 1, 1, 1, 1, 1, 0.00000000, 100.00000000, "0", False, False, "pFlower[kGenderFemale].tdoParams[kFourthPetals].scaleAtFullSize", 1, "The drawing scale of the fourth-row petal 3D object when the flower is fully grown."))
    pm.addParameterForSection("Primary flowers, advanced", "Rotations", uparams.PdParameter().make(359, "kFlowerFemalePetal4Object3DXRotationBeforeDraw", "Fourth petal row X rotation", 1, 1, 4, 2, 2, 2, -180.00000000, 180.00000000, "0", False, False, "pFlower[kGenderFemale].tdoParams[kFourthPetals].xRotationBeforeDraw", 1, "Just before this 3D object is drawn, it will be rotated in the X dimension by this amount. Normally you will leave this at zero, but you might need to set it differently if you have imported 3D objects from DXF files."))
    pm.addParameterForSection("Primary flowers, advanced", "Rotations", uparams.PdParameter().make(360, "kFlowerFemalePetal4Object3DYRotationBeforeDraw", "Fourth petal row Y rotation", 1, 1, 4, 2, 2, 2, -180.00000000, 180.00000000, "0", False, False, "pFlower[kGenderFemale].tdoParams[kFourthPetals].yRotationBeforeDraw", 1, "Just before this 3D object is drawn, it will be rotated in the Y dimension by this amount. Normally you will leave this at zero, but you might need to set it differently if you have imported 3D objects from DXF files."))
    pm.addParameterForSection("Primary flowers, advanced", "Rotations", uparams.PdParameter().make(361, "kFlowerFemalePetal4Object3DZRotationBeforeDraw", "Fourth petal row Z rotation", 1, 1, 4, 2, 2, 2, -180.00000000, 180.00000000, "0", False, False, "pFlower[kGenderFemale].tdoParams[kFourthPetals].zRotationBeforeDraw", 1, "Just before this 3D object is drawn, it will be rotated in the Z dimension by this amount. Normally you will leave this at zero, but you might need to set it differently if you have imported 3D objects from DXF files."))
    pm.addParameterForSection("Primary flowers, advanced", "Colors", uparams.PdParameter().make(362, "kFlowerPetal4FemaleFaceColor", "Fourth petal row front face color", 3, 1, 1, 1, 1, 1, 0.00000000, 0.00000000, "100 100 0", False, False, "pFlower[kGenderFemale].tdoParams[kFourthPetals].faceColor", 1, "The front face (facing in) color for fourth-row petals."))
    pm.addParameterForSection("Primary flowers, advanced", "Colors", uparams.PdParameter().make(363, "kFlowerPetal4FemaleBackfaceColor", "Fourth petal row back face color", 3, 1, 1, 1, 1, 1, 0.00000000, 0.00000000, "150 150 0", False, False, "pFlower[kGenderFemale].tdoParams[kFourthPetals].backfaceColor", 1, "The back face (facing out) color for fourth-row petals."))
    pm.addParameterForSection("Primary flowers, advanced", "Arrangement", uparams.PdParameter().make(364, "kFlowerPetal4PetalsAreRadiallyArrangedFemale", "Fourth row petals are radially arranged", 4, 1, 30, 1, 1, 1, 0.00000000, 0.00000000, "TRUE", False, False, "pFlower[kGenderFemale].tdoParams[kFourthPetals].radiallyArranged", 1, "If 'yes', the 3D objects used to draw fourth-row petals are drawn rotated at different angles to make them form a circle around the stem. If 'no', they are all drawn at the same angle (and usually there is only one oddly-shaped 3D object)."))
    pm.addParameterForSection("Primary flowers, advanced", "Angles", uparams.PdParameter().make(365, "kFlowerPetal4FemaleObject3DPullbackAngle", "Angle between fourth-row petals and main stem", 1, 1, 4, 2, 2, 2, -180.00000000, 180.00000000, "40", False, False, "pFlower[kGenderFemale].tdoParams[kFourthPetals].pullBackAngle", 1, "The angle at which the fourth-row petals are drawn back from the center of the flower. Usually you will want to specify an increasing angle for each layer of floral parts. How this appears on the plant depends on how the 3D object you are using for these " + "petals was defined."))
    pm.addParameterForSection("Primary flowers, advanced", "", uparams.PdParameter().make(366, "header", "Fifth row of petals", 7, 0, 0, 0, 0, 0, 0.00000000, 0.00000000, "", False, False, "", 0, "You can optionally include five rows of petals in a flower (the first row is in the simple flower parameters)."))
    pm.addParameterForSection("Primary flowers, advanced", "Numbers of things", uparams.PdParameter().make(367, "kFlowerPetal5NumPetalsFemale", "Number of petals in fifth petal row", 2, 1, 1, 1, 1, 1, 0.00000000, 30.00000000, "5", False, False, "pFlower[kGenderFemale].tdoParams[kFifthPetals].repetitions", 1, "The number of fifth-row petals."))
    pm.addParameterForSection("Primary flowers, advanced", "3D objects", uparams.PdParameter().make(368, "kFlowerFemalePetal5Object3D", "Fifth petal row 3D object", 5, 1, 1, 1, 1, 1, 0.00000000, 0.00000000, "N[Default 3D object],P[134 245 150],P[113 208 145],P[135 209 150],P[109 171 142],P[136 171 147],P[135 136 138],P[156 208 145],P[159 171 140],T[1 2 3],T[3 2 4],T[3 4 5],T[4 6 5],T[3 7 1],T[7 3 5],T[8 7 5],T[8 5 6]", False, False, "pFlower[kGenderFemale].tdoParams[kFifthPetals].object3D", 3, "The 3D object used to draw fifth-row petals."))
    pm.addParameterForSection("Primary flowers, advanced", "3D objects", uparams.PdParameter().make(369, "kFlowerPetal5ScaleAtFullSizeFemale", "Fifth petal row scale at full size", 1, 1, 1, 1, 1, 1, 0.00000000, 100.00000000, "0", False, False, "pFlower[kGenderFemale].tdoParams[kFifthPetals].scaleAtFullSize", 1, "The drawing scale of the fifth-row petal 3D object when the flower is fully grown."))
    pm.addParameterForSection("Primary flowers, advanced", "Rotations", uparams.PdParameter().make(370, "kFlowerFemalePetal5Object3DXRotationBeforeDraw", "Fifth petal row X rotation", 1, 1, 4, 2, 2, 2, -180.00000000, 180.00000000, "0", False, False, "pFlower[kGenderFemale].tdoParams[kFifthPetals].xRotationBeforeDraw", 1, "Just before this 3D object is drawn, it will be rotated in the X dimension by this amount. Normally you will leave this at zero, but you might need to set it differently if you have imported 3D objects from DXF files."))
    pm.addParameterForSection("Primary flowers, advanced", "Rotations", uparams.PdParameter().make(371, "kFlowerFemalePetal5Object3DYRotationBeforeDraw", "Fifth petal row Y rotation", 1, 1, 4, 2, 2, 2, -180.00000000, 180.00000000, "0", False, False, "pFlower[kGenderFemale].tdoParams[kFifthPetals].yRotationBeforeDraw", 1, "Just before this 3D object is drawn, it will be rotated in the Y dimension by this amount. Normally you will leave this at zero, but you might need to set it differently if you have imported 3D objects from DXF files."))
    pm.addParameterForSection("Primary flowers, advanced", "Rotations", uparams.PdParameter().make(372, "kFlowerFemalePetal5Object3DZRotationBeforeDraw", "Fifth petal row Z rotation", 1, 1, 4, 2, 2, 2, -180.00000000, 180.00000000, "0", False, False, "pFlower[kGenderFemale].tdoParams[kFifthPetals].zRotationBeforeDraw", 1, "Just before this 3D object is drawn, it will be rotated in the Z dimension by this amount. Normally you will leave this at zero, but you might need to set it differently if you have imported 3D objects from DXF files."))
    pm.addParameterForSection("Primary flowers, advanced", "Colors", uparams.PdParameter().make(373, "kFlowerPetal5FemaleFaceColor", "Fifth petal row front face color", 3, 1, 1, 1, 1, 1, 0.00000000, 0.00000000, "100 100 0", False, False, "pFlower[kGenderFemale].tdoParams[kFifthPetals].faceColor", 1, "The front face (facing in) color for fifth-row petals."))
    pm.addParameterForSection("Primary flowers, advanced", "Colors", uparams.PdParameter().make(374, "kFlowerPetal5FemaleBackfaceColor", "Fifth petal row back face color", 3, 1, 1, 1, 1, 1, 0.00000000, 0.00000000, "150 150 0", False, False, "pFlower[kGenderFemale].tdoParams[kFifthPetals].backfaceColor", 1, "The back face (facing out) color for fifth-row petals."))
    pm.addParameterForSection("Primary flowers, advanced", "Arrangement", uparams.PdParameter().make(375, "kFlowerPetal5PetalsAreRadiallyArrangedFemale", "Fifth row petals are radially arranged", 4, 1, 30, 1, 1, 1, 0.00000000, 0.00000000, "TRUE", False, False, "pFlower[kGenderFemale].tdoParams[kFifthPetals].radiallyArranged", 1, "If 'yes', the 3D objects used to draw fifth-row petals are drawn rotated at different angles to make them form a circle around the stem. If 'no', they are all drawn at the same angle (and usually there is only one oddly-shaped 3D object)."))
    pm.addParameterForSection("Primary flowers, advanced", "Angles", uparams.PdParameter().make(376, "kFlowerPetal5FemaleObject3DPullbackAngle", "Angle between fifth-row petals and main stem", 1, 1, 4, 2, 2, 2, -180.00000000, 180.00000000, "45", False, False, "pFlower[kGenderFemale].tdoParams[kFifthPetals].pullBackAngle", 1, "The angle at which the fifth-row petals are drawn back from the center of the flower. Usually you will want to specify an increasing angle for each layer of floral parts. How this appears on the plant depends on how the 3D object you are using for these p" + "etals was defined."))
    pm.addParameterForSection("Primary flowers, advanced", "", uparams.PdParameter().make(377, "header", "Sepals", 7, 0, 0, 0, 0, 0, 0.00000000, 0.00000000, "", False, False, "", 0, "\"Sepals are the outermost layer of the flower's covering parts, and are often green.\""))
    pm.addParameterForSection("Primary flowers, advanced", "Numbers of things", uparams.PdParameter().make(378, "kFlowerSepalNumPetalsFemale", "Number of sepals on flower", 2, 1, 1, 1, 1, 1, 0.00000000, 30.00000000, "5", False, False, "pFlower[kGenderFemale].tdoParams[kSepals].repetitions", 1, "The number of sepals on the flower."))
    pm.addParameterForSection("Primary flowers, advanced", "3D objects", uparams.PdParameter().make(379, "kFlowerFemaleSepalObject3D", "Sepal 3D object", 5, 1, 1, 1, 1, 1, 0.00000000, 0.00000000, "N[Default 3D object],P[134 245 150],P[113 208 145],P[135 209 150],P[109 171 142],P[136 171 147],P[135 136 138],P[156 208 145],P[159 171 140],T[1 2 3],T[3 2 4],T[3 4 5],T[4 6 5],T[3 7 1],T[7 3 5],T[8 7 5],T[8 5 6]", False, False, "pFlower[kGenderFemale].tdoParams[kSepals].object3D", 3, "The 3D object used to draw sepals."))
    pm.addParameterForSection("Primary flowers, advanced", "3D objects", uparams.PdParameter().make(380, "kFlowerSepalScaleAtFullSizeFemale", "Sepal scale at full size", 1, 1, 1, 1, 1, 1, 0.00000000, 100.00000000, "0", False, False, "pFlower[kGenderFemale].tdoParams[kSepals].scaleAtFullSize", 1, "The drawing scale of the sepal 3D object when the flower is fully grown."))
    pm.addParameterForSection("Primary flowers, advanced", "Rotations", uparams.PdParameter().make(381, "kFlowerFemaleSepalObject3DXRotationBeforeDraw", "Sepal X rotation", 1, 1, 4, 2, 2, 2, -180.00000000, 180.00000000, "0", False, False, "pFlower[kGenderFemale].tdoParams[kSepals].xRotationBeforeDraw", 1, "Just before this 3D object is drawn, it will be rotated in the X dimension by this amount. Normally you will leave this at zero, but you might need to set it differently if you have imported 3D objects from DXF files."))
    pm.addParameterForSection("Primary flowers, advanced", "Rotations", uparams.PdParameter().make(382, "kFlowerFemaleSepalObject3DYRotationBeforeDraw", "Sepal Y rotation", 1, 1, 4, 2, 2, 2, -180.00000000, 180.00000000, "0", False, False, "pFlower[kGenderFemale].tdoParams[kSepals].yRotationBeforeDraw", 1, "Just before this 3D object is drawn, it will be rotated in the Y dimension by this amount. Normally you will leave this at zero, but you might need to set it differently if you have imported 3D objects from DXF files."))
    pm.addParameterForSection("Primary flowers, advanced", "Rotations", uparams.PdParameter().make(383, "kFlowerFemaleSepalObject3DZRotationBeforeDraw", "Sepal Z rotation", 1, 1, 4, 2, 2, 2, -180.00000000, 180.00000000, "0", False, False, "pFlower[kGenderFemale].tdoParams[kSepals].zRotationBeforeDraw", 1, "Just before this 3D object is drawn, it will be rotated in the Z dimension by this amount. Normally you will leave this at zero, but you might need to set it differently if you have imported 3D objects from DXF files."))
    pm.addParameterForSection("Primary flowers, advanced", "Colors", uparams.PdParameter().make(384, "kFlowerSepalFemaleFaceColor", "Sepal front face color", 3, 1, 1, 1, 1, 1, 0.00000000, 0.00000000, "100 100 0", False, False, "pFlower[kGenderFemale].tdoParams[kSepals].faceColor", 1, "The front face (facing in) color for sepals."))
    pm.addParameterForSection("Primary flowers, advanced", "Colors", uparams.PdParameter().make(385, "kFlowerSepalFemaleBackfaceColor", "Sepal back face color", 3, 1, 1, 1, 1, 1, 0.00000000, 0.00000000, "150 150 0", False, False, "pFlower[kGenderFemale].tdoParams[kSepals].backfaceColor", 1, "The back face (facing out) color for sepals."))
    pm.addParameterForSection("Primary flowers, advanced", "Arrangement", uparams.PdParameter().make(386, "kFlowerSepalPetalsAreRadiallyArrangedFemale", "Sepals are radially arranged", 4, 1, 30, 1, 1, 1, 0.00000000, 0.00000000, "TRUE", False, False, "pFlower[kGenderFemale].tdoParams[kSepals].radiallyArranged", 1, "If 'yes', the 3D objects used to draw sepals are drawn rotated at different angles to make them form a circle around the stem. If 'no', they are all drawn at the same angle (and usually there is only one oddly-shaped 3D object)."))
    pm.addParameterForSection("Primary flowers, advanced", "Angles", uparams.PdParameter().make(387, "kFlowerSepalFemaleObject3DPullbackAngle", "Angle between sepals and main stem", 1, 1, 4, 2, 2, 2, -180.00000000, 180.00000000, "60", False, False, "pFlower[kGenderFemale].tdoParams[kSepals].pullBackAngle", 1, "The angle at which the sepals are drawn back from the center of the flower. Usually you will want to specify an increasing angle for each layer of floral parts. How this appears on the plant depends on how the 3D object you are using for sepals was define" + "d."))
    pm.addParameterForSection("Primary flowers, advanced", "", uparams.PdParameter().make(388, "header", "Flower bud", 7, 0, 0, 0, 0, 0, 0.00000000, 0.00000000, "", False, False, "", 0, "\"You can draw the flower bud either as a separate 3D object, or simply by opening up the angles that draw the floral parts.\""))
    pm.addParameterForSection("Primary flowers, advanced", "Arrangement", uparams.PdParameter().make(389, "kFlowerFemaleBudOption", "How to draw bud", 6, 1, 1, 1, 1, 1, 0.00000000, 0.00000000, "1 BudTdo", True, False, "pFlower[kGenderFemale].budDrawingOption", 1, "If 'no bud', don't draw a bud on the flower at all. If 'single 3D object bud', draw a single 3D object (usually spun around in a circle) during the bud stage (this is the pre-PS2 style). If 'unfolding flower', don't draw a separate bud, but 'open" + " up' the flower by drawing all of its parts small and folded in together."))
    pm.addParameterForSection("Primary flowers, advanced", "Numbers of things", uparams.PdParameter().make(390, "kFlowerBudNumPetalsFemale", "Number of petals on flower bud", 2, 1, 1, 1, 1, 1, 0.00000000, 30.00000000, "5", False, False, "pFlower[kGenderFemale].tdoParams[kBud].repetitions", 1, "The number of flower bud petals."))
    pm.addParameterForSection("Primary flowers, advanced", "3D objects", uparams.PdParameter().make(391, "kFlowerFemaleBudObject3D", "Bud petal 3D object", 5, 1, 1, 1, 1, 1, 0.00000000, 0.00000000, "N[Default 3D object],P[134 245 150],P[113 208 145],P[135 209 150],P[109 171 142],P[136 171 147],P[135 136 138],P[156 208 145],P[159 171 140],T[1 2 3],T[3 2 4],T[3 4 5],T[4 6 5],T[3 7 1],T[7 3 5],T[8 7 5],T[8 5 6]", False, False, "pFlower[kGenderFemale].tdoParams[kBud].object3D", 3, "The 3D object used to draw flower bud petals."))
    pm.addParameterForSection("Primary flowers, advanced", "3D objects", uparams.PdParameter().make(392, "kFlowerBudScaleAtFullSizeFemale", "Bud petal scale at full size", 1, 1, 1, 1, 1, 1, 0.00000000, 100.00000000, "10", False, False, "pFlower[kGenderFemale].tdoParams[kBud].scaleAtFullSize", 1, "The drawing scale of the flower bud petal 3D object when the flower bud is fully grown (before the flower appears)."))
    pm.addParameterForSection("Primary flowers, advanced", "Rotations", uparams.PdParameter().make(393, "kFlowerFemaleBudObject3DXRotationBeforeDraw", "Bud petal X rotation", 1, 1, 4, 2, 2, 2, -180.00000000, 180.00000000, "0", False, False, "pFlower[kGenderFemale].tdoParams[kBud].xRotationBeforeDraw", 1, "Just before this 3D object is drawn, it will be rotated in the X dimension by this amount. Normally you will leave this at zero, but you might need to set it differently if you have imported 3D objects from DXF files."))
    pm.addParameterForSection("Primary flowers, advanced", "Rotations", uparams.PdParameter().make(394, "kFlowerFemaleBudObject3DYRotationBeforeDraw", "Bud petal Y rotation", 1, 1, 4, 2, 2, 2, -180.00000000, 180.00000000, "0", False, False, "pFlower[kGenderFemale].tdoParams[kBud].yRotationBeforeDraw", 1, "Just before this 3D object is drawn, it will be rotated in the Y dimension by this amount. Normally you will leave this at zero, but you might need to set it differently if you have imported 3D objects from DXF files."))
    pm.addParameterForSection("Primary flowers, advanced", "Rotations", uparams.PdParameter().make(395, "kFlowerFemaleBudObject3DZRotationBeforeDraw", "Bud petal Z rotation", 1, 1, 4, 2, 2, 2, -180.00000000, 180.00000000, "0", False, False, "pFlower[kGenderFemale].tdoParams[kBud].zRotationBeforeDraw", 1, "Just before this 3D object is drawn, it will be rotated in the Z dimension by this amount. Normally you will leave this at zero, but you might need to set it differently if you have imported 3D objects from DXF files."))
    pm.addParameterForSection("Primary flowers, advanced", "Colors", uparams.PdParameter().make(396, "kFlowerBudFemaleFaceColor", "Bud petal front face color", 3, 1, 1, 1, 1, 1, 0.00000000, 0.00000000, "100 100 0", False, False, "pFlower[kGenderFemale].tdoParams[kBud].faceColor", 1, "The front face (facing in) color for flower bud petals."))
    pm.addParameterForSection("Primary flowers, advanced", "Colors", uparams.PdParameter().make(397, "kFlowerBudFemaleBackfaceColor", "Bud petal back face color", 3, 1, 1, 1, 1, 1, 0.00000000, 0.00000000, "150 150 0", False, False, "pFlower[kGenderFemale].tdoParams[kBud].backfaceColor", 1, "The back face (facing out) color for flower bud petals."))
    pm.addParameterForSection("Primary flowers, advanced", "Arrangement", uparams.PdParameter().make(398, "kFlowerBudPetalsAreRadiallyArrangedFemale", "Bud petals are radially arranged", 4, 1, 30, 1, 1, 1, 0.00000000, 0.00000000, "TRUE", False, False, "pFlower[kGenderFemale].tdoParams[kBud].radiallyArranged", 1, "If 'yes', the 3D objects used to draw the flower bud are drawn rotated at different angles to make them form a circle around the stem. If 'no', they are all drawn at the same angle (and usually there is only one oddly-shaped 3D object)."))
    pm.addParameterForSection("Primary flowers, advanced", "Angles", uparams.PdParameter().make(399, "kFlowerBudFemaleObject3DPullbackAngle", "Angle between bud petals and main stem", 1, 1, 4, 2, 2, 2, -180.00000000, 180.00000000, "0", False, False, "pFlower[kGenderFemale].tdoParams[kBud].pullBackAngle", 1, "The angle at which the flower bud petals are drawn back from the center of the flower. Usually you will want this angle to be small, to create a closed bud."))


### Try to gather useful infor from teh above 399 Plant generation parameters.
if __name__ == "__main__":
    " format this out for useful parsing "

    labels = ['FieldNumber', 'FieldID', 'Name', 'FieldType', 'nIndexType', 'UnitSet', 'UnitModel', 'UnitMetric', 'UnitEnglish', 'LowerBound', 'nUpperBound',
                'DefaultValueString', 'Regrow', 'ReadOnly', 'nAccessString', 'TransferType', 'Hint']
    fieldtypes = [(0, 'kFieldUndefined'), (1, 'kFieldFloat'), (2, 'kFieldSmallint'), (3, 'kFieldColor'), (4, 'kFieldBoolean'),
                  (5, 'kFieldThreeDObject'), (6, 'kFieldEnumeratedList'), (7, 'kFieldHeader'), (8, 'kFieldLongint')]
    indextypes = [(0, 'kIndexTypeUndefined'), (1, 'kIndexTypeNone'), (2, 'Unused'), (3, 'kIndexTypeSCurve')]

    class bar:
        def __init__(self):
            pass
        def PdParameter(self):
            return self
        def make(*args):
            return (args)


    class foo:
       def __init__(self):
           self.parameters = []
           self.sections = {}

       def clearParameters(self):
            pass
       def addParameterForSection(self, sectionName, orthogonalSectionName, newParameter):
           if newParameter != None:
               self.parameters.append(newParameter)
               if sectionName not in self.sections.keys():
                self.sections[sectionName] = [0,[orthogonalSectionName]] # header in first
               else:
                if sectionName[0] == "(":
                    self.sections[sectionName][0] += 1
                elif orthogonalSectionName != "": # ignore headers:
                    self.sections[sectionName][0] += 1
                if orthogonalSectionName not in self.sections[sectionName][1]:
                    self.sections[sectionName][1].append(orthogonalSectionName)


       def output(self):
        print "Found %d parameters" % len(self.parameters)
        print "Plant parameters are organised into %d Primary sections" % len(self.sections)
        for s in self.sections.keys():
            self.sections[s][1].sort() # print in alpha order
            print "   %s - %d parameters in subgroups:" % (s, self.sections[s][0]),
            for n in self.sections[s][1][1:]:
                print "%s," % n,
            print

        #
        count_ftypes = [0]*len(fieldtypes)
        count_indextypes = [0]*len(indextypes)
        values_fields = [[]]*len(labels)
        scurves = []
        #! set field to examine (-1 to disable)
        field = 4
        for p in self.parameters:
            count_ftypes[p[4]] += 1
            count_indextypes[p[5]] += 1
            if p[4] == field: # FieldType to examine
                print
                for i, el in enumerate(p[1:]):
                    print labels[i], el
                    # gather values used by that fieldtype
                    if values_fields[i]:
                        if el not in values_fields[i]:
                            values_fields[i].append(el)
                    else: values_fields[i] = [el]
            if p[5] == 3: # check for scurves types
                scurves.append(p[2])
        #
        print "\nFieldType Summary"
        for i,c in enumerate(count_ftypes):
            print "   %s - %d" % (fieldtypes[i][1], c)
        print "IndexType Summary (all Undefined are headers)"
        for i,c in enumerate(count_indextypes):
            print "  %s - %d" % (indextypes[i][1], c)
        if field > 0: # -1 disables this feature
            print "Summary of individual values for field_type %d (%s)" % (field, fieldtypes[field][1])
            for i in range(len(values_fields)):
                print "  ",labels[i], "(%d)" % len(values_fields[i])
                if i not in [0,1,2,3,14,16]: # ignore the unique very time ones
                    print "    ", values_fields[i]
        else:
            print "Summary of individual values for field_types -disabled"
        print "Parameters with S-curves are:", scurves
        #
        print "Summary of gathered factoids"
        print "- Only 7 fieldtypes (incl header). Undefined and LongInt fieldTypes not used."
        print "- IndexType is only used to differentiate Scurves from numbers (for floats)"
        print "- Headers - only use hint"
        print "- Colors - only use defaultstring. default is a triplet"
        print "- 3D objects only use the defaultstring. (holds points, triangles)"
        print "- Enumerated Lists use defaultstring, regrow. (holds list)"
        print "- floats use transfer types 1,2 (2 is scurve)"
        print "- 3Dobjects use transfer type 3"
        print "- readonly used in floats, ints, bool field types"
        print "- regrow used in floats, ints, bool, enumerated field types"

        print "Suggest use a class for each field type with methods for each"


    ###
    uparams = bar()
    pm = foo()
    CreateParameters(pm)
    pm.output()
