unit umakeht;

{ DO NOT EDIT THIS FILE. It was generated by the pdutil program from hints.tab. }

interface

uses uhints;

procedure CreateHints1(hm: PdHintManager);
procedure CreateHints2(hm: PdHintManager);

implementation

procedure CreateHints1(hm: PdHintManager);
begin
hm.clearHints;
hm.addHint(PdHint.make('TWizardForm', 'cancel', '(none)', 
  'Cancel making a new plant. If you made any changes to the wizard options, you will be asked if you want to save your new options (without creating a plant).'));
hm.addHint(PdHint.make('TWizardForm', 'back', '(none)', 
  'Return to the previous panel of wizard questions. Some panels may not be available depending on choices made in other panels.'));
hm.addHint(PdHint.make('TWizardForm', 'next', '(none)', 
  'If this button reads ''Next'', click it to move to the next panel of wizard questions. (Some panels may not be available depending on choices made in other panels.) If this button reads ''Finish'', click it to create a new plant in the main window from th' + 'e wizard options chosen.'));
hm.addHint(PdHint.make('TWizardForm', 'internodesVeryShort', '(none)', 
  '?internodesLong'));
hm.addHint(PdHint.make('TWizardForm', 'internodesShort', '(none)', 
  '?internodesLong'));
hm.addHint(PdHint.make('TWizardForm', 'internodesMedium', '(none)', 
  '?internodesLong'));
hm.addHint(PdHint.make('TWizardForm', 'internodesLong', '(none)', 
  'Plants with very short internodes usually form rosettes (a set of leaves very close together) and bolt later in their life cycle. You can control bolting with parameters outside the wizard. Most grasses have very short internodes (the leaves are long).'));
hm.addHint(PdHint.make('TWizardForm', 'internodesVeryLong', '(none)', 
  '?internodesLong'));
hm.addHint(PdHint.make('TWizardForm', 'curvinessNone', '(none)', 
  '?curvinessLittle'));
hm.addHint(PdHint.make('TWizardForm', 'curvinessLittle', '(none)', 
  'Curviness is an index of how much random variation is included in internode angles. Tall, straight plants with strong stems (like sunflowers) should have no curviness (or a little), and weak-stemmed plants like tomatoes should have a lot of curviness.'));
hm.addHint(PdHint.make('TWizardForm', 'curvinessSome', '(none)', 
  '?curvinessLittle'));
hm.addHint(PdHint.make('TWizardForm', 'curvinessVery', '(none)', 
  '?curvinessLittle'));
hm.addHint(PdHint.make('TWizardForm', 'leavesAlternate', '(none)', 
  'Most plants have alternate leaves (one on one side, then one on the other). A smaller number of plants have opposite leaves (in pairs), usually monocots like corn and grasses. Leaves in sets of three or more are called whorled, and we don''t simulate them' + ' here.'));
hm.addHint(PdHint.make('TWizardForm', 'leavesOpposite', '(none)', 
  '?leavesAlternate'));
hm.addHint(PdHint.make('TWizardForm', 'branchNone', '(none)', 
  '?branchLittle'));
hm.addHint(PdHint.make('TWizardForm', 'branchLittle', '(none)', 
  'Plants like corn branch very little; plants like clovers branch more. Plants that branch a lot usually take a long time to draw.'));
hm.addHint(PdHint.make('TWizardForm', 'branchMedium', '(none)', 
  '?branchLittle'));
hm.addHint(PdHint.make('TWizardForm', 'branchLot', '(none)', 
  '?branchLittle'));
hm.addHint(PdHint.make('TWizardForm', 'secondaryBranchingYes', '(none)', 
  '?secondaryBranchingNo'));
hm.addHint(PdHint.make('TWizardForm', 'secondaryBranchingNo', '(none)', 
  'Primary branching is branching off the plant''s main stem (the one that comes out of the ground). Secondary branching is branching off branches that are not the main stem. Actually, we lump secondary branching here with tertiary (and so on) branching, so ' + 'the question is more like ''Should non-primary branching be allowed?'''));
hm.addHint(PdHint.make('TWizardForm', 'branchAngleSmall', '(none)', 
  '?branchAngleLarge'));
hm.addHint(PdHint.make('TWizardForm', 'branchAngleMedium', '(none)', 
  '?branchAngleLarge'));
hm.addHint(PdHint.make('TWizardForm', 'branchAngleLarge', '(none)', 
  'Each branch will make this angle with the stem it grows out of.'));
hm.addHint(PdHint.make('TWizardForm', 'leafScaleTiny', '(none)', 
  '?leafScaleHuge'));
hm.addHint(PdHint.make('TWizardForm', 'leafScaleSmall', '(none)', 
  '?leafScaleHuge'));
hm.addHint(PdHint.make('TWizardForm', 'leafScaleMedium', '(none)', 
  '?leafScaleHuge'));
hm.addHint(PdHint.make('TWizardForm', 'leafScaleLarge', '(none)', 
  '?leafScaleHuge'));
hm.addHint(PdHint.make('TWizardForm', 'leafScaleHuge', '(none)', 
  'Leaf scale is influenced by the size of the 3D object the leaf is drawn from, so the same scale can produce different-sized leaves with different 3D objects. '));
hm.addHint(PdHint.make('TWizardForm', 'leafAngleSmall', '(none)', 
  '?leafAngleLarge'));
hm.addHint(PdHint.make('TWizardForm', 'leafAngleMedium', '(none)', 
  '?leafAngleLarge'));
hm.addHint(PdHint.make('TWizardForm', 'leafAngleLarge', '(none)', 
  'Most grasses have a very small leaf angle, but some ground-cover plants have large leaf angles, with the leaves at greater than a right angle to the stem.'));
hm.addHint(PdHint.make('TWizardForm', 'petioleVeryShort', '(none)', 
  '?petioleLong'));
hm.addHint(PdHint.make('TWizardForm', 'petioleShort', '(none)', 
  '?petioleLong'));
hm.addHint(PdHint.make('TWizardForm', 'petioleMedium', '(none)', 
  '?petioleLong'));
hm.addHint(PdHint.make('TWizardForm', 'petioleLong', '(none)', 
  'Petioles can be very short (as in sessile leaves) or long. For example, the part of celery we eat is the leaf petioles.'));
hm.addHint(PdHint.make('TWizardForm', 'petioleVeryLong', '(none)', 
  '?petioleLong'));
hm.addHint(PdHint.make('TWizardForm', 'petalsOne', '(none)', 
  '?petalsFive'));
hm.addHint(PdHint.make('TWizardForm', 'petalsThree', '(none)', 
  '?petalsFive'));
hm.addHint(PdHint.make('TWizardForm', 'petalsFour', '(none)', 
  '?petalsFive'));
hm.addHint(PdHint.make('TWizardForm', 'petalsFive', '(none)', 
  'A large number of flowers have four or five petals. Some flowers have two rows of petals; we don''t simulate that complexity here, but you can increase the number of petals to make the flowers look more complicated. Be careful not to confuse a large numbe' + 'r of petals with a composite (head) inflorescence such as in a daisy; for that type of inflorescence each ''petal'' is a whole flower.'));
hm.addHint(PdHint.make('TWizardForm', 'petalsTen', '(none)', 
  '?petalsFive'));
hm.addHint(PdHint.make('TWizardForm', 'petalScaleTiny', '(none)', 
  '?petalScaleHuge'));
hm.addHint(PdHint.make('TWizardForm', 'petalScaleSmall', '(none)', 
  '?petalScaleHuge'));
hm.addHint(PdHint.make('TWizardForm', 'petalScaleMedium', '(none)', 
  '?petalScaleHuge'));
hm.addHint(PdHint.make('TWizardForm', 'petalScaleLarge', '(none)', 
  '?petalScaleHuge'));
hm.addHint(PdHint.make('TWizardForm', 'petalScaleHuge', '(none)', 
  'Petal scale is influenced by the size of the 3D object the petal is drawn from, so the same scale can produce different-sized petals with different 3D objects. '));
hm.addHint(PdHint.make('TWizardForm', 'inflorFlowersOne', '(none)', 
  '?inflorFlowersFive'));
hm.addHint(PdHint.make('TWizardForm', 'inflorFlowersTwo', '(none)', 
  '?inflorFlowersFive'));
hm.addHint(PdHint.make('TWizardForm', 'inflorFlowersThree', '(none)', 
  '?inflorFlowersFive'));
hm.addHint(PdHint.make('TWizardForm', 'inflorFlowersFive', '(none)', 
  'The more flowers in an inflorescence, the longer the plant will take to draw.'));
hm.addHint(PdHint.make('TWizardForm', 'inflorFlowersTen', '(none)', 
  '?inflorFlowersFive'));
hm.addHint(PdHint.make('TWizardForm', 'inflorFlowersTwenty', '(none)', 
  '?inflorFlowersFive'));
hm.addHint(PdHint.make('TWizardForm', 'inflorShapeSpike', '(none)', 
  '?inflorShapeCluster'));
hm.addHint(PdHint.make('TWizardForm', 'inflorShapeRaceme', '(none)', 
  '?inflorShapeCluster'));
hm.addHint(PdHint.make('TWizardForm', 'inflorShapePanicle', '(none)', 
  '?inflorShapeCluster'));
hm.addHint(PdHint.make('TWizardForm', 'inflorShapeUmbel', '(none)', 
  '?inflorShapeCluster'));
hm.addHint(PdHint.make('TWizardForm', 'inflorShapeHead', '(none)', 
  '?inflorShapeCluster'));
hm.addHint(PdHint.make('TWizardForm', 'apicalInflorsNone', '(none)', 
  '?apicalInflorsFive'));
hm.addHint(PdHint.make('TWizardForm', 'apicalInflorsOne', '(none)', 
  '?apicalInflorsFive'));
hm.addHint(PdHint.make('TWizardForm', 'apicalInflorsTwo', '(none)', 
  '?apicalInflorsFive'));
hm.addHint(PdHint.make('TWizardForm', 'apicalInflorsThree', '(none)', 
  '?apicalInflorsFive'));
hm.addHint(PdHint.make('TWizardForm', 'apicalInflorsFive', '(none)', 
  'You must choose an absolute number of apical inflorescences to place on the plant, if there are enough apical meristems available. '));
hm.addHint(PdHint.make('TWizardForm', 'axillaryInflorsNone', '(none)', 
  '?axillaryInflorsFive'));
hm.addHint(PdHint.make('TWizardForm', 'axillaryInflorsThree', '(none)', 
  '?axillaryInflorsFive'));
hm.addHint(PdHint.make('TWizardForm', 'axillaryInflorsFive', '(none)', 
  'You must choose an absolute number of axillary inflorescences to place on the plant, if there are enough axillary meristems available.'));
hm.addHint(PdHint.make('TWizardForm', 'axillaryInflorsTen', '(none)', 
  '?axillaryInflorsFive'));
hm.addHint(PdHint.make('TWizardForm', 'axillaryInflorsTwenty', '(none)', 
  '?axillaryInflorsFive'));
hm.addHint(PdHint.make('TWizardForm', 'apicalStalkVeryShort', '(none)', 
  '?apicalStalkLong'));
hm.addHint(PdHint.make('TWizardForm', 'apicalStalkShort', '(none)', 
  '?apicalStalkLong'));
hm.addHint(PdHint.make('TWizardForm', 'apicalStalkMedium', '(none)', 
  '?apicalStalkLong'));
hm.addHint(PdHint.make('TWizardForm', 'apicalStalkLong', '(none)', 
  'The primary stem of an apical inflorescence is the part of the inflorescence before individual flower stems appear. On some plants with short internodes (such as lilies) the apical inflorescence stem is usually very long.'));
hm.addHint(PdHint.make('TWizardForm', 'apicalStalkVeryLong', '(none)', 
  '?apicalStalkLong'));
hm.addHint(PdHint.make('TWizardForm', 'axillaryStalkVeryShort', '(none)', 
  '?axillaryStalkLong'));
hm.addHint(PdHint.make('TWizardForm', 'axillaryStalkShort', '(none)', 
  '?axillaryStalkLong'));
hm.addHint(PdHint.make('TWizardForm', 'axillaryStalkMedium', '(none)', 
  '?axillaryStalkLong'));
hm.addHint(PdHint.make('TWizardForm', 'axillaryStalkLong', '(none)', 
  'The primary stems of axillary inflorescences are not usually as long as those of apical inflorescences.'));
hm.addHint(PdHint.make('TWizardForm', 'axillaryStalkVeryLong', '(none)', 
  '?axillaryStalkLong'));
hm.addHint(PdHint.make('TWizardForm', 'fruitSectionsOne', '(none)', 
  '?fruitSectionsFive'));
hm.addHint(PdHint.make('TWizardForm', 'fruitSectionsThree', '(none)', 
  '?fruitSectionsFive'));
hm.addHint(PdHint.make('TWizardForm', 'fruitSectionsFour', '(none)', 
  '?fruitSectionsFive'));
hm.addHint(PdHint.make('TWizardForm', 'fruitSectionsFive', '(none)', 
  'You can think of fruit sections as like the sections of an orange.'));
hm.addHint(PdHint.make('TWizardForm', 'fruitSectionsTen', '(none)', 
  '?fruitSectionsFive'));
hm.addHint(PdHint.make('TWizardForm', 'fruitScaleTiny', '(none)', 
  '?fruitScaleHuge'));
hm.addHint(PdHint.make('TWizardForm', 'fruitScaleSmall', '(none)', 
  '?fruitScaleHuge'));
hm.addHint(PdHint.make('TWizardForm', 'fruitScaleMedium', '(none)', 
  '?fruitScaleHuge'));
hm.addHint(PdHint.make('TWizardForm', 'fruitScaleLarge', '(none)', 
  '?fruitScaleHuge'));
hm.addHint(PdHint.make('TWizardForm', 'fruitScaleHuge', '(none)', 
  'The size of the 3D objects drawn on the plant reflect the growth of the fruit. Fruit scale is influenced by the size of the 3D object the fruit section is drawn from, so the same scale can produce different-sized fruits with different 3D objects. '));
hm.addHint(PdHint.make('TWizardForm', 'leafletsOne', '(none)', 
  '?leafletsFive'));
hm.addHint(PdHint.make('TWizardForm', 'leafletsThree', '(none)', 
  '?leafletsFive'));
hm.addHint(PdHint.make('TWizardForm', 'leafletsFour', '(none)', 
  '?leafletsFive'));
hm.addHint(PdHint.make('TWizardForm', 'leafletsFive', '(none)', 
  'Simple leaves have only one part. Compound leaves are made up of two or more leaflets around a central stalk. For example, oak leaves are simple (though sometimes deeply lobed), but walnut leaves are compound.'));
hm.addHint(PdHint.make('TWizardForm', 'leafletsSeven', '(none)', 
  '?leafletsFive'));
hm.addHint(PdHint.make('TWizardForm', 'leafletsPinnate', '(none)', 
  '?leafletsPalmate'));
hm.addHint(PdHint.make('TWizardForm', 'leafletsPalmate', '(none)', 
  'Pinnate compound leaves are feather-shaped, and palmate compound leaves are hand-shaped.'));
hm.addHint(PdHint.make('TWizardForm', 'leafletSpacingClose', '(none)', 
  'Clovers are an example of plants with compound leaves but extremely tight spacing between the leaflets. Tomato plants have more widely spaced compound leaves.'));
hm.addHint(PdHint.make('TWizardForm', 'leafletSpacingMedium', '(none)', 
  '?leafletSpacingClose'));
hm.addHint(PdHint.make('TWizardForm', 'leafletSpacingFar', '(none)', 
  '?leafletSpacingClose'));
hm.addHint(PdHint.make('TWizardForm', 'defaultChoices', '(none)', 
  'Set all wizard choices to ''factory defaults'' creating a generic plant.'));
hm.addHint(PdHint.make('TWizardForm', 'internodeWidthVeryThin', '(none)', 
  '?internodeWidthMedium'));
hm.addHint(PdHint.make('TWizardForm', 'internodeWidthThin', '(none)', 
  '?internodeWidthMedium'));
hm.addHint(PdHint.make('TWizardForm', 'internodeWidthMedium', '(none)', 
  'Plants with thick internodes are usually either very large plants (like corn or sunflowers) or very short plants with thick stems (like broccoli or lettuce).'));
hm.addHint(PdHint.make('TWizardForm', 'internodeWidthThick', '(none)', 
  '?internodeWidthMedium'));
hm.addHint(PdHint.make('TWizardForm', 'internodeWidthVeryThick', '(none)', 
  '?internodeWidthMedium'));
hm.addHint(PdHint.make('TWizardForm', 'inflorShapeCluster', '(none)', 
  'These shape choices set some parameters as to the general shape of the inflorescence. You may need to do some fine-tuning with inflorescence and flower drawing parameters to get exactly the inflorescence shape you want.'));
hm.addHint(PdHint.make('TWizardForm', 'inflorWidthVeryThin', '(none)', 
  '?inflorWidthMedium'));
hm.addHint(PdHint.make('TWizardForm', 'inflorWidthThin', '(none)', 
  '?inflorWidthMedium'));
hm.addHint(PdHint.make('TWizardForm', 'inflorWidthMedium', '(none)', 
  'Usually only inflorescences with a lot of flowers (like head inflorescences) have thick stems.'));
hm.addHint(PdHint.make('TWizardForm', 'inflorWidthThick', '(none)', 
  '?inflorWidthMedium'));
hm.addHint(PdHint.make('TWizardForm', 'inflorWidthVeryThick', '(none)', 
  '?inflorWidthMedium'));
hm.addHint(PdHint.make('TWizardForm', 'petalColor', 'Click to change', 
  'Click here to change the flower petal color.'));
hm.addHint(PdHint.make('TWizardForm', 'fruitColor', 'Click to change', 
  'Click here to change the fruit color. '));
hm.addHint(PdHint.make('TWizardForm', 'internodesPageImage', '(none)', 
  '?internodesLong'));
hm.addHint(PdHint.make('TWizardForm', 'showFruitsYes', '(none)', 
  'Click this radio button to show fruits on your plant.'));
hm.addHint(PdHint.make('TWizardForm', 'showFruitsNo', '(none)', 
  'Click this radio button to grow your plant from seed to maturity without showing any fruits.'));
hm.addHint(PdHint.make('TWizardForm', 'randomizePlant', '(none)', 
  'Change the random number seed of this plant. The random number seed affects plant angles and branching patterns. When you click Finish, whatever plant you have created here will be copied with its random number seed intact.'));
hm.addHint(PdHint.make('TWizardForm', 'turnLeft', 'Turn left', 
  'Turn the plant in the preview to the left.'));
hm.addHint(PdHint.make('TWizardForm', 'turnRight', 'Turn right', 
  'Turn the plant in the preview to the right.'));
hm.addHint(PdHint.make('TWizardForm', 'helpButton', '(none)', 
  'Get help with using the wizard.'));
hm.addHint(PdHint.make('TWizardForm', 'changeTdoLibrary', '(none)', 
  'Choose another 3D object library file to select 3D objects from (for leaves, flowers and fruit).'));
hm.addHint(PdHint.make('TDebugForm', 'DebugList', 'List of messages', 
  'Messages from the program. Messages can be input problems or numerical exceptions encountered when growing plants or drawing. See the help system for an explanation of messages.'));
hm.addHint(PdHint.make('TDebugForm', 'Close', '(none)', 
  'Close the messages window.'));
hm.addHint(PdHint.make('TDebugForm', 'saveListAs', '(none)', 
  'Save the current list of messages shown in this window to a text file for technical support.'));
hm.addHint(PdHint.make('TDebugForm', 'clearList', '(none)', 
  'Clear the current list of messages shown in this window.'));
hm.addHint(PdHint.make('TDebugForm', 'showOnExceptionCheckBox', '(none)', 
  'Check this box to open the messages window each time a new message is written to it. Note that if you uncheck this box you will not be notified of new messages.'));
hm.addHint(PdHint.make('TDebugForm', 'logToFile', '(none)', 
  'Check this box to write each message as it occurs to a log file. (The log file will appear in the directory the program file is in and will be called errors.nex.)'));
hm.addHint(PdHint.make('TDebugForm', 'helpButton', '(none)', 
  'Get help with messages.'));
hm.addHint(PdHint.make('TDebugForm', 'supportButton', '(none)', 
  'List some information that might be needed for technical support if you have a problem with PlantStudio.'));
hm.addHint(PdHint.make('TChooseDXFColorForm', 'Close', '(none)', 
  'Close this window and save your change to the DXF color you selected. You can also make a color selection and close the window by double-clicking on a color in the grid.'));
hm.addHint(PdHint.make('TChooseDXFColorForm', 'cancel', '(none)', 
  'Close this window without saving your change to the DXF color you selected.'));
hm.addHint(PdHint.make('TNoteEditForm', 'OK', '(none)', 
  'Close this window and save the changes you have made to this note.'));
hm.addHint(PdHint.make('TNoteEditForm', 'cancel', '(none)', 
  'Close this window without saving your changes.'));
hm.addHint(PdHint.make('TNoteEditForm', 'wrapLines', '(none)', 
  'Check this box to automatically wrap lines in this note; uncheck it to wrap the lines yourself using the Enter key.'));
hm.addHint(PdHint.make('TNoteEditForm', 'helpButton', '(none)', 
  'Get help on editing plant notes.'));
hm.addHint(PdHint.make('TOptionsForm', 'Close', '(none)', 
  'Close this window and save your changes to program preferences.'));
hm.addHint(PdHint.make('TOptionsForm', 'cancel', '(none)', 
  'Close this window and don''t save your changes to program preferences.'));
hm.addHint(PdHint.make('TOptionsForm', 'backgroundColor', 'Click to change', 
  'Click here to change the color drawn behind the plants in all drawing areas and when copying, saving and printing pictures.'));
hm.addHint(PdHint.make('TOptionsForm', 'showPlantDrawingProgress', '(none)', 
  'Check this box to update the drawing progress bars on the main window, breeder and time series window when redrawing plants. The progress bars do slow down the drawing a bit, but they give you feedback.'));
hm.addHint(PdHint.make('TOptionsForm', 'firstSelectionRectangleColor', 'Click to change', 
  'Click here to change the color used to draw a selection rectangle around the focused plant in the main window. For help with the distinction between the focused plant and other selected plants, see the help system.'));
hm.addHint(PdHint.make('TOptionsForm', 'multiSelectionRectangleColor', 'Click to change', 
  'Click here to change the color used to draw a selection rectangle around all selected plants except the focused plant.'));
hm.addHint(PdHint.make('TOptionsForm', 'rotationIncrement', '(none)', 
  'This is the number of degrees plants rotate when you click on the up or down arrows in the main window Rotation panel to change X, Y and Z rotations. It is also used when you click without dragging to rotate a plant in the X direction.'));
hm.addHint(PdHint.make('TOptionsForm', 'nudgeDistance', '(none)', 
  'You can ''nudge'' selected plants in the main window by holding down the Control key and pressing the keyboard arrow keys. This is how far in pixels you are moving the selected plants when you do this.'));
hm.addHint(PdHint.make('TOptionsForm', 'useMetricUnits', '(none)', 
  'Check this box to show metric units as the first choice when parameter panels are opened. Uncheck this box to show English units as the first choice when parameter panels are opened.'));
hm.addHint(PdHint.make('TOptionsForm', 'parametersFontSize', '(none)', 
  'If you have a hard time seeing the words in the parameter panels, you can increase the font size here.'));
hm.addHint(PdHint.make('TOptionsForm', 'openMostRecentFileAtStart', '(none)', 
  'Check this box to open the file you most recently had open the next time you start the program. This is useful if you are often working on the same files. Uncheck this box to always start the program with a new file.'));
hm.addHint(PdHint.make('TOptionsForm', 'ignoreWindowSettingsInFile', '(none)', 
  'Check this box if you want the window to look the same no matter what window settings are saved in the file. The settings saved are whether the drawing area is shown on the top or side, and whether you see one plant or all visible plants at a time. Unchec' + 'k this box to read the window settings from the file and make the main window look like what is saved there.'));
hm.addHint(PdHint.make('TOptionsForm', 'pauseBeforeHint', '(none)', 
  'How long the program will wait after you hold the mouse still before it displays a hint (this is a hint). If you don''t like hints, set this to a large number like 60 seconds.'));
hm.addHint(PdHint.make('TOptionsForm', 'pauseDuringHint', '(none)', 
  'How long hints will stay on the screen. If you find you can''t read the hints before they disappear (especially long hints), make this number larger. If you are sure you won''t be using long hints, you might want to set this to a smaller number.'));
hm.addHint(PdHint.make('TOptionsForm', 'helpButton', '(none)', 
  'Get help with choosing these preferences.'));
hm.addHint(PdHint.make('TOptionsForm', 'resizeKeyUpMultiplierPercent', '(none)', 
  'You can resize selected plants in the main window by holding down the Control and Shift keys and pressing the keyboard arrow keys. This is how much you are resizing the selected plants (as a percentage of the current plant scale) when you do this.'));
hm.addHint(PdHint.make('TOptionsForm', 'customDrawOptions', '(none)', 
  'Click here to customize the drawing options. The window that appears will be the same as when you choose the Draw Using > Custom option on the Options menu.'));
hm.addHint(PdHint.make('TOptionsForm', 'transparentColor', 'Click to change', 
  'Click here to change the color used as the transparent color in plant bitmaps. Any pixel drawn with this color will show up as transparent in the main window. This should be a color that never appears in your plants, such as pure black or pure white.'));
hm.addHint(PdHint.make('TOptionsForm', 'memoryLimitForPlantBitmaps_MB', '(none)', 
  'This is the maximum amount of memory the program will use for plant bitmaps. If the total memory taken up by plant bitmaps exceeds this amount, the program will drop all plant bitmaps and draw plants directly on the screen (there is nothing wrong with dra' + 'wing directly on the screen; it''s just slower). SET THIS NUMBER CAREFULLY. You should make sure you can devote at least this much memory plus a megabyte or two to PlantStudio. See the help system for details.'));
hm.addHint(PdHint.make('TOptionsForm', 'pasteRectSize', '(none)', 
  'This is how large a plant appears (width and height) when you paste it into the main window using Edit > Paste From Text. '));
hm.addHint(PdHint.make('TOptionsForm', 'ghostingColor', 'Click to change', 
  'Click here to change the color used to draw plant parts that are hidden by posing. If the menu option ''Ghost Hidden Parts'' is turned off, this color won''t be used because the hidden parts will be completely invisible. Usually a gray or off-white color ' + 'is a good ''ghost'' color.'));
hm.addHint(PdHint.make('TOptionsForm', 'nonHiddenPosedColor', 'Click to change', 
  'Click here to change the color used to draw plant parts that are posed but are not hidden. A good color to choose for this is some color you don''t often see in plants, like blue.'));
hm.addHint(PdHint.make('TOptionsForm', 'selectedPosedColor', '(none)', 
  'Click here to change the color used to draw the plant part that is posed, not hidden, and SELECTED. This will be the plant part whose posing options you can see in the Posing panel. A good color to choose for this is some bright color like red.'));
hm.addHint(PdHint.make('TOptionsForm', 'undoLimit', '(none)', 
  'The number of actions that will be kept in the undo list, no matter how much memory they take up. Actions like selecting plants and changing magnification take up very little memory, so you will probably want to set a high absolute limit on the number of ' + 'undoable actions allowed.'));
hm.addHint(PdHint.make('TOptionsForm', 'undoLimitOfPlants', '(none)', 
  'The number of plant copies that will be kept in the undo list. Actions such as cut and paste make copies of plants. Plants  take anywhere from 5 to 100 kilobytes of memory. So for example, if you copy ten plants three times, you will have thirty plants in' + ' your undo list (up to 3 MB). To be conservative, set this number at about the amount of memory you think you have available (in kilobytes) divided by 200.'));
hm.addHint(PdHint.make('TOptionsForm', 'resizeRectSize', '(none)', 
  'If you are having a hard time clicking on the resizing square at the upper right hand corner of plant selection rectangles, increase the number here to make the resizing square larger.'));
hm.addHint(PdHint.make('TProgramInfoForm', 'Close', '(none)', 
  'Close this window.'));
hm.addHint(PdHint.make('TProgramInfoForm', 'saveListAs', '(none)', 
  'Save this list of program information to a text file.'));
hm.addHint(PdHint.make('TProgramInfoForm', 'copyToClipboard', '(none)', 
  'Copy the contents of the program information list to the clipboard so you can paste it into your text editor and email it to us for technical support.'));
hm.addHint(PdHint.make('TProgramInfoForm', 'helpButton', '(none)', 
  'Get help on this program information window.'));
hm.addHint(PdHint.make('TTdoEditorForm', 'ok', '(none)', 
  'Close the 3D object editor and save the changes you have made to this 3D object.'));
hm.addHint(PdHint.make('TTdoEditorForm', 'cancel', '(none)', 
  'Close the 3D object editor without saving any changes you made to the 3D object selected.'));
hm.addHint(PdHint.make('TTdoEditorForm', 'undoLast', '(none)', 
  'Undo the last action you did. This button works with the redo button just like undo/redo commands in a menu.'));
hm.addHint(PdHint.make('TTdoEditorForm', 'redoLast', '(none)', 
  'Redo the first available action that was previously undone. This button works with the undo button just like undo/redo commands in a menu.'));
hm.addHint(PdHint.make('TTdoEditorForm', 'dragCursorMode', 'Drag mode', 
  'Switch to drag cursor mode, where you can drag triangle points in 3D space. *You can only drag points in the Edit panel on the left.* Click on any existing point to drag it. To drag in the Z direction (into or out of the screen), click with the right mous' + 'e button and drag. You won''t be able to see Z movement in the Edit panel, but you can see if you have rotated the other drawings in the viewing panels. '));
hm.addHint(PdHint.make('TTdoEditorForm', 'magnifyCursorMode', 'Magnify mode', 
  'Switch to magnify cursor mode, where you can change the drawing magnification in any of the three panels. Click where you want the center of the magnified area to be, and Shift-click or right-click to reduce instead of magnify. Note that unlike in the mai' + 'n window, you cannot undo changing magnification here.'));
hm.addHint(PdHint.make('TTdoEditorForm', 'scrollCursorMode', 'Scroll mode', 
  'Switch to scroll cursor mode, where you can move the 3D objects around in any of the three panels above. Note that unlike in the main window, you cannot undo scrolling here.'));
hm.addHint(PdHint.make('TTdoEditorForm', 'addTrianglePointsCursorMode', 'Add triangles mode', 
  'Switch to add triangles cursor mode, where you can create new triangles on the 3D object. *You can only drag points in the Edit panel on the left.* To add a new triangle, click in the Edit panel three times. Existing points will ''light up'' when you move' + ' the cursor over them in this mode. After you set the first point, lines will show you where you are drawing the triangle. If you make a mistake while creating a new triangle, finish the triangle, then click the Undo button to remove it.'));
hm.addHint(PdHint.make('TTdoEditorForm', 'removeTriangleCursorMode', 'Remove triangles mode', 
  'Switch to remove triangle cursor mode, where you can delete triangles from the 3D object. *You can only remove triangles in the Edit panel on the left.*  To remove a triangle, click on it.'));
hm.addHint(PdHint.make('TTdoEditorForm', 'flipTriangleCursorMode', 'Flip triangles mode', 
  'Switch to flip triangle cursor mode, where you can change the orientation of triangles in the 3D object. The program decides which color to draw triangles (the front or back face color) based on the direction of the triangle points: clockwise or countercl' + 'ockwise. In a front-facing triangle the points are clockwise in order. *You can only flip triangles in the Edit panel on the left.* To change the orientation of a triangle, click on it.'));
hm.addHint(PdHint.make('TTdoEditorForm', 'rotateCursorMode', 'Rotate mode', 
  'Switch to rotate cursor mode, where you can rotate the drawings in each of the two View panels on the right. *You can only rotate the 3D object drawings in the two View panels.* To rotate in X, drag to the left or right. To rotate in Y, drag up or down. T' + 'o rotate in Z, right-click and drag to the left or right. Note that unlike in the main window, you cannot undo rotating here.'));
hm.addHint(PdHint.make('TTdoEditorForm', 'fillTriangles', '(none)', 
  'Check this box to fill all 3D object polygons. Uncheck it to draw the 3D objects as wire frame structures. '));
hm.addHint(PdHint.make('TTdoEditorForm', 'plantParts', '(none)', 
  'This is the number of 3D objects drawn in the two View panels above. Set this number higher than one if you want to test what a 3D object will look like as a flower petal or fruit section.'));
hm.addHint(PdHint.make('TTdoEditorForm', 'verticalSplitter', 'Drag to size', 
  'Click on this line and drag to the left or right to change the size of the areas on the left and right.'));
hm.addHint(PdHint.make('TTdoEditorForm', 'horizontalSplitter', 'Drag to size', 
  'Click on this line and drag up or down to change the size of the areas above and below it.'));
hm.addHint(PdHint.make('TTdoEditorForm', 'drawLines', '(none)', 
  'Check this box to draw lines around each triangle. Uncheck this box to draw the 3D object without lines between the triangles.'));
hm.addHint(PdHint.make('TTdoEditorForm', 'writeToDXF', '(none)', 
  'Write this 3D object (by itself) out to a 3D file using the DXF file format, which can be read by many 3D drawing programs.'));
hm.addHint(PdHint.make('TTdoEditorForm', 'renameTdo', '(none)', 
  'Change the name of the 3D object you are editing.'));
hm.addHint(PdHint.make('TTdoEditorForm', 'circlePointSize', '(none)', 
  'Click the up or down buttons here to change the size of points in the Edit panel above.'));
hm.addHint(PdHint.make('TTdoEditorForm', 'helpButton', '(none)', 
  'Get help with editing 3D objects.'));
hm.addHint(PdHint.make('TTdoEditorForm', 'mirrorTdo', 'Mirror image', 
  'If you want your 3D object to be symmetrical in the X direction (left-right), create one half of the 3D object, make sure the midpoints are lined up with the first point (colored black), then click this button to generate a mirror image of symmetrical tri' + 'angles on the other side. If you already have two sides and want to redo their symmetry, remove all the triangles on one side and then click this button.'));
hm.addHint(PdHint.make('TTdoEditorForm', 'reverseZValues', 'Reverse', 
  'Sometimes when you make a 3D object it comes out backward, and when you put it on the plant it seems upside-down. This is because you pushed the Z values when you should have pulled. The direction of Z values is hard to keep straight, so if your 3D object' + ' turns out backwards, click this button and the 3D object will reverse itself. Try it a few times to see what it does.'));
hm.addHint(PdHint.make('TTdoEditorForm', 'centerDrawing', 'Make 3D object fit into drawing area', 
  'Set the magnification for each of the three panels above so that the different drawings of the 3D object fit in each drawing area.'));
hm.addHint(PdHint.make('TTdoEditorForm', 'resetRotations', 'Reset rotations', 
  'Reset the X, Y and Z rotations in each of the two View panels above to zero. Note that unlike in the main window, you cannot undo this action.'));
hm.addHint(PdHint.make('TTdoEditorForm', 'writeToPOV', '(none)', 
  'Write this 3D object (by itself) out to a 3D file using the POV-Ray INC file format, which can be read by the POV-Ray 3D renderer.'));
hm.addHint(PdHint.make('TTdoEditorForm', 'mirrorHalf', '(none)', 
  'Check this box to preview what the other half of a symmetrical 3D object will look like before you create the mirror points. Uncheck it to show only the existing points.'));
hm.addHint(PdHint.make('TTdoEditorForm', 'ReadFromDXF', '(none)', 
  'Replace the current 3D object with one stored in a DXF file (only 3DFACE entities will be read).'));
hm.addHint(PdHint.make('TTdoEditorForm', 'connectionPoint', '(none)', 
  'Click the up or down buttons here to change which point on the 3D object connects it to the plant stem.'));
hm.addHint(PdHint.make('TTdoEditorForm', 'clearTdo', '(none)', 
  'Remove all the points in this 3D object at once. You can undo this action.'));
hm.addHint(PdHint.make('TBreederForm', 'variationLow', 'Vary numbers low', 
  'Set breeding variation to low for all numerical parameters.'));
hm.addHint(PdHint.make('TBreederForm', 'variationMedium', 'Vary numbers medium', 
  'Set breeding variation to medium for all numerical parameters.'));
hm.addHint(PdHint.make('TBreederForm', 'variationCustom', 'Vary numbers custom', 
  'Set breeding variation for numerical parameters to a custom configuration (a breeding options window will appear).'));
hm.addHint(PdHint.make('TBreederForm', 'varyColors', 'Vary colors', 
  'If this button is pushed in, colors will be randomly varied when you breed. If this button is not pushed in, colors of offspring will be identical to those of the parent.'));
hm.addHint(PdHint.make('TBreederForm', 'vary3DObjects', 'Vary 3D objects', 
  'If this button is pushed in, 3D objects will be randomly chosen from the current 3D object library when you breed. If this button is not pushed in, 3D objects will be identical to those of the parent.'));
hm.addHint(PdHint.make('TBreederForm', 'helpButton', 'Help', 
  'To breed from one parent, double-click on it. To breed from two parents, select one, then Shift-click to select another in the same generation (row), then choose Breed from the breeder Breed menu. Any generations below the one you bred will be written ove' + 'r. You can also replace one breeder plant with another by dragging, and you can drag a breeder plant into the main window. Click this button to get more help with breeding plants.'));
hm.addHint(PdHint.make('TBreederForm', 'variationHigh', 'Vary numbers high', 
  'Set breeding variation to high for all numerical parameters.'));
hm.addHint(PdHint.make('TBreederForm', 'variationNoneNumeric', 'Vary numbers none', 
  'Turn off breeding variation for all numerical parameters.'));
hm.addHint(PdHint.make('TBreederForm', 'breedButton', 'Breed', 
  'Breed a new generation of offspring, using the one or two selected plants as parents. Any generations below the one you bred will be written over. If this button is disabled (gray), you need to select a plant to breed.'));
hm.addHint(PdHint.make('TPrintBordersForm', 'Close', '(none)', 
  'Close this window and save your changes to the print border.'));
hm.addHint(PdHint.make('TPrintBordersForm', 'cancel', '(none)', 
  'Close this window and don''t save your changes to the print border.'));
hm.addHint(PdHint.make('TPrintBordersForm', 'printBorderInner', '(none)', 
  'Check this box to draw an inside border on your printed picture. Uncheck this box to print the picture with no inner border.'));
hm.addHint(PdHint.make('TPrintBordersForm', 'printBorderOuter', '(none)', 
  'Check this box to draw an outside border on your printed picture. Uncheck this box to print the picture with no outer border.'));
hm.addHint(PdHint.make('TPrintBordersForm', 'printBorderColorInner', '(none)', 
  'Click here to change the color of the inner border on printed pictures.'));
hm.addHint(PdHint.make('TPrintBordersForm', 'printBorderColorOuter', '(none)', 
  'Click here to change the color of the outer border on printed pictures.'));
hm.addHint(PdHint.make('TPrintBordersForm', 'printBorderWidthInner', '(none)', 
  'Click the up or down arrows here to change the thickness in pixels of the inner print border for pictures.'));
hm.addHint(PdHint.make('TPrintBordersForm', 'printBorderWidthOuter', '(none)', 
  'Click the up or down arrows here to change the thickness in pixels of the outer print border for pictures.'));
hm.addHint(PdHint.make('TPrintBordersForm', 'helpButton', '(none)', 
  'Get help on setting print borders.'));
hm.addHint(PdHint.make('TTdoMoverForm', 'leftTdoFileNameEdit', 'Library open on left side', 
  'The 3D object library that is open on the left side of the mover. All the 3D objects in this library are shown in the list below. If no library name is shown here, click Open to open a 3D object library. If a library name is shown here, you must click Clo' + 'se before opening a new library on this side.'));
hm.addHint(PdHint.make('TTdoMoverForm', 'leftOpenClose', '(none)', 
  'Open a 3D object library, or close the open library, on this side of the mover.'));
hm.addHint(PdHint.make('TTdoMoverForm', 'rightTdoFileNameEdit', 'Library open on left side', 
  'The 3D object library that is open on the right side of the mover. All the 3D objects in this library are shown in the list below. If no library name is shown here, click Open to open a 3D object library. If a library name is shown here, you must click Cl' + 'ose before opening a new library on this side.'));
hm.addHint(PdHint.make('TTdoMoverForm', 'rightOpenClose', '(none)', 
  'Open a 3D object library, or close the open library, on this side of the mover.'));
hm.addHint(PdHint.make('TTdoMoverForm', 'newFile', '(none)', 
  'Create a new 3D object library with no 3D objects in it.'));
hm.addHint(PdHint.make('TTdoMoverForm', 'transfer', '(none)', 
  'Copy the selected 3D object(s) from the selected library to the other library.'));
hm.addHint(PdHint.make('TTdoMoverForm', 'close', '(none)', 
  'Close the 3D object mover and return to the program. If you made changes to either 3D object library, you will be asked if you want to save your changes.'));
hm.addHint(PdHint.make('TTdoMoverForm', 'previewImage', '(none)', 
  'The focused 3D object. Click and drag in this image to move the 3D object around; use the buttons below to change the magnification and turn the 3D object.'));
hm.addHint(PdHint.make('TTdoMoverForm', 'undo', '(none)', 
  'Undo the last action you did. This button works with the redo button just like undo/redo commands in a menu.'));
hm.addHint(PdHint.make('TTdoMoverForm', 'redo', '(none)', 
  'Redo the first available action that was previously undone. This button works with the undo button just like undo/redo commands in a menu.'));
hm.addHint(PdHint.make('TTdoMoverForm', 'rename', '(none)', 
  'Change the name of the focused 3D object. For help with the distinction between the focused 3D object and other selected 3D objects, see the help system.'));
hm.addHint(PdHint.make('TTdoMoverForm', 'duplicate', '(none)', 
  'Make a copy of all the selected 3D objects in the list.'));
hm.addHint(PdHint.make('TTdoMoverForm', 'delete', '(none)', 
  'Remove the selected 3D objects. You can undo the deletion by clicking the Undo button below.'));
hm.addHint(PdHint.make('TTdoMoverForm', 'leftTdoFileChangedIndicator', 'Library has changed', 
  'This indicator shows if you have made a change to the 3D object library on the left side of the mover. If this indicator is gray, the library has not been changed.'));
hm.addHint(PdHint.make('TTdoMoverForm', 'rightTdoFileChangedIndicator', 'File has changed', 
  'This indicator shows if you have made a change to the 3D object library on the right side of the mover. If this indicator is gray, the library has not been changed.'));
end;

procedure CreateHints2(hm: PdHintManager);
begin
hm.addHint(PdHint.make('TTdoMoverForm', 'leftTdoList', '(none)', 
  'All the 3D objects in the 3D object library loaded on the left side of the mover. Click the buttons in the middle to transfer these 3D objects to the right-side library. **Only one file can be selected at a time.** Hold down the Shift key and press the up' + ' or down arrow keys to move 3D objects up and down in the list.'));
hm.addHint(PdHint.make('TTdoMoverForm', 'rightTdoList', '(none)', 
  'All the 3D objects in the 3D object library loaded on the right side of the mover. Click the buttons in the middle to transfer these 3D objects to the left-side library. **Only one file can be selected at a time.** Hold down the Shift key and press the up' + ' or down arrow keys to move 3D objects up and down in the list.'));
hm.addHint(PdHint.make('TTdoMoverForm', 'editTdo', '(none)', 
  'Change the focused 3D object using the 3D object editor. For help with the distinction between the focused 3D object and other selected 3D objects, see the help system.'));
hm.addHint(PdHint.make('TTdoMoverForm', 'helpButton', '(none)', 
  'Get help with using the 3D object mover.'));
hm.addHint(PdHint.make('TMainForm', 'dragCursorMode', 'Select/drag mode', 
  'Switch to select/drag cursor mode, where you can click on plants to select them, click and drag to move selected plants, and Ctrl-click and drag to duplicate selected plants. To select multiple plants, shift-click on them (one after another) or click and ' + 'drag a box around them.'));
hm.addHint(PdHint.make('TMainForm', 'magnifyCursorMode', 'Magnify mode', 
  'Switch to magnify cursor mode, where you can change the overall drawing magnification. Click where you want the center of the magnified area to be, or shift-click or right-click to reduce instead of magnifying. Or click and drag to magnify a specific area' + '. You cannot select plants in this mode; to select plants, change to select/drag mode or choose another plant in the plant list.'));
hm.addHint(PdHint.make('TMainForm', 'scrollCursorMode', 'Scroll mode', 
  'Switch to scroll cursor mode, where you can drag the whole drawing around. You cannot select plants in this mode; to select plants, change to select/drag mode or choose another plant in the plant list.'));
hm.addHint(PdHint.make('TMainForm', 'horizontalSplitter', 'Drag to size', 
  'Click on this line and drag up or down to change the size of the areas above and below it.'));
hm.addHint(PdHint.make('TMainForm', 'verticalSplitter', 'Drag to size', 
  'Click on this line and drag to the left or right to change the size of the areas to its left and right.'));
hm.addHint(PdHint.make('TMainForm', 'rotateCursorMode', 'Rotate mode', 
  'Switch to rotate cursor mode, where you can drag to rotate selected plants. For X rotation, drag left and right. For Y rotation, drag up and down. For Z rotation, right-click and drag left and right. For a quick rotation in the X direction, click or right' + '-click without dragging. You cannot select plants in this mode; to select plants, change to select/drag mode or choose another plant in the plant list.'));
hm.addHint(PdHint.make('TMainForm', 'centerDrawing', 'Make plants fit into drawing area', 
  'Set the magnification so that all visible plants fit in the drawing area.'));
hm.addHint(PdHint.make('TMainForm', 'progressPaintBox', 'Drawing progress', 
  'This bar shows plant drawing progress, if the ''Show drawing progress'' option is turned on (select Preferences from the main Edit menu to change this option).'));
hm.addHint(PdHint.make('TMainForm', 'lifeCycleGraphImage', 'Life cycle', 
  'The life cycle of the focused plant, with time in days on the X axis and percent of maximum plant size (biomass, actually) on the Y axis. The shape of the graph is determined by growth parameters in the ''General parameters'' section.'));
hm.addHint(PdHint.make('TMainForm', 'lifeCycleDaysEdit', 'Age', 
  'The age of the focused plant. Enter a number here (or click the up or down arrow buttons) to change the age of all selected plants to the new value.'));
hm.addHint(PdHint.make('TMainForm', 'lifeCycleDragger', 'Drag to change age', 
  'The current age of the focused plant (as shown on the X axis below). Click on this bar and drag to the left or right to change the age of all selected plants to a new value.'));
hm.addHint(PdHint.make('TMainForm', 'tabSet', 'Display panels', 
  'Information panels for the focused plant. ''Arrangement'' shows rotation, scaling and position. ''Parameters'' shows the numbers and choices that define the plant. ''Age'' shows the growth curve of the plant where you can change the plant''s age. ''Posing' + ''' shows special pruning, rotating and scaling changes to specific plant parts. ''Stats'' counts and totals plant parts and is for display only. ''Note'' shows the note for the focused plant. Click on a tab to choose a panel.'));
hm.addHint(PdHint.make('TMainForm', 'plantFileChangedImage', 'File changed', 
  'This indicator shows whether you have made a change to the current plant file. If this indicator is gray, the file has not been changed.'));
hm.addHint(PdHint.make('TMainForm', 'plantListDrawGrid', '(none)', 
  'This is a list of plants in the open file. Click on plants to select them (Ctrl-click or Shift-click to select multiple plants). Visible plants have little pictures of seedlings to the left of their names. To hide or show plants, click on the seedlings. T' + 'ype Shift-up arrow or Shift-down arrow to move selected plants forward or backward in the list. The order of the list is the drawing order (from front to back).'));
hm.addHint(PdHint.make('TMainForm', 'animateGrowth', 'Animate', 
  'Animate the selected plants by growing them from germination to maturity. While the animation is going on, clicking with the mouse will do nothing, but pressing any key will stop the animation. If you stop the animation the plant(s) will remain at the age' + ' the animation stopped at. You can undo the change in age using the Edit menu.'));
hm.addHint(PdHint.make('TMainForm', 'xRotationEdit', 'X rotation', 
  'X rotation of the focused plant. If you think of the plant''s main stem like an airplane, X rotation is spinning around (roll). Change this number to change the X rotation of all selected plants.'));
hm.addHint(PdHint.make('TMainForm', 'yRotationEdit', 'Y rotation', 
  'Y rotation of the focused plant. If you think of the plant''s main stem like an airplane, Y rotation is turning up or down (pitch). Change this number to change the Y rotation of all selected plants.'));
hm.addHint(PdHint.make('TMainForm', 'zRotationEdit', 'Z rotation', 
  'Z rotation of the focused plant. If you think of the plant''s main stem like an airplane, Z rotation is leaning to the left or right (yaw). Change this number to change the Z rotation of all selected plants.'));
hm.addHint(PdHint.make('TMainForm', 'resetRotations', 'Reset rotations', 
  'Reset the x, y and z rotations of all selected plants to zero.'));
hm.addHint(PdHint.make('TMainForm', 'magnificationPercent', 'Magnification', 
  'Magnification in the drawing area. Choose a new magnification from the list, or type a number and press Tab or Enter.'));
hm.addHint(PdHint.make('TMainForm', 'notePanel', '(none)', 
  'The note for the selected plant. Right-click on the note to show a popup menu.'));
hm.addHint(PdHint.make('TMainForm', 'noteMemo', '(none)', 
  'The note for the selected plant. Right-click on the note to show a popup menu.'));
hm.addHint(PdHint.make('TMainForm', 'noteEdit', 'Edit note', 
  'Change the note shown here. You can only view or edit one note at a time.'));
hm.addHint(PdHint.make('TMainForm', 'viewFreeFloating', 'Show all plants', 
  'If this button is pushed in, all visible plants in this plant file will be drawn. This mode is useful when you want to compare or arrange plants.'));
hm.addHint(PdHint.make('TMainForm', 'viewOneOnly', 'Show only focused plant', 
  'If this button is pushed in, only the selected plant will be drawn, and you will only be able to select one plant at a time. This mode is useful when you want to concentrate on changing one plant''s parameters.'));
hm.addHint(PdHint.make('TMainForm', 'drawingAreaOnTop', 'Drawing area on top', 
  'If this button is pushed in, the drawing area (where the plants are drawn) will be on the top of the window.'));
hm.addHint(PdHint.make('TMainForm', 'drawingAreaOnSide', 'Drawing area on side', 
  'If this button is pushed in, the drawing area (where the plants are drawn) will be on the left side of the window.'));
hm.addHint(PdHint.make('TMainForm', 'drawingScaleEdit', 'Size', 
  'The size, or drawing scale, of the focused plant. Enter a number here (or click the up or down arrow buttons) to make the focused plant (and all selected plants) larger or smaller.'));
hm.addHint(PdHint.make('TMainForm', 'packPlants', 'Pack', 
  'Pack all selected plants by making them all the same height and fitting them into the available space in the drawing area. Plants will pack in the same order (left to right, top to bottom) as they appear in the plant list. This button is disabled (gray) i' + 'f only one plant is selected.'));
hm.addHint(PdHint.make('TMainForm', 'xLocationEdit', 'X location', 
  'X location of the focused plant. Change this number to move all selected plants by the same amount. '));
hm.addHint(PdHint.make('TMainForm', 'yLocationEdit', 'Y location', 
  'Y location of the focused plant. Change this number to move all selected plants by the same amount. '));
hm.addHint(PdHint.make('TMainForm', 'alignTops', 'Align top', 
  'Align the selected plants so that their top-most points match up. This button is disabled (gray) if only one plant is selected.'));
hm.addHint(PdHint.make('TMainForm', 'alignBottoms', 'Align bottom', 
  'Align the selected plants so that their lowest points match up. This button is disabled (gray) if only one plant is selected.'));
hm.addHint(PdHint.make('TMainForm', 'alignLeft', 'Align left', 
  'Align the selected plants so that their left-most points match up. This button is disabled (gray) if only one plant is selected.'));
hm.addHint(PdHint.make('TMainForm', 'alignRight', 'Align right', 
  'Align the selected plants so that their right-most points match up. This button is disabled (gray) if only one plant is selected.'));
hm.addHint(PdHint.make('TMainForm', 'makeEqualWidth', 'Equal width', 
  'Make all selected plants the same width. This button is disabled (gray) if only one plant is selected.'));
hm.addHint(PdHint.make('TMainForm', 'makeEqualHeight', 'Equal height', 
  'Make all selected plants the same height. This button is disabled (gray) if only one plant is selected.'));
hm.addHint(PdHint.make('TMainForm', 'posingHidePart', '(none)', 
  'Check this box to hide this plant part and all parts ''above'' it on the plant. Thus if this part is an internode halfway up a stem, checking this box will hide it and the rest of the stem. If this part is an inflorescence, hiding it will also hide all of' + ' its flowers. If this part is a flower or leaf, nothing but the part itself will be hidden since nothing else depends on it.'));
hm.addHint(PdHint.make('TMainForm', 'posingXRotationEdit', 'Pose X rotation', 
  'How far to rotate the selected posed plant part in the X direction. (This number will only be used if the check box above it is checked.)'));
hm.addHint(PdHint.make('TMainForm', 'posingYRotationEdit', 'Pose Y rotation', 
  'How far to rotate the selected posed plant part in the Y direction. (This number will only be used if the check box above it is checked.)'));
hm.addHint(PdHint.make('TMainForm', 'posingZRotationEdit', 'Pose Z rotation', 
  'How far to rotate the selected posed plant part in the Z direction. (This number will only be used if the check box above it is checked.)'));
hm.addHint(PdHint.make('TMainForm', 'posingAddExtraRotation', '(none)', 
  'Check this box to use the values below it to rotate this posed plant part.'));
hm.addHint(PdHint.make('TMainForm', 'posingMultiplyScale', '(none)', 
  'Check this box to use the values below it to scale this posed plant part.'));
hm.addHint(PdHint.make('TMainForm', 'posingMultiplyScaleAllPartsAfter', '(none)', 
  'Check this box to use the scaling values to scale not only this posed plant part, but all the plant parts above it until the end of that stem or flower or whatever depends on it. For example, if you are posing an internode and you check this box, ALL the ' + 'internodes up the branch attached to the posed internode will also use the scale multiplier and the whole stem will get longer.'));
hm.addHint(PdHint.make('TMainForm', 'posingScaleMultiplierEdit', 'Scale multiplier', 
  'By how much to multiply the scale of 3D objects (not lines) in this posed plant part. (This value will have no effect unless the check box above it is checked.)'));
hm.addHint(PdHint.make('TMainForm', 'posingLengthMultiplierEdit', 'Line length multiplier', 
  'By how much to multiply the length of lines in this posed plant part. (This value will have no effect unless the check box above it is checked.)'));
hm.addHint(PdHint.make('TMainForm', 'posingWidthMultiplierEdit', 'Line width multiplier', 
  'By how much to multiply the width of lines in this posed plant part. (This value will have no effect unless the check box above it is checked.)'));
hm.addHint(PdHint.make('TMainForm', 'sectionsComboBox', '(none)', 
  'The sections into which all the parameters that make up this plant are divided. Right-click to get help on the chosen parameter section.'));
hm.addHint(PdHint.make('TMainForm', 'posingChangeColors', '(none)', 
  'Check this box to use the color boxes below it to change this posed plant part''s colors.'));
hm.addHint(PdHint.make('TMainForm', 'posingChangeAllColorsAfter', '(none)', 
  'Check this box to use the colors below it to color not only this posed plant part, but all the plant parts above it until the end of that stem or flower or whatever depends on it. For example, if you are posing an internode and you turn on ''Change this p' + 'art''s colors'' AND you turn on ''and above'', ALL the internodes up the branch attached to the posed internode will also turn the posed color.'));
hm.addHint(PdHint.make('TMainForm', 'posingLineColor', '(none)', 
  'Click here to change the line color this posed plant part will take on for its lines. (This color will have no effect unless the check box above it is checked.)'));
hm.addHint(PdHint.make('TMainForm', 'posingFrontfaceColor', '(none)', 
  'Click here to change the front face color this posed plant part will take on for its 3D objects. (This color will have no effect unless the check box above it is checked.)'));
hm.addHint(PdHint.make('TMainForm', 'posingBackfaceColor', '(none)', 
  'Click here to change the back face color this posed plant part will take on for its 3D objects. (This color will have no effect unless the check box above it is checked.)'));
hm.addHint(PdHint.make('TMainForm', 'posingSelectionCursorMode', 'Posing selection mode', 
  'Switch to posing selection cursor mode, where you can choose plant parts for posing. To choose a plant part for posing, click on it (on the focused plant only). You cannot select plants in this mode; to select plants, change to select/drag mode or choose ' + 'another plant in the plant list. For help with posing, see the help system.'));
hm.addHint(PdHint.make('TMainForm', 'posedPlantParts', '(none)', 
  'This is a list of all the plant parts for the focused plant that have been posed. To see posing information on a plant part, choose it from this list or click on it in the plant drawing. You can use posing to prune, bend, and shape plants. See the help sy' + 'stem for details.'));
hm.addHint(PdHint.make('TMainForm', 'posingHighlight', 'Highlight posed parts', 
  'If this button is pushed in, all plant parts that have been posed will draw in a special color, and the selected plant part will draw in an even more special color. If this button is not pushed in, all plant parts will draw with their normal colors regard' + 'less of whether they are posed.'));
hm.addHint(PdHint.make('TMainForm', 'posingGhost', 'Ghost hidden parts', 
  'If this button is pushed in, all plant parts that have been hidden by posing will draw in a special ghosting color. If this button is not pushed in, all plant parts that have been hidden by posing will be invisible.'));
hm.addHint(PdHint.make('TMainForm', 'posingNotShown', 'Ignore all posing', 
  'If this button is pushed in, all plants will draw as if there was no posing. If this button is not pushed in, posing will appear as specified. BE CAREFUL with this button; only use it to temporarily see what posed plants would look like without posing.'));
hm.addHint(PdHint.make('TMainForm', 'posingPosePart', 'Pose', 
  'Pose the plant part shown here. A posed plant part can have special settings for visibility, size and rotation other than what it would normally have based on the plant''s parameters.'));
hm.addHint(PdHint.make('TMainForm', 'posingUnposePart', 'Unpose', 
  'Remove all special posing settings for the selected plant part. You can undo this.'));
hm.addHint(PdHint.make('TCustomDrawOptionsForm', 'helpButton', '(none)', 
  'Get help with setting custom draw options.'));
hm.addHint(PdHint.make('TCustomDrawOptionsForm', 'Close', '(none)', 
  'Close this window and save your changes to the draw options.'));
hm.addHint(PdHint.make('TCustomDrawOptionsForm', 'cancel', '(none)', 
  'Close this window without making any change to the draw options.'));
hm.addHint(PdHint.make('TCustomDrawOptionsForm', 'sortPolygons', '(none)', 
  'Check this box to sort the 3D object polygons in Z-order (distance from the front) before drawing. Uncheck this box to draw the polygons in their order on the plant. Sorting polygons takes a little longer but looks more realistic in most cases.'));
hm.addHint(PdHint.make('TCustomDrawOptionsForm', 'sortTdosAsOneItem', '(none)', 
  'Check this box to group polygons by 3D object when sorting polygons. This looks better, and takes longer, than not grouping by 3D object.'));
hm.addHint(PdHint.make('TCustomDrawOptionsForm', 'fillPolygons', '(none)', 
  'All the 3D objects used by this program are made up of triangular polygons. Check this box to fill all 3D object polygons. Uncheck it to draw the 3D objects as wire frame structures. '));
hm.addHint(PdHint.make('TCustomDrawOptionsForm', 'drawLinesBetweenPolygons', '(none)', 
  'Check this box to draw dark lines around each polygon. Uncheck this box to draw the 3D objects without lines between triangles.'));
hm.addHint(PdHint.make('TCustomDrawOptionsForm', 'lineContrastIndex', '(none)', 
  'Change this number to control how dark the lines are drawn between polygons. An index of one or two produces barely visible lines, and an index of ten produces nearly black lines.'));
hm.addHint(PdHint.make('TCustomDrawOptionsForm', 'draw3DObjects', '(none)', 
  'Check this box to draw all the plant structures that are represented by 3D objects: leaves, buds, flower petals, fruit sections, and root tops. If this option is turned off, you will see only stems (internodes), leaf stalks (petioles), and inflorescence s' + 'tructures.'));
hm.addHint(PdHint.make('TCustomDrawOptionsForm', 'drawStems', '(none)', 
  'Check this box to draw all the parts of the plant that are drawn using lines -- stems (internodes), leaf stalks (petioles) and inflorescence structures. If this box is unchecked, each plant''s 3D objects will appear to be floating in space.'));
hm.addHint(PdHint.make('TCustomDrawOptionsForm', 'draw3DObjectsAsBoundingRectsOnly', '(none)', 
  'Check this box to reduce all 3D objects to bounding box placeholders. Since drawing the 3D objects takes up about ninety percent of the drawing time, this speeds up drawing considerably, but it obscures the shapes of the 3D objects.'));
hm.addHint(PdHint.make('TPickTdoForm', 'grid', '(none)', 
  'These are all the 3D objects in the current library, whose name is shown below. The name of each 3D object appears as a hint above it. To choose another 3D object for this parameter for all selected plants, click on a 3D object here, then click OK or Appl' + 'y.'));
hm.addHint(PdHint.make('TPickTdoForm', 'Close', '(none)', 
  'Close this window and choose the 3D object selected here for this parameter for all selected plants. You can also choose a 3D object by double-clicking on it here.'));
hm.addHint(PdHint.make('TPickTdoForm', 'cancel', '(none)', 
  'Close this window without making any change to the 3D object you clicked on for this parameter.'));
hm.addHint(PdHint.make('TPickTdoForm', 'newTdo', '(none)', 
  'Make a new 3D object using the 3D object editor.'));
hm.addHint(PdHint.make('TPickTdoForm', 'fileChangedImage', 'File changed', 
  'This indicator shows whether you have made a change to the current 3D object library in this window. If this indicator is gray, the file has not been changed.'));
hm.addHint(PdHint.make('TPickTdoForm', 'libraryFileName', 'Current 3D object library', 
  'The 3D object library currently selected (and used by the whole program). 3D objects are used to draw plant leaves, buds, root tops, flower petals and fruit parts. To change the current 3D object library, click the ''Change'' button.'));
hm.addHint(PdHint.make('TPickTdoForm', 'apply', '(none)', 
  'Choose the 3D object selected here for this parameter for all selected plants -- without closing this window. You can use the Apply button to ''try out'' different 3D objects on your plants. To undo clicking Apply, click Cancel, then choose Undo from the ' + 'main window Edit menu.'));
hm.addHint(PdHint.make('TPickTdoForm', 'helpButton', '(none)', 
  'Get help on choosing a 3D object.'));
hm.addHint(PdHint.make('TPickTdoForm', 'sectionTdosChangeLibrary', '(none)', 
  'Choose a new 3D object library file. The new file you choose will become the ''current'' 3D object library and will also be used elsewhere in the program.'));
hm.addHint(PdHint.make('TPickTdoForm', 'editTdo', '(none)', 
  'Change the selected 3D object using the 3D object editor.'));
hm.addHint(PdHint.make('TPickTdoForm', 'mover', '(none)', 
  'Open the 3D object mover, where you can move 3D objects between libraries. If you need a 3D object that you have stored in another library, you can use the mover to get it now.'));
hm.addHint(PdHint.make('TPickTdoForm', 'copyTdo', '(none)', 
  'Copy the selected 3D object to make a new 3D object.'));
hm.addHint(PdHint.make('TPickTdoForm', 'deleteTdo', '(none)', 
  'Remove the selected 3D object from the current library.'));
hm.addHint(PdHint.make('TPickTdoForm', 'tdos', '(none)', 
  'These are all the 3D objects in the current library, whose name is shown below. To choose another 3D object for this parameter for all selected plants, choose a 3D object here, then click OK or Apply.'));
hm.addHint(PdHint.make('TMoverForm', 'leftPlantFileNameEdit', 'Plant file open on left side', 
  'The plant file that is open on the left side of the mover. All the plants in this plant file are shown in the list below. If no plant file name is shown here, click Open to open a plant file. If a plant file name is shown here, you must click Close before' + ' opening a new plant file on this side.'));
hm.addHint(PdHint.make('TMoverForm', 'leftOpenClose', '(none)', 
  'Open a plant file, or close the open plant file, on this side of the mover.'));
hm.addHint(PdHint.make('TMoverForm', 'rightPlantFileNameEdit', 'Plant file open on right side', 
  'The plant file that is open on the left side of the mover. All the plants in this plant file are shown in the list below. If no plant file name is shown here, click Open to open a plant file. If a plant file name is shown here, you must click Close before' + ' opening a new plant file on this side.'));
hm.addHint(PdHint.make('TMoverForm', 'rightOpenClose', '(none)', 
  'Open a plant file, or close the open plant file, on this side of the mover.'));
hm.addHint(PdHint.make('TMoverForm', 'newFile', '(none)', 
  'Create a new plant file with no plants in it.'));
hm.addHint(PdHint.make('TMoverForm', 'transfer', '(none)', 
  'Copy the selected plant(s) from the selected list to the other list.'));
hm.addHint(PdHint.make('TMoverForm', 'close', '(none)', 
  'Close the plant mover and return to the program. If you made changes to either plant file, you will be asked if you want to save your changes.'));
hm.addHint(PdHint.make('TMoverForm', 'previewImage', 'Preview', 
  'A preview picture of the focused plant in the selected list below.'));
hm.addHint(PdHint.make('TMoverForm', 'undo', '(none)', 
  'Undo the last action you did. This button works with the redo button just like undo/redo commands in a menu.'));
hm.addHint(PdHint.make('TMoverForm', 'redo', '(none)', 
  'Redo the first available action that was previously undone. This button works with the undo button just like undo/redo commands in a menu.'));
hm.addHint(PdHint.make('TMoverForm', 'cut', '(none)', 
  'Copy the selected plant(s) to the clipboard and delete them from the list. You can then paste the plants into this window (select a list to paste into, then click Paste), or you can close this window and paste the plants you copied into the main window.'));
hm.addHint(PdHint.make('TMoverForm', 'copy', '(none)', 
  'Copy the selected plant(s) to the clipboard. You can then paste the plants into this window (select a list to paste into, then click Paste), or you can close this window and paste the plants you copied into the main window.'));
hm.addHint(PdHint.make('TMoverForm', 'paste', '(none)', 
  'Paste any plants copied from either this window or the main window into the selected list.'));
hm.addHint(PdHint.make('TMoverForm', 'rename', '(none)', 
  'Change the name of the focused plant. For help with the distinction between the focused plant and other selected plants, see the help system.'));
hm.addHint(PdHint.make('TMoverForm', 'duplicate', '(none)', 
  'Make a copy of all the selected plants in the list.'));
hm.addHint(PdHint.make('TMoverForm', 'delete', '(none)', 
  'Remove the selected plants. You can undo the deletion by clicking the Undo button below.'));
hm.addHint(PdHint.make('TMoverForm', 'leftPlantFileChangedIndicator', 'File has changed', 
  'This indicator shows if you have made a change to the plant file on the left side of the mover. If this indicator is gray, the file has not been changed.'));
hm.addHint(PdHint.make('TMoverForm', 'rightPlantFileChangedIndicator', 'File has changed', 
  'This indicator shows if you have made a change to the plant file on the right side of the mover. If this indicator is gray, the file has not been changed.'));
hm.addHint(PdHint.make('TMoverForm', 'leftPlantList', '(none)', 
  'All the plants in the plant file loaded on the left side of the mover. Click the buttons in the middle to transfer these plants to the right-side plant file, and to cut/copy/paste them. **Only one file can be selected at a time.** Hold down the Shift key ' + 'and press the up or down arrow keys to move plants up and down in the list.'));
hm.addHint(PdHint.make('TMoverForm', 'rightPlantList', '(none)', 
  'All the plants in the plant file loaded on the right side of the mover. Click the buttons in the middle to transfer these plants to the left-side plant file, and to cut/copy/paste them. **Only one file can be selected at a time.** Hold down the Shift key ' + 'and press the up or down arrow keys to move plants up and down in the list.'));
hm.addHint(PdHint.make('TMoverForm', 'helpButton', '(none)', 
  'Get help with using the plant mover.'));
hm.addHint(PdHint.make('TBreedingOptionsForm', 'ok', '(none)', 
  'Close this window and save your changes to the breeding and time series options.'));
hm.addHint(PdHint.make('TBreedingOptionsForm', 'cancel', '(none)', 
  'Close this window and don''t save your changes to the breeding and time series options.'));
hm.addHint(PdHint.make('TBreedingOptionsForm', 'treatColorsAsNumbers', '(none)', 
  'Check this box to mutate and blend colors using their numerical values (so mutation strength and blending will affect them). Uncheck this box to treat colors as non-numeric parameters, using the choices above.'));
hm.addHint(PdHint.make('TBreedingOptionsForm', 'chooseTdosRandomly', '(none)', 
  'Check this box to breed 3D objects by choosing them randomly from all 3D objects available in the current 3D object library. Uncheck this box to treat 3D objects as non-numeric parameters, using the choices above.'));
hm.addHint(PdHint.make('TBreedingOptionsForm', 'currentTdoLibraryFileName', 'Current 3D object library', 
  'The 3D object library currently selected (and used by the whole program). 3D objects are used to draw plant leaves, buds, root tops, flower petals and fruit parts. To change the current 3D object library, click the ''Change'' button.'));
hm.addHint(PdHint.make('TBreedingOptionsForm', 'weightSlider', 'Relative weight of first parent', 
  'Click and drag here to change the weighting scheme for breeding. For breeding offspring, the mean value for each parameter (before it is mutated) is created by blending the parameter values of the two parents. This slider shows the relative weight of the ' + 'first parent. (The first parent is the first plant chosen in the main window or breeder.) For example, for a particular parameter, if the first parent''s value is 50 and the second parent''s value is 20, and the relative weight is 80 percent, the res' + 'ulting value will be (50 * 0.8) + (20 * 0.2) = 44.'));
hm.addHint(PdHint.make('TBreedingOptionsForm', 'weightSelectAll', '(none)', 
  'Select all the parameter sections in the list. Changing the blending weight (with the slider above the list) changes the weight for each selected parameter section. So, if you select all the sections and then change the blending weight, you are setting th' + 'e weight for all the sections.'));
hm.addHint(PdHint.make('TBreedingOptionsForm', 'weightSelectNone', '(none)', 
  'Deselect all the parameter sections in the list. After you deselect all the sections, you will not be able to change the blending weight of any sections until you select at least one section in the list.'));
hm.addHint(PdHint.make('TBreedingOptionsForm', 'weightSections', 'Parameter sections', 
  'The same parameter sections as are shown in the main window. Select one or more sections from this list, then change their blending weights using the slider above. '));
hm.addHint(PdHint.make('TBreedingOptionsForm', 'mutationSlider', 'Mutation strength', 
  'Click and drag here to change the mutation strength for breeding. For breeding offspring, new values for each parameter are randomly selected from a normal (bell-shaped) distribution around the mean value (from one or two parents). Mutation strength is ho' + 'w large the standard deviation of the normal distribution is, as a percentage of the mean. For example, if a parameter in the parent plant has the value of 50, and mutation strength is 50%, the standard deviation of the resulting distribution will be' + ' 25.'));
hm.addHint(PdHint.make('TBreedingOptionsForm', 'mutationSections', 'Parameter sections', 
  'The same parameter sections as are shown in the main window. Select one or more sections from this list, then change their mutation strengths using the slider above. '));
hm.addHint(PdHint.make('TBreedingOptionsForm', 'mutationSelectAll', '(none)', 
  'Select all the parameter sections in the list. Changing the mutation strength (with the slider above the list) changes the mutation strength for each selected parameter section. So, if you select all the sections and then change the mutation strength, you' + ' are setting the strength for all the sections.'));
hm.addHint(PdHint.make('TBreedingOptionsForm', 'mutationSelectNone', '(none)', 
  'Deselect all the parameter sections in the list. After you deselect all the sections, you will not be able to change the mutation strength of any sections until you select at least one section in the list.'));
hm.addHint(PdHint.make('TBreedingOptionsForm', 'alwaysCopyFromFirstPlant', '(none)', 
  'Check this radio button to always copy non-numeric parameters from the first parent chosen, ignoring the second parent. If there is only one parent, these choices do not apply.'));
hm.addHint(PdHint.make('TBreedingOptionsForm', 'alwaysCopyFromSecondPlant', '(none)', 
  'Check this radio button to always copy non-numeric parameters from the *second* parent chosen, ignoring the first parent. If there is only one parent, these choices do not apply.'));
hm.addHint(PdHint.make('TBreedingOptionsForm', 'copyRandomlyBasedOnWeights', '(none)', 
  'Check this radio button to copy non-numeric parameters from either the first or second parent randomly based the relative weights of each parent. For example, if you check this button and breed from two parents with a blending weight of 80/20, each parame' + 'ter will have an 80% chance of being copied from the first parent.'));
hm.addHint(PdHint.make('TBreedingOptionsForm', 'copyBasedOnWeightsIfEqualFirstPlant', '(none)', 
  'Check this radio button to copy non-numeric parameters from the parent with the higher weight without using probability. However, if the relative weights of both parents are equal (50/50), all non-numeric parameters should be copied from the first parent,' + ' ignoring the second parent.'));
hm.addHint(PdHint.make('TBreedingOptionsForm', 'copyBasedOnWeightsIfEqualSecondPlant', '(none)', 
  'Check this radio button to copy non-numeric parameters from the parent with the higher weight without using probability. However, if the relative weights of both parents are equal (50/50), all non-numeric parameters should be copied from the *second* pare' + 'nt, ignoring the first parent.'));
hm.addHint(PdHint.make('TBreedingOptionsForm', 'copyBasedOnWeightsIfEqualChooseRandomly', '(none)', 
  'Check this radio button to copy non-numeric parameters from the parent with the higher weight without using probability. However, if the relative weights of both parents are equal (50/50), the program should flip a coin (with a 50% probability) for each n' + 'on-numeric parameter to choose which parent to copy the parameter from. (If you are confused about these non-numeric options, choose this one. It will produce the most variation.)'));
hm.addHint(PdHint.make('TBreedingOptionsForm', 'helpButton', '(none)', 
  'Get help with changing breeding and time series options.'));
hm.addHint(PdHint.make('TBreedingOptionsForm', 'mutationShowSections', '(none)', 
  'Hide or show the parameter sections to choose mutation strengths for individual sections. If parameter sections are not showing, you are setting the mutation strength for all sections.'));
hm.addHint(PdHint.make('TBreedingOptionsForm', 'weightShowSections', '(none)', 
  'Hide or show the parameter sections to choose blending weights for individual sections. If parameter sections are not showing, you are setting the blending weight for all sections.'));
hm.addHint(PdHint.make('TBreedingOptionsForm', 'changeTdoLibrary', '(none)', 
  'Choose a new 3D object library file. The new file you choose will become the ''current'' 3D object library and will also be used elsewhere in the program.'));
hm.addHint(PdHint.make('TBreedingOptionsForm', 'thumbnailWidth', '(none)', 
  'How wide to draw plants in the breeder and time series window. You will probably want to choose a smaller width than height, since more plants grow tall than grow wide.'));
hm.addHint(PdHint.make('TBreedingOptionsForm', 'thumbnailHeight', '(none)', 
  'How tall to draw plants in the breeder and time series window. Your best setting for this width and height will depend on your available memory and the size of your screen.'));
hm.addHint(PdHint.make('TBreedingOptionsForm', 'plantsPerGeneration', '(none)', 
  'How many plants the breeder will create each time you breed a generation of offspring. If your computer memory is limited, you might not want to set this number too high.'));
hm.addHint(PdHint.make('TBreedingOptionsForm', 'maxGenerations', '(none)', 
  'The number of generations the breeder can hold. The breeder will not hold more generations than this number. To save memory, set this to a small number.'));
hm.addHint(PdHint.make('TBreedingOptionsForm', 'percentMaxAge', '(none)', 
  'How old the plants are drawn in the breeder, as a percentage of maximum plant age. Normally you will want to leave this at 100%. Choosing a smaller age percentage will usually make the breeder plants draw faster, though. Also, you may have a reason to bre' + 'ed plants based on how they look at an early age (if you want a particular seedling look, for example).'));
hm.addHint(PdHint.make('TBreedingOptionsForm', 'maxPartsPerPlant_thousands', '(none)', 
  'How many plant parts can be created on any plant (before the plant gives up and stops creating new parts). This limit is primarily for keeping breeder plants from growing out of control based on randomly mutated parameters. Changing this number will only ' + 'affect plants when they are regrown again after this option is changed.'));
hm.addHint(PdHint.make('TBreedingOptionsForm', 'numTimeSeriesStages', '(none)', 
  'The number of stages shown in a time series of different ages in a plant''s life cycle.'));
hm.addHint(PdHint.make('TBreedingOptionsForm', 'updateTimeSeriesPlantsOnParameterChange', '(none)', 
  'Check this box to regrow and redraw all plants in the time series window whenever you change a parameter for the corresponding plant in the main window (the plant the time series was made from). If your computer draws slowly you might want to turn this op' + 'tion off, but remember that time series plants won''t track your changes.'));
hm.addHint(PdHint.make('TBitmapOptionsForm', 'inchWidthEdit', '(none)', 
  'The width of the output picture in inches. The size in inches, size in pixels, and resolution (pixels per inch) all work together, so you can specify your picture size in either inches or pixels.'));
hm.addHint(PdHint.make('TBitmapOptionsForm', 'inchHeightEdit', '(none)', 
  'The height of the output picture in inches.'));
hm.addHint(PdHint.make('TBitmapOptionsForm', 'colorType', '(none)', 
  'Choose a color depth (number of colors in the image) to use to draw the selected picture. You can choose any color depth here, but some programs will not accept all color depths (from the clipboard or from a file). If your drawing program will not recogni' + 'ze picture output in one color depth, try another. Likewise with printers: some printers will not print with some color depths. Most programs and printers will be able to understand the 256-color (8-bit) color depth.'));
hm.addHint(PdHint.make('TBitmapOptionsForm', 'printSetup', '(none)', 
  'Change the current printer, or change printing options for the current printer.'));
hm.addHint(PdHint.make('TBitmapOptionsForm', 'printPreserveAspectRatio', '(none)', 
  'Check this box to keep the width / height ratio of the selected picture identical on the printed page. Uncheck this box to allow warping of the picture to fit any size on the printed page.'));
hm.addHint(PdHint.make('TBitmapOptionsForm', 'useSelectedPlants', '(none)', 
  'Draw only the selected plants into the output picture, using a magnification that will make them fit into the available picture size.'));
hm.addHint(PdHint.make('TBitmapOptionsForm', 'useAllPlants', '(none)', 
  'Draw all plants into the output picture -- including invisible plants -- using a magnification that will fit all the plants into the available picture size.'));
hm.addHint(PdHint.make('TBitmapOptionsForm', 'useDrawingAreaContents', '(none)', 
  'Fit the exact contents of the drawing area in the main window into the available picture size. This option is most useful if you want to get a zoomed-in picture of part of a plant.'));
hm.addHint(PdHint.make('TBitmapOptionsForm', 'useVisiblePlants', '(none)', 
  'Draw only visible plants into the output picture, using a magnification that will make them fit into the available picture size.'));
hm.addHint(PdHint.make('TBitmapOptionsForm', 'resolutionEdit', '(none)', 
  'The resolution of the output picture, in pixels per inch. You will probably want to set this output resolution to the resolution of the printer you will eventually use to print your image, either from this program or from your draw/paint program.'));
hm.addHint(PdHint.make('TBitmapOptionsForm', 'pixelWidthEdit', '(none)', 
  'The width of the output picture in pixels. The size in inches, size in pixels, and resolution (pixels per inch) all work together, so you can specify your picture size in either inches or pixels.'));
hm.addHint(PdHint.make('TBitmapOptionsForm', 'pixelHeightEdit', '(none)', 
  'The height of the output picture in pixels.'));
hm.addHint(PdHint.make('TBitmapOptionsForm', 'preserveAspectRatio', '(none)', 
  'Check this box to make the selected size boxes above conform to the aspect ratio (width / height) of the selected picture (whose width and height is shown above). Uncheck this box to allow any width and height to be input above. Warning: if you uncheck th' + 'is box and change the picture size, some parts of your picture may be cut off.'));
hm.addHint(PdHint.make('TBitmapOptionsForm', 'borders', '(none)', 
  'Change the settings for drawing borders around the printed picture.'));
hm.addHint(PdHint.make('TBitmapOptionsForm', 'printWidthEdit', '(none)', 
  'The width of the printed picture in inches. It is important to distinguish the two sizes shown here. The output size (in the Output options box above) is the size of the bitmap the selected plants will be drawn into. The print size (here) is the size of t' + 'he printed picture on paper. You can draw your output on the printer exactly as it comes out of the program, or you can stretch it to fit any size on the printer page. '));
hm.addHint(PdHint.make('TBitmapOptionsForm', 'printHeightEdit', '(none)', 
  'The height of the printed picture in inches.'));
hm.addHint(PdHint.make('TBitmapOptionsForm', 'printLeftMarginEdit', '(none)', 
  'The left margin of the printed picture on the page, in inches. You can set any of these margins lower than the allowable page margin of the printer (shown as gray lines on the preview picture). If the picture will no longer fit on the page as a result of ' + 'your change of margin, it will be shrunk to fit.'));
hm.addHint(PdHint.make('TBitmapOptionsForm', 'printTopMarginEdit', '(none)', 
  'The top margin of the printed picture on the page, in inches.'));
hm.addHint(PdHint.make('TBitmapOptionsForm', 'printRightMarginEdit', '(none)', 
  'The right margin of the printed picture on the page, in inches.'));
hm.addHint(PdHint.make('TBitmapOptionsForm', 'printBottomMarginEdit', '(none)', 
  'The bottom margin of the printed picture on the page, in inches.'));
hm.addHint(PdHint.make('TBitmapOptionsForm', 'printCenter', '(none)', 
  'Center the picture size on the printer page.'));
hm.addHint(PdHint.make('TBitmapOptionsForm', 'printUseWholePage', '(none)', 
  'Scale the printed picture size to fit the whole printer page (within allowable printer margins). If the ''Maintain aspect ratio'' checkbox is checked, the picture will only fill the page so far as the width / height ratio of the selected picture will allo' + 'w.'));
hm.addHint(PdHint.make('TBitmapOptionsForm', 'suggestPrintSize', '(none)', 
  'Using the size in pixels of the selected picture (as shown in the ''Selection'' text above) and the printer resolution (as shown in the ''Printer'' text above), calculate a printed picture size in inches that will draw all the pixels on the printed page. ' + 'This uses the printer''s drawing capabilities to create the best copy of what appears on the screen. Then center the drawing on the printed page.'));
hm.addHint(PdHint.make('TBitmapOptionsForm', 'printImagePanel', '(none)', 
  'This preview shows you what size and position your printed picture will have on the printer page.'));
hm.addHint(PdHint.make('TBitmapOptionsForm', 'wholePageImage', '(none)', 
  'This is a preview of the printer page. If there are gray lines at the edges of the preview picture, they mark the smallest margins allowed by the current printer. The lines are shown only as guides; you can print up to the edge of the page, even though th' + 'e printer will probably cut the picture off. The ''Center'', ''Suggest'', and ''Fill page'' buttons will respect these minimum margins; to set the margins lower, change the margin values in the margin edit boxes.'));
hm.addHint(PdHint.make('TBitmapOptionsForm', 'jpgCompressionEdit', '(none)', 
  'How much to compress this JPG output file. A value of 1 is minimum compression and best quality. A value of 100 is maximum compression and worst quality.'));
hm.addHint(PdHint.make('TGeneric3DOptionsForm', 'useSelectedPlants', '(none)', 
  'Draw only the selected plants into the 3D export file.'));
hm.addHint(PdHint.make('TGeneric3DOptionsForm', 'useVisiblePlants', '(none)', 
  'Draw only visible plants into the 3D export file. Be sure to check the estimated file size and to allow extra space beyond that.'));
hm.addHint(PdHint.make('TGeneric3DOptionsForm', 'useAllPlants', '(none)', 
  'Draw all plants into the 3D export file, including invisible plants. Be sure to check the estimated file size and to allow extra space beyond that.'));
hm.addHint(PdHint.make('TGeneric3DOptionsForm', 'translatePlantsToWindowPositions', '(none)', 
  'Check this box to place the chosen plants in roughly the same layout as you see them in the PlantStudio main window. Uncheck it to place all the plants at the same spot.'));
hm.addHint(PdHint.make('TGeneric3DOptionsForm', 'colorDXFFromRGB', '(none)', 
  'Colors are difficult to transmit through the DXF file format. Some 3D programs will read the color values this program uses (RGB colors), and some will not. Try this option first, and if the colors come out wrong, try another of the options below. If all ' + 'else fails, you can change the color in your 3D program after importing the DXF file.'));
hm.addHint(PdHint.make('TGeneric3DOptionsForm', 'colorDXFFromOneColor', '(none)', 
  'Write out only one color for the entire plant, using the color shown here. To change that color, click in the square. If your 3D program does not read this color correctly, change the color in your 3D program after you import the DXF file.'));
hm.addHint(PdHint.make('TGeneric3DOptionsForm', 'wholePlantColor', '(none)', 
  'Click here to change the color to use when writing out the entire plant with one color.'));
hm.addHint(PdHint.make('TGeneric3DOptionsForm', 'colorDXFFromPlantPartType', '(none)', 
  'Write out colors in the DXF file depending on which plant part type is being written out (leaves, flowers, etc). If you choose this option, the colors shown in the list below will be written out for each plant part type.'));
hm.addHint(PdHint.make('TGeneric3DOptionsForm', 'colorsByPlantPart', '(none)', 
  'The types of plant parts that will be written in the DXF file. If you choose to select different colors for each plant part type, you can change the colors used here by selecting one or more part types and clicking ''Set color''.'));
hm.addHint(PdHint.make('TGeneric3DOptionsForm', 'setPlantPartColor', '(none)', 
  'Choose a color for all plant part types selected in the list. You can also change individual part type colors by double-clicking on an item in the list.'));
hm.addHint(PdHint.make('TGeneric3DOptionsForm', 'minLineLengthToWrite', '(none)', 
  'The minimum line length required for any line (plant stem) to be written to the POV file. This prevents the POV-Ray renderer from returning errors due to zero-length lines. For most plants a minimum length of 0.01 mm is sufficient to prevent errors.'));
hm.addHint(PdHint.make('TGeneric3DOptionsForm', 'minTdoScaleToWrite', '(none)', 
  'The minimum scale required for any 3D object (leaf, flower, fruit) to be written to the POV file. This prevents the POV-Ray renderer from returning errors due to zero-size polygons. For most plants a minimum scale of 0.01 is sufficient to prevent errors.'));
hm.addHint(PdHint.make('TGeneric3DOptionsForm', 'nestLeafAndPetiole', '(none)', 
  'Check this box to lump each leaf together with its petiole (leaf stalk). Uncheck it to make each leaf independent of its petiole.'));
hm.addHint(PdHint.make('TGeneric3DOptionsForm', 'nestCompoundLeaf', '(none)', 
  'Check this box to lump each set of compound leaflets together to make one leaf structure. Uncheck it to make each leaflet independent of the rest of the leaf.'));
hm.addHint(PdHint.make('TGeneric3DOptionsForm', 'nestInflorescence', '(none)', 
  'Check this box to lump flowers or fruits together into inflorescence structures. Uncheck it to make each flower or fruit independent of its inflorescence.'));
hm.addHint(PdHint.make('TGeneric3DOptionsForm', 'nestPedicelAndFlowerFruit', '(none)', 
  'Check this box to lump each flower or fruit together with its pedicel (flower stalk). Uncheck it to make each flower or fruit independent of its pedicel.'));
hm.addHint(PdHint.make('TGeneric3DOptionsForm', 'nestFloralLayers', '(none)', 
  'Check this box to lump all the parts of each flower together. Uncheck it to separate the floral pistils and stamens from the layers of flower petals.'));
hm.addHint(PdHint.make('TGeneric3DOptionsForm', 'commentOutUnionAtEnd', '(none)', 
  'PlantStudio will write a union (grouping) of all the chosen plants at the end of the INC file so you can include them in your POV file without looking up their names. If you don''t want to use this feature, check this box to comment out the union.'));
hm.addHint(PdHint.make('TGeneric3DOptionsForm', 'layeringOption', '(none)', 
  'Most programs that import 3D files can handle polygons separated into different objects or groupings. These distinctions can be very useful for changing colors and textures. Depending on what you want to do with your 3D file and what your 3D program suppo' + 'rts, you may want more or less detail in your file. If you are not sure, the ''type of plant part'' option is usually best.'));
hm.addHint(PdHint.make('TGeneric3DOptionsForm', 'writeColors', '(none)', 
  'Check this box to include color information in your 3D file.'));
hm.addHint(PdHint.make('TGeneric3DOptionsForm', 'Close', '(none)', 
  'Save the chosen plant(s) to a 3D export file using the selected options.'));
hm.addHint(PdHint.make('TGeneric3DOptionsForm', 'cancel', '(none)', 
  'Close this window and don''t save any plants to a 3D export file.'));
hm.addHint(PdHint.make('TGeneric3DOptionsForm', 'helpButton', '(none)', 
  'Get help on exporting 3D files.'));
hm.addHint(PdHint.make('TGeneric3DOptionsForm', 'lengthOfShortName', '(none)', 
  'PlantStudio will cut off each plant''s name after this many letters when writing to this 3D format. Your best setting for this will depend on the 3D program you import the files to. Some programs can handle long names well, but others truncate them. If yo' + 'ur 3D program cannot read these files or has trouble distinguishing between plant parts based on names, try using a smaller number here.'));
hm.addHint(PdHint.make('TGeneric3DOptionsForm', 'stemCylinderFaces', '(none)', 
  'In PlantStudio we draw plant stems simply by drawing 2D lines on the screen. To export to most 3D formats we need to add three-dimensional depth, so we make the stems cylindrical by rotating a 2D rectangle around in a circle. Choose here how many sides yo' + 'ur cylinders will have. For square stems, choose four sides. For most plants, five sides looks best and is quickest.'));
hm.addHint(PdHint.make('TGeneric3DOptionsForm', 'dxfWriteColors', '(none)', 
  'Check this box to include color information in your 3D file.'));
hm.addHint(PdHint.make('TGeneric3DOptionsForm', 'xRotationBeforeDraw', '(none)', 
  'The number of degrees to rotate each plant during export to this 3D format. Use this rotation to correct any systematic differences between your 3D program and PlantStudio''s export.'));
hm.addHint(PdHint.make('TGeneric3DOptionsForm', 'writePlantNumberInFrontOfName', '(none)', 
  'Check this box to write in front of each plant''s name its number in the list of plants you have selected for export. This is not necessary, and even may cause problems if your 3D program doesn''t like a name starting with a number. But if on the other ha' + 'nd your 3D program requires unique names and your plant names are not all unique, this can help.'));
hm.addHint(PdHint.make('TGeneric3DOptionsForm', 'vrmlVersionRadioGroup', '(none)', 
  'Choose a version of VRML to write out. Make sure you choose the right version for your 3D program. If you are not sure which version to use, try them both and see which works better for you.'));
hm.addHint(PdHint.make('TGeneric3DOptionsForm', 'overallScalingFactor_pct', '(none)', 
  'An overall scaling factor to reconcile PlantStudio''s export with the import into your 3D program. Usually you will not need to change this number, but in some circumstances (if your plants come out huge or tiny), you can compensate with this scale.'));
hm.addHint(PdHint.make('TGeneric3DOptionsForm', 'pressPlants', '(none)', 
  'Check this box to flatten all exported plants in one dimension. This produces an effect like a 2D painting in 3D space. BE CAREFUL not to leave this option on by mistake, as you may be surprised to find a flat plant.'));
hm.addHint(PdHint.make('TGeneric3DOptionsForm', 'directionToPressPlants', '(none)', 
  'If you have chosen the option to flatten exported plants for a 2D-in-3D effect, this is the dimension in which the plants will be flattened. The correct dimension may differ depending on the export format and the reorienting rotation; try them all and see' + ' which is best for this particular format.'));
hm.addHint(PdHint.make('TGeneric3DOptionsForm', 'makeTrianglesDoubleSided', '(none)', 
  'Check this box to make all polygons in 3D objects double-sided during export. Only the front-face color will be used on both sides of the polygons. See the help system for details.'));
hm.addHint(PdHint.make('TWelcomeForm', 'hideWelcomeForm', 'Check this box to stop showing this window when you start PlantStudio.', 
  'Check this box to stop showing this window when you start PlantStudio.'));
hm.addHint(PdHint.make('TWelcomeForm', 'readQuickStartTipList', 'Click this choice to read a quick list of some things you need to know to get started with PlantStudio.', 
  'Click this choice to read a quick list of the some things you need to know to get started with PlantStudio. You can also get to the Super-Speed Tour through the Help menu.'));
hm.addHint(PdHint.make('TWelcomeForm', 'readTutorial', 'Click this choice to read the PlantStudio Tutorial, which will lead you through an exercise in using PlantStudio.', 
  'Click this choice to read the PlantStudio Tutorial, which will lead you through an exercise in using PlantStudio. You can also get to the tutorial through the Help menu.'));
hm.addHint(PdHint.make('TWelcomeForm', 'makeNewPlant', 'Click this choice to go straight to the New Plant Wizard and make your first plant.', 
  'Click this choice to go straight to the New Plant Wizard and make your first plant.'));
hm.addHint(PdHint.make('TWelcomeForm', 'openPlantLibrary', 'Click this choice to open one of the plant libraries included with PlantStudio.', 
  'Click this choice to open one of the plant libraries included with PlantStudio so you can look at some plants before you start making your own.'));
hm.addHint(PdHint.make('TWelcomeForm', 'startUsingProgram', 'Click this choice to start using PlantStudio right away.', 
  'Click this choice to start using PlantStudio right away. If you are starting PlantStudio for the first time, the PlantStudio window will be empty until you create a plant or open a file.'));
hm.addHint(PdHint.make('TNozzleOptionsForm', 'helpButton', '(none)', 
  'Get help on making nozzle or tube bitmaps.'));
hm.addHint(PdHint.make('TNozzleOptionsForm', 'Close', '(none)', 
  'Use these options to create a Painter nozzle or Paint Shop Pro tube bitmap file.'));
hm.addHint(PdHint.make('TNozzleOptionsForm', 'cancel', '(none)', 
  'Close this window and don''t make a nozzle/tube bitmap.'));
hm.addHint(PdHint.make('TNozzleOptionsForm', 'backgroundColorPanel', '(none)', 
  'Click here to change the background color for the nozzle or tube. You should choose a color that is not present in your plants so that you can make a selection in Painter or Paint Shop Pro based on all other colors. Black is usually a good choice.'));
hm.addHint(PdHint.make('TNozzleOptionsForm', 'resolutionEdit', '(none)', 
  'The resolution of the output picture, in pixels per inch.'));
hm.addHint(PdHint.make('TNozzleOptionsForm', 'colorType', '(none)', 
  'Choose a color depth (number of colors in the image) to use to draw the nozzle or tube. You should usually use 24-bit color.'));
hm.addHint(PdHint.make('TNozzleOptionsForm', 'useSelectedPlants', '(none)', 
  'Draw only the selected plants into the nozzle/tube bitmap.'));
hm.addHint(PdHint.make('TNozzleOptionsForm', 'useVisiblePlants', '(none)', 
  'Draw only visible plants into the nozzle/tube bitmap.'));
hm.addHint(PdHint.make('TNozzleOptionsForm', 'useAllPlants', '(none)', 
  'Draw all plants into the nozzle/tube bitmap, including invisible plants.'));
hm.addHint(PdHint.make('TAnimationFilesOptionsForm', 'helpButton', '(none)', 
  'Get help on making numbered animation files.'));
hm.addHint(PdHint.make('TAnimationFilesOptionsForm', 'Close', '(none)', 
  'Create the numbered animation bitmap files specified here for this plant.'));
hm.addHint(PdHint.make('TAnimationFilesOptionsForm', 'cancel', '(none)', 
  'Close this window and don''t make an animation.'));
hm.addHint(PdHint.make('TAnimationFilesOptionsForm', 'animateByAge', '(none)', 
  'Use different ages of the plant to create frames for the animation, so it looks like the plant is growing from a seedling to maturity.'));
hm.addHint(PdHint.make('TAnimationFilesOptionsForm', 'animateByXRotation', '(none)', 
  'Use different X rotations to create an animation of the plant, so it looks like the plant is spinning around.'));
hm.addHint(PdHint.make('TAnimationFilesOptionsForm', 'incrementEdit', '(none)', 
  'In each frame the plant will be this many days older, or this many degrees rotated more, than in the previous frame. In the case of age animation, we always add an extra frame at the end with the mature plant, in case the number of days doesn''t divide ev' + 'enly. In the case of rotation, the entire 360 degrees will be covered (give or take a degree).'));
hm.addHint(PdHint.make('TAnimationFilesOptionsForm', 'resolution', '(none)', 
  'The resolution of the output picture, in pixels per inch. Since you are creating multiple files here, don''t set the resolution too high. PlantStudio will check your hard disk space before starting to make sure the files will fit.'));
hm.addHint(PdHint.make('TAnimationFilesOptionsForm', 'colorType', '(none)', 
  'Choose a color depth (number of colors in the image) to use to draw the animation pictures. For animation files you should usually use 24-bit color.'));
hm.addHint(PdHint.make('TRegistrationForm', 'registrationNameEdit', '(none)', 
  'Type your registration name here exactly as you received it.'));
hm.addHint(PdHint.make('TRegistrationForm', 'registrationCodeEdit', '(none)', 
  'Type your registration code here exactly as you received it.'));
hm.addHint(PdHint.make('TRegistrationForm', 'orderPageEdit', '(none)', 
  'This is the web page where you can register PlantStudio.'));
hm.addHint(PdHint.make('TRegistrationForm', 'openBrowser', '(none)', 
  'Click here to open your internet browser to the registration web page shown here. If this doesn''t work and your browser doesn''t open, copy the web page and paste it into the address box of your internet browser by hand.'));
hm.addHint(PdHint.make('TRegistrationForm', 'close', '(none)', 
  'Close this window.'));
hm.addHint(PdHint.make('TRegistrationForm', 'readLicense', '(none)', 
  'Read the PlantStudio license.'));
hm.addHint(PdHint.make('TRegistrationForm', 'moreInfo', '(none)', 
  'Read some information about registering PlantStudio.'));
hm.addHint(PdHint.make('TRegistrationForm', 'registerMe', '(none)', 
  'After you have entered your registration name and code, click this button to register your copy of PlantStudio.'));
hm.addHint(PdHint.make('TRegistrationForm', 'PrintButton', '(none)', 
  'We highly recommend that you print the registration information that appears after you enter your registration name and code and click Register Me. Click here to print the information.'));
hm.addHint(PdHint.make('TUndoRedoListForm', 'OK', '(none)', 
  'Close this window and undo or redo all of the selected actions.'));
hm.addHint(PdHint.make('TUndoRedoListForm', 'cancel', '(none)', 
  'Close this window without undoing or redoing anything.'));
hm.addHint(PdHint.make('TUndoRedoListForm', 'helpButton', '(none)', 
  'Get help on using the undo/redo window.'));
hm.addHint(PdHint.make('TUndoRedoListForm', 'undoList', '(none)', 
  'Select some actions to undo. You can''t select out some actions to undo without undoing all those after them (because usually actions depend on other actions).'));
hm.addHint(PdHint.make('TUndoRedoListForm', 'redoList', '(none)', 
  'Select a number of actions to redo. You can''t select out some actions to redo without redoing all those before them (because usually actions depend on other actions).'));
end;

end.
