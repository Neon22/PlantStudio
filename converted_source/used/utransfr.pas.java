// unit utransfr
// DO NOT EDIT THIS FILE. It was generated by the pdutil program from Parameters.tab. 

from conversion_common import *;
import umath;
import utdo;
import uplant;
import uparams;
import ucollect;
import delphi_compatability;

// const
kGeneralLineDivisions = 1;
kGeneralRandomSway = 2;
kGeneralAgeAtMaturity = 4;
kGeneralGrowthSCurve = 5;
kGeneralAgeAtWhichFloweringStarts = 6;
kGeneralFractionReproductiveAllocationAtMaturity = 7;
kGeneralMaleFlowersAreSeparate = 8;
kGeneralIsDicot = 9;
kGeneralNumApicalInflors = 10;
kGeneralNumAxillaryInflors = 11;
kGeneralPhyllotacticRotationAngle = 12;
kGeneralStartingSeedForRandomNumberGenerator = 13;
kMeristemAndLeafArrangement = 15;
kMeristemBranchingIndex = 16;
kMeristemBranchingDistance = 17;
kMeristemSecondaryBranchingIsAllowed = 18;
kMeristemBranchingIsSympodial = 19;
kMeristemBranchingAngle = 20;
kMeristemDeterminateProbability = 21;
kAxillaryBudObject3D = 23;
kAxillaryBudScale = 24;
kAxillaryBudObject3DXRotationBeforeDraw = 25;
kAxillaryBudObject3DYRotationBeforeDraw = 26;
kAxillaryBudObject3DZRotationBeforeDraw = 27;
kAxillaryBudFaceColor = 28;
kAxillaryBudBackfaceColor = 29;
kInternodeFaceColor = 31;
kInternodeFirstInternodeCurvingIndex = 32;
kInternodeCurvingIndex = 33;
kInternodeLengthAtOptimalFinalBiomassAndExpansion_mm = 35;
kInternodeWidthAtOptimalFinalBiomassAndExpansion_mm = 36;
kInternodeOptimalFinalBiomass = 38;
kInternodeMinDaysToCreateInternode = 39;
kInternodeMaxDaysToCreateInternodeIfOverMinFraction = 40;
kInternodeMinFractionOfOptimalInitialBiomassToCreateInternode_frn = 41;
kInternodeCanRecoverFromStuntingDuringCreation = 42;
kInternodeMinDaysToAccumulateBiomass = 44;
kInternodeMaxDaysToAccumulateBiomass = 45;
kInternodeLengthMultiplierDueToBolting = 47;
kInternodeBoltingMinDaysToBolt = 48;
kLeafObject3D = 50;
kLeafScaleAtOptimalBiomass = 51;
kLeafObject3DXRotationBeforeDraw = 52;
kLeafObject3DYRotationBeforeDraw = 53;
kLeafObject3DZRotationBeforeDraw = 54;
kLeafFaceColor = 55;
kLeafBackfaceColor = 56;
kLeafCompoundNumLeaflets = 58;
kLeafCompoundPinnateOrPalmate = 59;
kLeafCompoundPinnateArrangement = 60;
kLeafCompoundRachisToPetioleRatio = 61;
kLeafCompoundBendAngleAtStart = 62;
kLeafCompoundBendAngleAtFullSize = 63;
kLeafPetioleAngle = 65;
kLeafPetioleColor = 66;
kLeafPetioleLengthAtOptimalBiomass_mm = 67;
kLeafPetioleWidthAtOptimalBiomass_mm = 68;
kLeafPetioleTaperIndex = 69;
kStipuleNumSections = 71;
kStipuleObject3D = 72;
kStipuleScaleAtOptimalLeafBiomass = 73;
kStipuleObject3DXRotationBeforeDraw = 74;
kStipuleObject3DYRotationBeforeDraw = 75;
kStipuleObject3DZRotationBeforeDraw = 76;
kStipuleFaceColor = 77;
kStipuleBackfaceColor = 78;
kStipuleAngleFromStem = 79;
kLeafOptimalBiomass = 81;
kLeafSCurve = 82;
kLeafOptimalFractionOfOptimalBiomassAtCreation_frn = 83;
kLeafMinDaysToGrow = 85;
kLeafMaxDaysToGrow = 86;
kSeedlingLeafObject3D = 88;
kSeedlingLeafScale = 89;
kSeedlingLeafObject3DXRotationBeforeDraw = 90;
kSeedlingLeafObject3DYRotationBeforeDraw = 91;
kSeedlingLeafObject3DZRotationBeforeDraw = 92;
kSeedlingLeafFaceColor = 93;
kSeedlingLeafBackfaceColor = 94;
kSeedlingLeafNodesOnStemWhenFallsOff = 96;
kFlowerNumPetalsFemale = 98;
kFlowerFemaleObject3D = 99;
kFlowerScaleAtFullSizeFemale = 100;
kFlowerFemaleObject3DXRotationBeforeDraw = 101;
kFlowerFemaleObject3DYRotationBeforeDraw = 102;
kFlowerFemaleObject3DZRotationBeforeDraw = 103;
kFlowerFemaleFaceColor = 104;
kFlowerFemaleBackfaceColor = 105;
kFlowerPetalsAreRadiallyArrangedFemale = 106;
kFlowerFemaleObject3DPullbackAngle = 107;
kFlowerOptimalBiomassFemale = 109;
kFlowerMinFractOptBiomassToOpenFlowerFemale = 110;
kFlowerMinFractionOfOptimalBiomassToCreateFruitFemale = 111;
kFlowerMinDaysToGrowFemale = 113;
kFlowerMaxDaysToGrowIfOverMinFractionFemale = 114;
kFlowerMinDaysBeforeOpeningFemale = 115;
kFlowerMinDaysBeforeSettingFruit = 116;
kFlowerDaysBeforeDropFemale = 117;
kInflorescenceNumFlowersOnMainBranchFemale = 119;
kInflorescenceNumFlowersPerBranchFemale = 120;
kInflorescenceNumBranchesFemale = 121;
kInflorescenceFemaleStalkColor = 122;
kInflorescenceFemalePedicelColor = 123;
kInflorescenceBranchesAreAlternateFemale = 124;
kInflorescenceBranchAngleFemale = 125;
kInflorescenceInternodeAngleFemale = 126;
kInflorescencePedicelAngleFemale = 127;
kInflorescencePeduncleAngleFromVegetativeStemFemale = 128;
kInflorescencePeduncleAngleFromVegetativeStemApicalFemale = 129;
kInflorescenceFlowersSpiralOnStemFemale = 130;
kInflorescenceIsHeadFemale = 131;
kInflorescenceTerminalStalkLengthFemale = 133;
kInflorescencePeduncleLengthFemale = 134;
kInflorescenceInternodeLengthFemale = 135;
kInflorescencePedicelLengthFemale = 136;
kInflorescenceInternodeWidthFemale = 137;
kInflorescencePedicelTaperIndexFemale = 138;
kInflorescenceIsTerminalFemale = 140;
kInflorescenceBiomassRequiredFemale = 141;
kInflorescenceMinFractOptBiomassToCreateFemale = 142;
kInflorescenceMinFractOptBiomassForFlowersFemale = 143;
kInflorescenceDaysToAllFlowersShowingFemale = 145;
kInflorescenceFlowersDrawTopToBottomFemale = 146;
kInflorescenceMinDaysToCreateInflorescenceFemale = 147;
kInflorescenceMaxDaysToCreateIfOverMinFractFemale = 148;
kInflorescenceMinDaysToGrowFemale = 149;
kInflorescenceMaxDaysToGrowFemale = 150;
kInflorescenceFemaleBractNumBracts = 152;
kInflorescenceFemaleBractObject3D = 153;
kInflorescenceFemaleBractScaleAtFullSize = 154;
kInflorescenceFemaleBractObject3DXRotationBeforeDraw = 155;
kInflorescenceFemaleBractObject3DYRotationBeforeDraw = 156;
kInflorescenceFemaleBractObject3DZRotationBeforeDraw = 157;
kInflorescenceFemaleBractFaceColor = 158;
kInflorescenceFemaleBractBackfaceColor = 159;
kInflorescenceFemaleBractsAreRadiallyArranged = 160;
kInflorescenceFemaleBractObject3DPullbackAngle = 161;
kFruitNumSections = 163;
kFruitObject3D = 164;
kFruitScaleAtFullSize = 165;
kFruitObject3DXRotationBeforeDraw = 166;
kFruitObject3DYRotationBeforeDraw = 167;
kFruitObject3DZRotationBeforeDraw = 168;
kFruitSectionsAreRadiallyArranged = 169;
kFruitUnripeFaceColor = 170;
kFruitUnripeBackfaceColor = 171;
kFruitRipeFaceColor = 172;
kFruitRipeBackfaceColor = 173;
kFruitOptimumMass_pctMPB = 175;
kFruitSCurve = 176;
kFruitMinDaysToGrow = 178;
kFruitMaxDaysToGrow = 179;
kFruitDaysToRipen = 180;
kRootTopShowsAboveGround = 182;
kRootTopObject3D = 183;
kRootTopScaleAtFullSize = 184;
kRootTopObject3DXRotationBeforeDraw = 185;
kRootTopObject3DYRotationBeforeDraw = 186;
kRootTopObject3DZRotationBeforeDraw = 187;
kRootTopFaceColor = 188;
kRootTopBackfaceColor = 189;
kStateAge = 190;
kStateBasePointX = 191;
kStateBasePointY = 192;
kStateDrawingScale = 193;
kStateHidden = 194;
kStateSelected = 195;
kStateRotationX = 196;
kStateRotationY = 197;
kStateRotationZ = 198;
kFlowerNumPetalsMale = 200;
kFlowerMaleObject3D = 201;
kFlowerScaleAtFullSizeMale = 202;
kFlowerMaleObject3DXRotationBeforeDraw = 203;
kFlowerMaleObject3DYRotationBeforeDraw = 204;
kFlowerMaleObject3DZRotationBeforeDraw = 205;
kFlowerMaleFaceColor = 206;
kFlowerMaleBackfaceColor = 207;
kFlowerPetalsAreRadiallyArrangedMale = 208;
kFlowerMaleObject3DPullbackAngle = 209;
kFlowerOptimalBiomassMale = 211;
kFlowerMinFractOptBiomassToOpenFlowerMale = 212;
kFlowerMinDaysToGrowMale = 214;
kFlowerMaxDaysToGrowIfOverMinFractionMale = 215;
kFlowerMinDaysBeforeOpeningMale = 216;
kFlowerDaysBeforeDropMale = 217;
kFlowerNumStamensMale = 219;
kFlowerFilamentLengthMale = 220;
kFlowerFilamentWidthMale = 221;
kFlowerFilamentTaperIndexMale = 222;
kFlowerFilamentColorMale = 223;
kFlowerAntherMaleObject3DPullbackAngle = 224;
kFlowerAntherNumSectionsMale = 225;
kFlowerMaleAntherObject3D = 226;
kFlowerAntherScaleAtFullSizeMale = 227;
kFlowerMaleAntherObject3DXRotationBeforeDraw = 228;
kFlowerMaleAntherObject3DYRotationBeforeDraw = 229;
kFlowerMaleAntherObject3DZRotationBeforeDraw = 230;
kFlowerAntherMaleFaceColor = 231;
kFlowerAntherMaleBackfaceColor = 232;
kFlowerAntherSectionsAreRadiallyArrangedMale = 233;
kFlowerSepalNumPetalsMale = 235;
kFlowerMaleSepalObject3D = 236;
kFlowerSepalScaleAtFullSizeMale = 237;
kFlowerMaleSepalObject3DXRotationBeforeDraw = 238;
kFlowerMaleSepalObject3DYRotationBeforeDraw = 239;
kFlowerMaleSepalObject3DZRotationBeforeDraw = 240;
kFlowerSepalMaleFaceColor = 241;
kFlowerSepalMaleBackfaceColor = 242;
kFlowerSepalPetalsAreRadiallyArrangedMale = 243;
kFlowerSepalMaleObject3DPullbackAngle = 244;
kFlowerMaleBudOption = 246;
kFlowerBudNumPetalsMale = 247;
kFlowerMaleBudObject3D = 248;
kFlowerBudScaleAtFullSizeMale = 249;
kFlowerMaleBudObject3DXRotationBeforeDraw = 250;
kFlowerMaleBudObject3DYRotationBeforeDraw = 251;
kFlowerMaleBudObject3DZRotationBeforeDraw = 252;
kFlowerBudMaleFaceColor = 253;
kFlowerBudMaleBackfaceColor = 254;
kFlowerBudPetalsAreRadiallyArrangedMale = 255;
kFlowerBudMaleObject3DPullbackAngle = 256;
kInflorescenceNumFlowersOnMainBranchMale = 258;
kInflorescenceNumFlowersPerBranchMale = 259;
kInflorescenceNumBranchesMale = 260;
kInflorescenceMaleStalkColor = 261;
kInflorescenceMalePedicelColor = 262;
kInflorescenceBranchesAreAlternateMale = 263;
kInflorescenceBranchAngleMale = 264;
kInflorescenceInternodeAngleMale = 265;
kInflorescencePedicelAngleMale = 266;
kInflorescencePeduncleAngleFromVegetativeStemMale = 267;
kInflorescencePeduncleAngleFromVegetativeStemApicalMale = 268;
kInflorescenceFlowersSpiralOnStemMale = 269;
kInflorescenceIsHeadMale = 270;
kInflorescenceTerminalStalkLengthMale = 272;
kInflorescencePeduncleLengthMale = 273;
kInflorescenceInternodeLengthMale = 274;
kInflorescencePedicelLengthMale = 275;
kInflorescenceInternodeWidthMale = 276;
kInflorescencePedicelTaperIndexMale = 277;
kInflorescenceIsTerminalMale = 279;
kInflorescenceBiomassRequiredMale = 280;
kInflorescenceMinFractOptBiomassToCreateMale = 281;
kInflorescenceMinFractOptBiomassForFlowersMale = 282;
kInflorescenceDaysToAllFlowersShowingMale = 284;
kInflorescenceFlowersDrawTopToBottomMale = 285;
kInflorescenceMinDaysToCreateInflorescenceMale = 286;
kInflorescenceMaxDaysToCreateIfOverMinFractMale = 287;
kInflorescenceMinDaysToGrowMale = 288;
kInflorescenceMaxDaysToGrowMale = 289;
kInflorescenceMaleBractNumBracts = 291;
kInflorescenceMaleBractObject3D = 292;
kInflorescenceMaleBractScaleAtFullSize = 293;
kInflorescenceMaleBractObject3DXRotationBeforeDraw = 294;
kInflorescenceMaleBractObject3DYRotationBeforeDraw = 295;
kInflorescenceMaleBractObject3DZRotationBeforeDraw = 296;
kInflorescenceMaleBractFaceColor = 297;
kInflorescenceMaleBractBackfaceColor = 298;
kInflorescenceMaleBractsAreRadiallyArranged = 299;
kInflorescenceMaleBractObject3DPullbackAngle = 300;
kFlowerNumPistilsFemale = 302;
kFlowerStyleLengthFemale = 303;
kFlowerStyleWidthFemale = 304;
kFlowerStyleTaperIndexFemale = 305;
kFlowerStigmaFemaleObject3DPullbackAngle = 306;
kFlowerStyleColorFemale = 307;
kFlowerStigmaNumSectionsFemale = 308;
kFlowerFemaleStigmaObject3D = 309;
kFlowerStigmaScaleAtFullSizeFemale = 310;
kFlowerFemaleStigmaObject3DXRotationBeforeDraw = 311;
kFlowerFemaleStigmaObject3DYRotationBeforeDraw = 312;
kFlowerFemaleStigmaObject3DZRotationBeforeDraw = 313;
kFlowerStigmaFemaleFaceColor = 314;
kFlowerStigmaFemaleBackfaceColor = 315;
kFlowerStigmaSectionsAreRadiallyArrangedFemale = 316;
kFlowerNumStamensFemale = 318;
kFlowerFilamentLengthFemale = 319;
kFlowerFilamentWidthFemale = 320;
kFlowerFilamentTaperIndexFemale = 321;
kFlowerFilamentColorFemale = 322;
kFlowerAntherFemaleObject3DPullbackAngle = 323;
kFlowerAntherNumSectionsFemale = 324;
kFlowerFemaleAntherObject3D = 325;
kFlowerAntherScaleAtFullSizeFemale = 326;
kFlowerFemaleAntherObject3DXRotationBeforeDraw = 327;
kFlowerFemaleAntherObject3DYRotationBeforeDraw = 328;
kFlowerFemaleAntherObject3DZRotationBeforeDraw = 329;
kFlowerAntherFemaleFaceColor = 330;
kFlowerAntherFemaleBackfaceColor = 331;
kFlowerAntherSectionsAreRadiallyArrangedFemale = 332;
kFlowerPetal2NumPetalsFemale = 334;
kFlowerFemalePetal2Object3D = 335;
kFlowerPetal2ScaleAtFullSizeFemale = 336;
kFlowerFemalePetal2Object3DXRotationBeforeDraw = 337;
kFlowerFemalePetal2Object3DYRotationBeforeDraw = 338;
kFlowerFemalePetal2Object3DZRotationBeforeDraw = 339;
kFlowerPetal2FemaleFaceColor = 340;
kFlowerPetal2FemaleBackfaceColor = 341;
kFlowerPetal2PetalsAreRadiallyArrangedFemale = 342;
kFlowerPetal2FemaleObject3DPullbackAngle = 343;
kFlowerPetal3NumPetalsFemale = 345;
kFlowerFemalePetal3Object3D = 346;
kFlowerPetal3ScaleAtFullSizeFemale = 347;
kFlowerFemalePetal3Object3DXRotationBeforeDraw = 348;
kFlowerFemalePetal3Object3DYRotationBeforeDraw = 349;
kFlowerFemalePetal3Object3DZRotationBeforeDraw = 350;
kFlowerPetal3FemaleFaceColor = 351;
kFlowerPetal3FemaleBackfaceColor = 352;
kFlowerPetal3PetalsAreRadiallyArrangedFemale = 353;
kFlowerPetal3FemaleObject3DPullbackAngle = 354;
kFlowerPetal4NumPetalsFemale = 356;
kFlowerFemalePetal4Object3D = 357;
kFlowerPetal4ScaleAtFullSizeFemale = 358;
kFlowerFemalePetal4Object3DXRotationBeforeDraw = 359;
kFlowerFemalePetal4Object3DYRotationBeforeDraw = 360;
kFlowerFemalePetal4Object3DZRotationBeforeDraw = 361;
kFlowerPetal4FemaleFaceColor = 362;
kFlowerPetal4FemaleBackfaceColor = 363;
kFlowerPetal4PetalsAreRadiallyArrangedFemale = 364;
kFlowerPetal4FemaleObject3DPullbackAngle = 365;
kFlowerPetal5NumPetalsFemale = 367;
kFlowerFemalePetal5Object3D = 368;
kFlowerPetal5ScaleAtFullSizeFemale = 369;
kFlowerFemalePetal5Object3DXRotationBeforeDraw = 370;
kFlowerFemalePetal5Object3DYRotationBeforeDraw = 371;
kFlowerFemalePetal5Object3DZRotationBeforeDraw = 372;
kFlowerPetal5FemaleFaceColor = 373;
kFlowerPetal5FemaleBackfaceColor = 374;
kFlowerPetal5PetalsAreRadiallyArrangedFemale = 375;
kFlowerPetal5FemaleObject3DPullbackAngle = 376;
kFlowerSepalNumPetalsFemale = 378;
kFlowerFemaleSepalObject3D = 379;
kFlowerSepalScaleAtFullSizeFemale = 380;
kFlowerFemaleSepalObject3DXRotationBeforeDraw = 381;
kFlowerFemaleSepalObject3DYRotationBeforeDraw = 382;
kFlowerFemaleSepalObject3DZRotationBeforeDraw = 383;
kFlowerSepalFemaleFaceColor = 384;
kFlowerSepalFemaleBackfaceColor = 385;
kFlowerSepalPetalsAreRadiallyArrangedFemale = 386;
kFlowerSepalFemaleObject3DPullbackAngle = 387;
kFlowerFemaleBudOption = 389;
kFlowerBudNumPetalsFemale = 390;
kFlowerFemaleBudObject3D = 391;
kFlowerBudScaleAtFullSizeFemale = 392;
kFlowerFemaleBudObject3DXRotationBeforeDraw = 393;
kFlowerFemaleBudObject3DYRotationBeforeDraw = 394;
kFlowerFemaleBudObject3DZRotationBeforeDraw = 395;
kFlowerBudFemaleFaceColor = 396;
kFlowerBudFemaleBackfaceColor = 397;
kFlowerBudPetalsAreRadiallyArrangedFemale = 398;
kFlowerBudFemaleObject3DPullbackAngle = 399;


public void Plant_directTransferField(TObject plantProxy, FIX_MISSING_ARG_TYPE v, short d, short fieldID, short ft, short index, TListCollection updateList) {
    PdPlant plant = new PdPlant();
    
    if (plantProxy == null) {
        throw new GeneralException.create("Plant_directTransferField: nil plant");
    }
    plant = (uplant.PdPlant)plantProxy;
    switch (fieldID) {
        case kGeneralLineDivisions:
            plant.pGeneral.lineDivisions, v = plant.MFD(plant.pGeneral.lineDivisions, v, ft, d);
            break;
        case kGeneralRandomSway:
            plant.pGeneral.randomSway, v = plant.MFD(plant.pGeneral.randomSway, v, ft, d);
            break;
        case kGeneralAgeAtMaturity:
            plant.pGeneral.ageAtMaturity, v = plant.MFD(plant.pGeneral.ageAtMaturity, v, ft, d);
            break;
        case kGeneralGrowthSCurve:
            v = umath.transferSCurveValue(d, plant.pGeneral.growthSCurve, index, v);
            break;
        case kGeneralAgeAtWhichFloweringStarts:
            plant.pGeneral.ageAtWhichFloweringStarts, v = plant.MFD(plant.pGeneral.ageAtWhichFloweringStarts, v, ft, d);
            break;
        case kGeneralFractionReproductiveAllocationAtMaturity:
            plant.pGeneral.fractionReproductiveAllocationAtMaturity_frn, v = plant.MFD(plant.pGeneral.fractionReproductiveAllocationAtMaturity_frn, v, ft, d);
            break;
        case kGeneralMaleFlowersAreSeparate:
            plant.pGeneral.maleFlowersAreSeparate, v = plant.MFD(plant.pGeneral.maleFlowersAreSeparate, v, ft, d);
            break;
        case kGeneralIsDicot:
            plant.pGeneral.isDicot, v = plant.MFD(plant.pGeneral.isDicot, v, ft, d);
            break;
        case kGeneralNumApicalInflors:
            plant.pGeneral.numApicalInflors, v = plant.MFD(plant.pGeneral.numApicalInflors, v, ft, d);
            break;
        case kGeneralNumAxillaryInflors:
            plant.pGeneral.numAxillaryInflors, v = plant.MFD(plant.pGeneral.numAxillaryInflors, v, ft, d);
            break;
        case kGeneralPhyllotacticRotationAngle:
            plant.pGeneral.phyllotacticRotationAngle, v = plant.MFD(plant.pGeneral.phyllotacticRotationAngle, v, ft, d);
            break;
        case kGeneralStartingSeedForRandomNumberGenerator:
            plant.pGeneral.startingSeedForRandomNumberGenerator, v = plant.MFD(plant.pGeneral.startingSeedForRandomNumberGenerator, v, ft, d);
            break;
        case kMeristemAndLeafArrangement:
            plant.pMeristem.branchingAndLeafArrangement, v = plant.MFD(plant.pMeristem.branchingAndLeafArrangement, v, ft, d);
            break;
        case kMeristemBranchingIndex:
            plant.pMeristem.branchingIndex, v = plant.MFD(plant.pMeristem.branchingIndex, v, ft, d);
            break;
        case kMeristemBranchingDistance:
            plant.pMeristem.branchingDistance, v = plant.MFD(plant.pMeristem.branchingDistance, v, ft, d);
            break;
        case kMeristemSecondaryBranchingIsAllowed:
            plant.pMeristem.secondaryBranchingIsAllowed, v = plant.MFD(plant.pMeristem.secondaryBranchingIsAllowed, v, ft, d);
            break;
        case kMeristemBranchingIsSympodial:
            plant.pMeristem.branchingIsSympodial, v = plant.MFD(plant.pMeristem.branchingIsSympodial, v, ft, d);
            break;
        case kMeristemBranchingAngle:
            plant.pMeristem.branchingAngle, v = plant.MFD(plant.pMeristem.branchingAngle, v, ft, d);
            break;
        case kMeristemDeterminateProbability:
            plant.pMeristem.determinateProbability, v = plant.MFD(plant.pMeristem.determinateProbability, v, ft, d);
            break;
        case kAxillaryBudObject3D:
            plant.transferObject3D(d, plant.pAxillaryBud.tdoParams.object3D, utdo.KfObject3D(v));
            break;
        case kAxillaryBudScale:
            plant.pAxillaryBud.tdoParams.scaleAtFullSize, v = plant.MFD(plant.pAxillaryBud.tdoParams.scaleAtFullSize, v, ft, d);
            break;
        case kAxillaryBudObject3DXRotationBeforeDraw:
            plant.pAxillaryBud.tdoParams.xRotationBeforeDraw, v = plant.MFD(plant.pAxillaryBud.tdoParams.xRotationBeforeDraw, v, ft, d);
            break;
        case kAxillaryBudObject3DYRotationBeforeDraw:
            plant.pAxillaryBud.tdoParams.yRotationBeforeDraw, v = plant.MFD(plant.pAxillaryBud.tdoParams.yRotationBeforeDraw, v, ft, d);
            break;
        case kAxillaryBudObject3DZRotationBeforeDraw:
            plant.pAxillaryBud.tdoParams.zRotationBeforeDraw, v = plant.MFD(plant.pAxillaryBud.tdoParams.zRotationBeforeDraw, v, ft, d);
            break;
        case kAxillaryBudFaceColor:
            plant.pAxillaryBud.tdoParams.faceColor, v = plant.MFD(plant.pAxillaryBud.tdoParams.faceColor, v, ft, d);
            break;
        case kAxillaryBudBackfaceColor:
            plant.pAxillaryBud.tdoParams.backfaceColor, v = plant.MFD(plant.pAxillaryBud.tdoParams.backfaceColor, v, ft, d);
            break;
        case kInternodeFaceColor:
            plant.pInternode.faceColor, v = plant.MFD(plant.pInternode.faceColor, v, ft, d);
            break;
        case kInternodeFirstInternodeCurvingIndex:
            plant.pInternode.firstInternodeCurvingIndex, v = plant.MFD(plant.pInternode.firstInternodeCurvingIndex, v, ft, d);
            break;
        case kInternodeCurvingIndex:
            plant.pInternode.curvingIndex, v = plant.MFD(plant.pInternode.curvingIndex, v, ft, d);
            break;
        case kInternodeLengthAtOptimalFinalBiomassAndExpansion_mm:
            plant.pInternode.lengthAtOptimalFinalBiomassAndExpansion_mm, v = plant.MFD(plant.pInternode.lengthAtOptimalFinalBiomassAndExpansion_mm, v, ft, d);
            break;
        case kInternodeWidthAtOptimalFinalBiomassAndExpansion_mm:
            plant.pInternode.widthAtOptimalFinalBiomassAndExpansion_mm, v = plant.MFD(plant.pInternode.widthAtOptimalFinalBiomassAndExpansion_mm, v, ft, d);
            break;
        case kInternodeOptimalFinalBiomass:
            plant.pInternode.optimalFinalBiomass_pctMPB, v = plant.MFD(plant.pInternode.optimalFinalBiomass_pctMPB, v, ft, d);
            break;
        case kInternodeMinDaysToCreateInternode:
            plant.pInternode.minDaysToCreateInternode, v = plant.MFD(plant.pInternode.minDaysToCreateInternode, v, ft, d);
            break;
        case kInternodeMaxDaysToCreateInternodeIfOverMinFraction:
            plant.pInternode.maxDaysToCreateInternodeIfOverMinFraction, v = plant.MFD(plant.pInternode.maxDaysToCreateInternodeIfOverMinFraction, v, ft, d);
            break;
        case kInternodeMinFractionOfOptimalInitialBiomassToCreateInternode_frn:
            plant.pInternode.minFractionOfOptimalInitialBiomassToCreateInternode_frn, v = plant.MFD(plant.pInternode.minFractionOfOptimalInitialBiomassToCreateInternode_frn, v, ft, d);
            break;
        case kInternodeCanRecoverFromStuntingDuringCreation:
            plant.pInternode.canRecoverFromStuntingDuringCreation, v = plant.MFD(plant.pInternode.canRecoverFromStuntingDuringCreation, v, ft, d);
            break;
        case kInternodeMinDaysToAccumulateBiomass:
            plant.pInternode.minDaysToAccumulateBiomass, v = plant.MFD(plant.pInternode.minDaysToAccumulateBiomass, v, ft, d);
            break;
        case kInternodeMaxDaysToAccumulateBiomass:
            plant.pInternode.maxDaysToAccumulateBiomass, v = plant.MFD(plant.pInternode.maxDaysToAccumulateBiomass, v, ft, d);
            break;
        case kInternodeLengthMultiplierDueToBolting:
            plant.pInternode.lengthMultiplierDueToBolting, v = plant.MFD(plant.pInternode.lengthMultiplierDueToBolting, v, ft, d);
            break;
        case kInternodeBoltingMinDaysToBolt:
            plant.pInternode.minDaysToBolt, v = plant.MFD(plant.pInternode.minDaysToBolt, v, ft, d);
            break;
        case kLeafObject3D:
            plant.transferObject3D(d, plant.pLeaf.leafTdoParams.object3D, utdo.KfObject3D(v));
            break;
        case kLeafScaleAtOptimalBiomass:
            plant.pLeaf.leafTdoParams.scaleAtFullSize, v = plant.MFD(plant.pLeaf.leafTdoParams.scaleAtFullSize, v, ft, d);
            break;
        case kLeafObject3DXRotationBeforeDraw:
            plant.pLeaf.leafTdoParams.xRotationBeforeDraw, v = plant.MFD(plant.pLeaf.leafTdoParams.xRotationBeforeDraw, v, ft, d);
            break;
        case kLeafObject3DYRotationBeforeDraw:
            plant.pLeaf.leafTdoParams.yRotationBeforeDraw, v = plant.MFD(plant.pLeaf.leafTdoParams.yRotationBeforeDraw, v, ft, d);
            break;
        case kLeafObject3DZRotationBeforeDraw:
            plant.pLeaf.leafTdoParams.zRotationBeforeDraw, v = plant.MFD(plant.pLeaf.leafTdoParams.zRotationBeforeDraw, v, ft, d);
            break;
        case kLeafFaceColor:
            plant.pLeaf.leafTdoParams.faceColor, v = plant.MFD(plant.pLeaf.leafTdoParams.faceColor, v, ft, d);
            break;
        case kLeafBackfaceColor:
            plant.pLeaf.leafTdoParams.backfaceColor, v = plant.MFD(plant.pLeaf.leafTdoParams.backfaceColor, v, ft, d);
            break;
        case kLeafCompoundNumLeaflets:
            plant.pLeaf.compoundNumLeaflets, v = plant.MFD(plant.pLeaf.compoundNumLeaflets, v, ft, d);
            break;
        case kLeafCompoundPinnateOrPalmate:
            plant.pLeaf.compoundPinnateOrPalmate, v = plant.MFD(plant.pLeaf.compoundPinnateOrPalmate, v, ft, d);
            break;
        case kLeafCompoundPinnateArrangement:
            plant.pLeaf.compoundPinnateLeafletArrangement, v = plant.MFD(plant.pLeaf.compoundPinnateLeafletArrangement, v, ft, d);
            break;
        case kLeafCompoundRachisToPetioleRatio:
            plant.pLeaf.compoundRachisToPetioleRatio, v = plant.MFD(plant.pLeaf.compoundRachisToPetioleRatio, v, ft, d);
            break;
        case kLeafCompoundBendAngleAtStart:
            plant.pLeaf.compoundCurveAngleAtStart, v = plant.MFD(plant.pLeaf.compoundCurveAngleAtStart, v, ft, d);
            break;
        case kLeafCompoundBendAngleAtFullSize:
            plant.pLeaf.compoundCurveAngleAtFullSize, v = plant.MFD(plant.pLeaf.compoundCurveAngleAtFullSize, v, ft, d);
            break;
        case kLeafPetioleAngle:
            plant.pLeaf.petioleAngle, v = plant.MFD(plant.pLeaf.petioleAngle, v, ft, d);
            break;
        case kLeafPetioleColor:
            plant.pLeaf.petioleColor, v = plant.MFD(plant.pLeaf.petioleColor, v, ft, d);
            break;
        case kLeafPetioleLengthAtOptimalBiomass_mm:
            plant.pLeaf.petioleLengthAtOptimalBiomass_mm, v = plant.MFD(plant.pLeaf.petioleLengthAtOptimalBiomass_mm, v, ft, d);
            break;
        case kLeafPetioleWidthAtOptimalBiomass_mm:
            plant.pLeaf.petioleWidthAtOptimalBiomass_mm, v = plant.MFD(plant.pLeaf.petioleWidthAtOptimalBiomass_mm, v, ft, d);
            break;
        case kLeafPetioleTaperIndex:
            plant.pLeaf.petioleTaperIndex, v = plant.MFD(plant.pLeaf.petioleTaperIndex, v, ft, d);
            break;
        case kStipuleNumSections:
            plant.pLeaf.stipuleTdoParams.repetitions, v = plant.MFD(plant.pLeaf.stipuleTdoParams.repetitions, v, ft, d);
            break;
        case kStipuleObject3D:
            plant.transferObject3D(d, plant.pLeaf.stipuleTdoParams.object3D, utdo.KfObject3D(v));
            break;
        case kStipuleScaleAtOptimalLeafBiomass:
            plant.pLeaf.stipuleTdoParams.scaleAtFullSize, v = plant.MFD(plant.pLeaf.stipuleTdoParams.scaleAtFullSize, v, ft, d);
            break;
        case kStipuleObject3DXRotationBeforeDraw:
            plant.pLeaf.stipuleTdoParams.xRotationBeforeDraw, v = plant.MFD(plant.pLeaf.stipuleTdoParams.xRotationBeforeDraw, v, ft, d);
            break;
        case kStipuleObject3DYRotationBeforeDraw:
            plant.pLeaf.stipuleTdoParams.yRotationBeforeDraw, v = plant.MFD(plant.pLeaf.stipuleTdoParams.yRotationBeforeDraw, v, ft, d);
            break;
        case kStipuleObject3DZRotationBeforeDraw:
            plant.pLeaf.stipuleTdoParams.zRotationBeforeDraw, v = plant.MFD(plant.pLeaf.stipuleTdoParams.zRotationBeforeDraw, v, ft, d);
            break;
        case kStipuleFaceColor:
            plant.pLeaf.stipuleTdoParams.faceColor, v = plant.MFD(plant.pLeaf.stipuleTdoParams.faceColor, v, ft, d);
            break;
        case kStipuleBackfaceColor:
            plant.pLeaf.stipuleTdoParams.backfaceColor, v = plant.MFD(plant.pLeaf.stipuleTdoParams.backfaceColor, v, ft, d);
            break;
        case kStipuleAngleFromStem:
            plant.pLeaf.stipuleTdoParams.pullBackAngle, v = plant.MFD(plant.pLeaf.stipuleTdoParams.pullBackAngle, v, ft, d);
            break;
        case kLeafOptimalBiomass:
            plant.pLeaf.optimalBiomass_pctMPB, v = plant.MFD(plant.pLeaf.optimalBiomass_pctMPB, v, ft, d);
            break;
        case kLeafSCurve:
            v = umath.transferSCurveValue(d, plant.pLeaf.sCurveParams, index, v);
            break;
        case kLeafOptimalFractionOfOptimalBiomassAtCreation_frn:
            plant.pLeaf.optimalFractionOfOptimalBiomassAtCreation_frn, v = plant.MFD(plant.pLeaf.optimalFractionOfOptimalBiomassAtCreation_frn, v, ft, d);
            break;
        case kLeafMinDaysToGrow:
            plant.pLeaf.minDaysToGrow, v = plant.MFD(plant.pLeaf.minDaysToGrow, v, ft, d);
            break;
        case kLeafMaxDaysToGrow:
            plant.pLeaf.maxDaysToGrow, v = plant.MFD(plant.pLeaf.maxDaysToGrow, v, ft, d);
            break;
        case kSeedlingLeafObject3D:
            plant.transferObject3D(d, plant.pSeedlingLeaf.leafTdoParams.object3D, utdo.KfObject3D(v));
            break;
        case kSeedlingLeafScale:
            plant.pSeedlingLeaf.leafTdoParams.scaleAtFullSize, v = plant.MFD(plant.pSeedlingLeaf.leafTdoParams.scaleAtFullSize, v, ft, d);
            break;
        case kSeedlingLeafObject3DXRotationBeforeDraw:
            plant.pSeedlingLeaf.leafTdoParams.xRotationBeforeDraw, v = plant.MFD(plant.pSeedlingLeaf.leafTdoParams.xRotationBeforeDraw, v, ft, d);
            break;
        case kSeedlingLeafObject3DYRotationBeforeDraw:
            plant.pSeedlingLeaf.leafTdoParams.yRotationBeforeDraw, v = plant.MFD(plant.pSeedlingLeaf.leafTdoParams.yRotationBeforeDraw, v, ft, d);
            break;
        case kSeedlingLeafObject3DZRotationBeforeDraw:
            plant.pSeedlingLeaf.leafTdoParams.zRotationBeforeDraw, v = plant.MFD(plant.pSeedlingLeaf.leafTdoParams.zRotationBeforeDraw, v, ft, d);
            break;
        case kSeedlingLeafFaceColor:
            plant.pSeedlingLeaf.leafTdoParams.faceColor, v = plant.MFD(plant.pSeedlingLeaf.leafTdoParams.faceColor, v, ft, d);
            break;
        case kSeedlingLeafBackfaceColor:
            plant.pSeedlingLeaf.leafTdoParams.backfaceColor, v = plant.MFD(plant.pSeedlingLeaf.leafTdoParams.backfaceColor, v, ft, d);
            break;
        case kSeedlingLeafNodesOnStemWhenFallsOff:
            plant.pSeedlingLeaf.nodesOnStemWhenFallsOff, v = plant.MFD(plant.pSeedlingLeaf.nodesOnStemWhenFallsOff, v, ft, d);
            break;
        case kFlowerNumPetalsFemale:
            plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kFirstPetals].repetitions, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kFirstPetals].repetitions, v, ft, d);
            break;
        case kFlowerFemaleObject3D:
            plant.transferObject3D(d, plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kFirstPetals].object3D, utdo.KfObject3D(v));
            break;
        case kFlowerScaleAtFullSizeFemale:
            plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kFirstPetals].scaleAtFullSize, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kFirstPetals].scaleAtFullSize, v, ft, d);
            break;
        case kFlowerFemaleObject3DXRotationBeforeDraw:
            plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kFirstPetals].xRotationBeforeDraw, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kFirstPetals].xRotationBeforeDraw, v, ft, d);
            break;
        case kFlowerFemaleObject3DYRotationBeforeDraw:
            plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kFirstPetals].yRotationBeforeDraw, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kFirstPetals].yRotationBeforeDraw, v, ft, d);
            break;
        case kFlowerFemaleObject3DZRotationBeforeDraw:
            plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kFirstPetals].zRotationBeforeDraw, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kFirstPetals].zRotationBeforeDraw, v, ft, d);
            break;
        case kFlowerFemaleFaceColor:
            plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kFirstPetals].faceColor, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kFirstPetals].faceColor, v, ft, d);
            break;
        case kFlowerFemaleBackfaceColor:
            plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kFirstPetals].backfaceColor, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kFirstPetals].backfaceColor, v, ft, d);
            break;
        case kFlowerPetalsAreRadiallyArrangedFemale:
            plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kFirstPetals].radiallyArranged, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kFirstPetals].radiallyArranged, v, ft, d);
            break;
        case kFlowerFemaleObject3DPullbackAngle:
            plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kFirstPetals].pullBackAngle, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kFirstPetals].pullBackAngle, v, ft, d);
            break;
        case kFlowerOptimalBiomassFemale:
            plant.pFlower[uplant.kGenderFemale].optimalBiomass_pctMPB, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].optimalBiomass_pctMPB, v, ft, d);
            break;
        case kFlowerMinFractOptBiomassToOpenFlowerFemale:
            plant.pFlower[uplant.kGenderFemale].minFractionOfOptimalBiomassToOpenFlower_frn, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].minFractionOfOptimalBiomassToOpenFlower_frn, v, ft, d);
            break;
        case kFlowerMinFractionOfOptimalBiomassToCreateFruitFemale:
            plant.pFlower[uplant.kGenderFemale].minFractionOfOptimalBiomassToCreateFruit_frn, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].minFractionOfOptimalBiomassToCreateFruit_frn, v, ft, d);
            break;
        case kFlowerMinDaysToGrowFemale:
            plant.pFlower[uplant.kGenderFemale].minDaysToGrow, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].minDaysToGrow, v, ft, d);
            break;
        case kFlowerMaxDaysToGrowIfOverMinFractionFemale:
            plant.pFlower[uplant.kGenderFemale].maxDaysToGrowIfOverMinFraction, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].maxDaysToGrowIfOverMinFraction, v, ft, d);
            break;
        case kFlowerMinDaysBeforeOpeningFemale:
            plant.pFlower[uplant.kGenderFemale].minDaysToOpenFlower, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].minDaysToOpenFlower, v, ft, d);
            break;
        case kFlowerMinDaysBeforeSettingFruit:
            plant.pFlower[uplant.kGenderFemale].minDaysBeforeSettingFruit, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].minDaysBeforeSettingFruit, v, ft, d);
            break;
        case kFlowerDaysBeforeDropFemale:
            plant.pFlower[uplant.kGenderFemale].daysBeforeDrop, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].daysBeforeDrop, v, ft, d);
            break;
        case kInflorescenceNumFlowersOnMainBranchFemale:
            plant.pInflor[uplant.kGenderFemale].numFlowersOnMainBranch, v = plant.MFD(plant.pInflor[uplant.kGenderFemale].numFlowersOnMainBranch, v, ft, d);
            break;
        case kInflorescenceNumFlowersPerBranchFemale:
            plant.pInflor[uplant.kGenderFemale].numFlowersPerBranch, v = plant.MFD(plant.pInflor[uplant.kGenderFemale].numFlowersPerBranch, v, ft, d);
            break;
        case kInflorescenceNumBranchesFemale:
            plant.pInflor[uplant.kGenderFemale].numBranches, v = plant.MFD(plant.pInflor[uplant.kGenderFemale].numBranches, v, ft, d);
            break;
        case kInflorescenceFemaleStalkColor:
            plant.pInflor[uplant.kGenderFemale].stalkColor, v = plant.MFD(plant.pInflor[uplant.kGenderFemale].stalkColor, v, ft, d);
            break;
        case kInflorescenceFemalePedicelColor:
            plant.pInflor[uplant.kGenderFemale].pedicelColor, v = plant.MFD(plant.pInflor[uplant.kGenderFemale].pedicelColor, v, ft, d);
            break;
        case kInflorescenceBranchesAreAlternateFemale:
            plant.pInflor[uplant.kGenderFemale].branchesAreAlternate, v = plant.MFD(plant.pInflor[uplant.kGenderFemale].branchesAreAlternate, v, ft, d);
            break;
        case kInflorescenceBranchAngleFemale:
            plant.pInflor[uplant.kGenderFemale].branchAngle, v = plant.MFD(plant.pInflor[uplant.kGenderFemale].branchAngle, v, ft, d);
            break;
        case kInflorescenceInternodeAngleFemale:
            plant.pInflor[uplant.kGenderFemale].angleBetweenInternodes, v = plant.MFD(plant.pInflor[uplant.kGenderFemale].angleBetweenInternodes, v, ft, d);
            break;
        case kInflorescencePedicelAngleFemale:
            plant.pInflor[uplant.kGenderFemale].pedicelAngle, v = plant.MFD(plant.pInflor[uplant.kGenderFemale].pedicelAngle, v, ft, d);
            break;
        case kInflorescencePeduncleAngleFromVegetativeStemFemale:
            plant.pInflor[uplant.kGenderFemale].peduncleAngleFromVegetativeStem, v = plant.MFD(plant.pInflor[uplant.kGenderFemale].peduncleAngleFromVegetativeStem, v, ft, d);
            break;
        case kInflorescencePeduncleAngleFromVegetativeStemApicalFemale:
            plant.pInflor[uplant.kGenderFemale].apicalStalkAngleFromVegetativeStem, v = plant.MFD(plant.pInflor[uplant.kGenderFemale].apicalStalkAngleFromVegetativeStem, v, ft, d);
            break;
        case kInflorescenceFlowersSpiralOnStemFemale:
            plant.pInflor[uplant.kGenderFemale].flowersSpiralOnStem, v = plant.MFD(plant.pInflor[uplant.kGenderFemale].flowersSpiralOnStem, v, ft, d);
            break;
        case kInflorescenceIsHeadFemale:
            plant.pInflor[uplant.kGenderFemale].isHead, v = plant.MFD(plant.pInflor[uplant.kGenderFemale].isHead, v, ft, d);
            break;
        case kInflorescenceTerminalStalkLengthFemale:
            plant.pInflor[uplant.kGenderFemale].terminalStalkLength_mm, v = plant.MFD(plant.pInflor[uplant.kGenderFemale].terminalStalkLength_mm, v, ft, d);
            break;
        case kInflorescencePeduncleLengthFemale:
            plant.pInflor[uplant.kGenderFemale].peduncleLength_mm, v = plant.MFD(plant.pInflor[uplant.kGenderFemale].peduncleLength_mm, v, ft, d);
            break;
        case kInflorescenceInternodeLengthFemale:
            plant.pInflor[uplant.kGenderFemale].internodeLength_mm, v = plant.MFD(plant.pInflor[uplant.kGenderFemale].internodeLength_mm, v, ft, d);
            break;
        case kInflorescencePedicelLengthFemale:
            plant.pInflor[uplant.kGenderFemale].pedicelLength_mm, v = plant.MFD(plant.pInflor[uplant.kGenderFemale].pedicelLength_mm, v, ft, d);
            break;
        case kInflorescenceInternodeWidthFemale:
            plant.pInflor[uplant.kGenderFemale].internodeWidth_mm, v = plant.MFD(plant.pInflor[uplant.kGenderFemale].internodeWidth_mm, v, ft, d);
            break;
        case kInflorescencePedicelTaperIndexFemale:
            plant.pInflor[uplant.kGenderFemale].pedicelTaperIndex, v = plant.MFD(plant.pInflor[uplant.kGenderFemale].pedicelTaperIndex, v, ft, d);
            break;
        case kInflorescenceIsTerminalFemale:
            plant.pInflor[uplant.kGenderFemale].isTerminal, v = plant.MFD(plant.pInflor[uplant.kGenderFemale].isTerminal, v, ft, d);
            break;
        case kInflorescenceBiomassRequiredFemale:
            plant.pInflor[uplant.kGenderFemale].optimalBiomass_pctMPB, v = plant.MFD(plant.pInflor[uplant.kGenderFemale].optimalBiomass_pctMPB, v, ft, d);
            break;
        case kInflorescenceMinFractOptBiomassToCreateFemale:
            plant.pInflor[uplant.kGenderFemale].minFractionOfOptimalBiomassToCreateInflorescence_frn, v = plant.MFD(plant.pInflor[uplant.kGenderFemale].minFractionOfOptimalBiomassToCreateInflorescence_frn, v, ft, d);
            break;
        case kInflorescenceMinFractOptBiomassForFlowersFemale:
            plant.pInflor[uplant.kGenderFemale].minFractionOfOptimalBiomassToMakeFlowers_frn, v = plant.MFD(plant.pInflor[uplant.kGenderFemale].minFractionOfOptimalBiomassToMakeFlowers_frn, v, ft, d);
            break;
        case kInflorescenceDaysToAllFlowersShowingFemale:
            plant.pInflor[uplant.kGenderFemale].daysToAllFlowersCreated, v = plant.MFD(plant.pInflor[uplant.kGenderFemale].daysToAllFlowersCreated, v, ft, d);
            break;
        case kInflorescenceFlowersDrawTopToBottomFemale:
            plant.pInflor[uplant.kGenderFemale].flowersDrawTopToBottom, v = plant.MFD(plant.pInflor[uplant.kGenderFemale].flowersDrawTopToBottom, v, ft, d);
            break;
        case kInflorescenceMinDaysToCreateInflorescenceFemale:
            plant.pInflor[uplant.kGenderFemale].minDaysToCreateInflorescence, v = plant.MFD(plant.pInflor[uplant.kGenderFemale].minDaysToCreateInflorescence, v, ft, d);
            break;
        case kInflorescenceMaxDaysToCreateIfOverMinFractFemale:
            plant.pInflor[uplant.kGenderFemale].maxDaysToCreateInflorescenceIfOverMinFraction, v = plant.MFD(plant.pInflor[uplant.kGenderFemale].maxDaysToCreateInflorescenceIfOverMinFraction, v, ft, d);
            break;
        case kInflorescenceMinDaysToGrowFemale:
            plant.pInflor[uplant.kGenderFemale].minDaysToGrow, v = plant.MFD(plant.pInflor[uplant.kGenderFemale].minDaysToGrow, v, ft, d);
            break;
        case kInflorescenceMaxDaysToGrowFemale:
            plant.pInflor[uplant.kGenderFemale].maxDaysToGrow, v = plant.MFD(plant.pInflor[uplant.kGenderFemale].maxDaysToGrow, v, ft, d);
            break;
        case kInflorescenceFemaleBractNumBracts:
            plant.pInflor[uplant.kGenderFemale].bractTdoParams.repetitions, v = plant.MFD(plant.pInflor[uplant.kGenderFemale].bractTdoParams.repetitions, v, ft, d);
            break;
        case kInflorescenceFemaleBractObject3D:
            plant.transferObject3D(d, plant.pInflor[uplant.kGenderFemale].bractTdoParams.object3D, utdo.KfObject3D(v));
            break;
        case kInflorescenceFemaleBractScaleAtFullSize:
            plant.pInflor[uplant.kGenderFemale].bractTdoParams.scaleAtFullSize, v = plant.MFD(plant.pInflor[uplant.kGenderFemale].bractTdoParams.scaleAtFullSize, v, ft, d);
            break;
        case kInflorescenceFemaleBractObject3DXRotationBeforeDraw:
            plant.pInflor[uplant.kGenderFemale].bractTdoParams.xRotationBeforeDraw, v = plant.MFD(plant.pInflor[uplant.kGenderFemale].bractTdoParams.xRotationBeforeDraw, v, ft, d);
            break;
        case kInflorescenceFemaleBractObject3DYRotationBeforeDraw:
            plant.pInflor[uplant.kGenderFemale].bractTdoParams.yRotationBeforeDraw, v = plant.MFD(plant.pInflor[uplant.kGenderFemale].bractTdoParams.yRotationBeforeDraw, v, ft, d);
            break;
        case kInflorescenceFemaleBractObject3DZRotationBeforeDraw:
            plant.pInflor[uplant.kGenderFemale].bractTdoParams.zRotationBeforeDraw, v = plant.MFD(plant.pInflor[uplant.kGenderFemale].bractTdoParams.zRotationBeforeDraw, v, ft, d);
            break;
        case kInflorescenceFemaleBractFaceColor:
            plant.pInflor[uplant.kGenderFemale].bractTdoParams.faceColor, v = plant.MFD(plant.pInflor[uplant.kGenderFemale].bractTdoParams.faceColor, v, ft, d);
            break;
        case kInflorescenceFemaleBractBackfaceColor:
            plant.pInflor[uplant.kGenderFemale].bractTdoParams.backfaceColor, v = plant.MFD(plant.pInflor[uplant.kGenderFemale].bractTdoParams.backfaceColor, v, ft, d);
            break;
        case kInflorescenceFemaleBractsAreRadiallyArranged:
            plant.pInflor[uplant.kGenderFemale].bractTdoParams.radiallyArranged, v = plant.MFD(plant.pInflor[uplant.kGenderFemale].bractTdoParams.radiallyArranged, v, ft, d);
            break;
        case kInflorescenceFemaleBractObject3DPullbackAngle:
            plant.pInflor[uplant.kGenderFemale].bractTdoParams.pullBackAngle, v = plant.MFD(plant.pInflor[uplant.kGenderFemale].bractTdoParams.pullBackAngle, v, ft, d);
            break;
        case kFruitNumSections:
            plant.pFruit.tdoParams.repetitions, v = plant.MFD(plant.pFruit.tdoParams.repetitions, v, ft, d);
            break;
        case kFruitObject3D:
            plant.transferObject3D(d, plant.pFruit.tdoParams.object3D, utdo.KfObject3D(v));
            break;
        case kFruitScaleAtFullSize:
            plant.pFruit.tdoParams.scaleAtFullSize, v = plant.MFD(plant.pFruit.tdoParams.scaleAtFullSize, v, ft, d);
            break;
        case kFruitObject3DXRotationBeforeDraw:
            plant.pFruit.tdoParams.xRotationBeforeDraw, v = plant.MFD(plant.pFruit.tdoParams.xRotationBeforeDraw, v, ft, d);
            break;
        case kFruitObject3DYRotationBeforeDraw:
            plant.pFruit.tdoParams.yRotationBeforeDraw, v = plant.MFD(plant.pFruit.tdoParams.yRotationBeforeDraw, v, ft, d);
            break;
        case kFruitObject3DZRotationBeforeDraw:
            plant.pFruit.tdoParams.zRotationBeforeDraw, v = plant.MFD(plant.pFruit.tdoParams.zRotationBeforeDraw, v, ft, d);
            break;
        case kFruitSectionsAreRadiallyArranged:
            plant.pFruit.tdoParams.radiallyArranged, v = plant.MFD(plant.pFruit.tdoParams.radiallyArranged, v, ft, d);
            break;
        case kFruitUnripeFaceColor:
            plant.pFruit.tdoParams.alternateFaceColor, v = plant.MFD(plant.pFruit.tdoParams.alternateFaceColor, v, ft, d);
            break;
        case kFruitUnripeBackfaceColor:
            plant.pFruit.tdoParams.alternateBackfaceColor, v = plant.MFD(plant.pFruit.tdoParams.alternateBackfaceColor, v, ft, d);
            break;
        case kFruitRipeFaceColor:
            plant.pFruit.tdoParams.faceColor, v = plant.MFD(plant.pFruit.tdoParams.faceColor, v, ft, d);
            break;
        case kFruitRipeBackfaceColor:
            plant.pFruit.tdoParams.backfaceColor, v = plant.MFD(plant.pFruit.tdoParams.backfaceColor, v, ft, d);
            break;
        case kFruitOptimumMass_pctMPB:
            plant.pFruit.optimalBiomass_pctMPB, v = plant.MFD(plant.pFruit.optimalBiomass_pctMPB, v, ft, d);
            break;
        case kFruitSCurve:
            v = umath.transferSCurveValue(d, plant.pFruit.sCurveParams, index, v);
            break;
        case kFruitMinDaysToGrow:
            plant.pFruit.minDaysToGrow, v = plant.MFD(plant.pFruit.minDaysToGrow, v, ft, d);
            break;
        case kFruitMaxDaysToGrow:
            plant.pFruit.maxDaysToGrow, v = plant.MFD(plant.pFruit.maxDaysToGrow, v, ft, d);
            break;
        case kFruitDaysToRipen:
            plant.pFruit.daysToRipen, v = plant.MFD(plant.pFruit.daysToRipen, v, ft, d);
            break;
        case kRootTopShowsAboveGround:
            plant.pRoot.showsAboveGround, v = plant.MFD(plant.pRoot.showsAboveGround, v, ft, d);
            break;
        case kRootTopObject3D:
            plant.transferObject3D(d, plant.pRoot.tdoParams.object3D, utdo.KfObject3D(v));
            break;
        case kRootTopScaleAtFullSize:
            plant.pRoot.tdoParams.scaleAtFullSize, v = plant.MFD(plant.pRoot.tdoParams.scaleAtFullSize, v, ft, d);
            break;
        case kRootTopObject3DXRotationBeforeDraw:
            plant.pRoot.tdoParams.xRotationBeforeDraw, v = plant.MFD(plant.pRoot.tdoParams.xRotationBeforeDraw, v, ft, d);
            break;
        case kRootTopObject3DYRotationBeforeDraw:
            plant.pRoot.tdoParams.yRotationBeforeDraw, v = plant.MFD(plant.pRoot.tdoParams.yRotationBeforeDraw, v, ft, d);
            break;
        case kRootTopObject3DZRotationBeforeDraw:
            plant.pRoot.tdoParams.zRotationBeforeDraw, v = plant.MFD(plant.pRoot.tdoParams.zRotationBeforeDraw, v, ft, d);
            break;
        case kRootTopFaceColor:
            plant.pRoot.tdoParams.faceColor, v = plant.MFD(plant.pRoot.tdoParams.faceColor, v, ft, d);
            break;
        case kRootTopBackfaceColor:
            plant.pRoot.tdoParams.backfaceColor, v = plant.MFD(plant.pRoot.tdoParams.backfaceColor, v, ft, d);
            break;
        case kStateAge:
            plant.age, v = plant.MFD(plant.age, v, ft, d);
            break;
        case kStateBasePointX:
            plant.basePoint_mm.x, v = plant.MFD(plant.basePoint_mm.x, v, ft, d);
            break;
        case kStateBasePointY:
            plant.basePoint_mm.y, v = plant.MFD(plant.basePoint_mm.y, v, ft, d);
            break;
        case kStateDrawingScale:
            plant.drawingScale_PixelsPerMm, v = plant.MFD(plant.drawingScale_PixelsPerMm, v, ft, d);
            break;
        case kStateHidden:
            plant.hidden, v = plant.MFD(plant.hidden, v, ft, d);
            break;
        case kStateSelected:
            plant.selectedWhenLastSaved, v = plant.MFD(plant.selectedWhenLastSaved, v, ft, d);
            break;
        case kStateRotationX:
            plant.xRotation, v = plant.MFD(plant.xRotation, v, ft, d);
            break;
        case kStateRotationY:
            plant.yRotation, v = plant.MFD(plant.yRotation, v, ft, d);
            break;
        case kStateRotationZ:
            plant.zRotation, v = plant.MFD(plant.zRotation, v, ft, d);
            break;
        case kFlowerNumPetalsMale:
            plant.pFlower[uplant.kGenderMale].tdoParams[uplant.kFirstPetals].repetitions, v = plant.MFD(plant.pFlower[uplant.kGenderMale].tdoParams[uplant.kFirstPetals].repetitions, v, ft, d);
            break;
    return v;
}

public void Plant_directTransferField_SecondPart(TObject plantProxy, FIX_MISSING_ARG_TYPE v, short d, short fieldID, short ft, short index, TListCollection updateList) {
    PdPlant plant = new PdPlant();
    
    if (plantProxy == null) {
        throw new GeneralException.create("Plant_directTransferField_SecondPart: nil plant");
    }
    plant = (uplant.PdPlant)plantProxy;
    switch (fieldID) {
        case kFlowerMaleObject3D:
            plant.transferObject3D(d, plant.pFlower[uplant.kGenderMale].tdoParams[uplant.kFirstPetals].object3D, utdo.KfObject3D(v));
            break;
        case kFlowerScaleAtFullSizeMale:
            plant.pFlower[uplant.kGenderMale].tdoParams[uplant.kFirstPetals].scaleAtFullSize, v = plant.MFD(plant.pFlower[uplant.kGenderMale].tdoParams[uplant.kFirstPetals].scaleAtFullSize, v, ft, d);
            break;
        case kFlowerMaleObject3DXRotationBeforeDraw:
            plant.pFlower[uplant.kGenderMale].tdoParams[uplant.kFirstPetals].xRotationBeforeDraw, v = plant.MFD(plant.pFlower[uplant.kGenderMale].tdoParams[uplant.kFirstPetals].xRotationBeforeDraw, v, ft, d);
            break;
        case kFlowerMaleObject3DYRotationBeforeDraw:
            plant.pFlower[uplant.kGenderMale].tdoParams[uplant.kFirstPetals].yRotationBeforeDraw, v = plant.MFD(plant.pFlower[uplant.kGenderMale].tdoParams[uplant.kFirstPetals].yRotationBeforeDraw, v, ft, d);
            break;
        case kFlowerMaleObject3DZRotationBeforeDraw:
            plant.pFlower[uplant.kGenderMale].tdoParams[uplant.kFirstPetals].zRotationBeforeDraw, v = plant.MFD(plant.pFlower[uplant.kGenderMale].tdoParams[uplant.kFirstPetals].zRotationBeforeDraw, v, ft, d);
            break;
        case kFlowerMaleFaceColor:
            plant.pFlower[uplant.kGenderMale].tdoParams[uplant.kFirstPetals].faceColor, v = plant.MFD(plant.pFlower[uplant.kGenderMale].tdoParams[uplant.kFirstPetals].faceColor, v, ft, d);
            break;
        case kFlowerMaleBackfaceColor:
            plant.pFlower[uplant.kGenderMale].tdoParams[uplant.kFirstPetals].backfaceColor, v = plant.MFD(plant.pFlower[uplant.kGenderMale].tdoParams[uplant.kFirstPetals].backfaceColor, v, ft, d);
            break;
        case kFlowerPetalsAreRadiallyArrangedMale:
            plant.pFlower[uplant.kGenderMale].tdoParams[uplant.kFirstPetals].radiallyArranged, v = plant.MFD(plant.pFlower[uplant.kGenderMale].tdoParams[uplant.kFirstPetals].radiallyArranged, v, ft, d);
            break;
        case kFlowerMaleObject3DPullbackAngle:
            plant.pFlower[uplant.kGenderMale].tdoParams[uplant.kFirstPetals].pullBackAngle, v = plant.MFD(plant.pFlower[uplant.kGenderMale].tdoParams[uplant.kFirstPetals].pullBackAngle, v, ft, d);
            break;
        case kFlowerOptimalBiomassMale:
            plant.pFlower[uplant.kGenderMale].optimalBiomass_pctMPB, v = plant.MFD(plant.pFlower[uplant.kGenderMale].optimalBiomass_pctMPB, v, ft, d);
            break;
        case kFlowerMinFractOptBiomassToOpenFlowerMale:
            plant.pFlower[uplant.kGenderMale].minFractionOfOptimalBiomassToOpenFlower_frn, v = plant.MFD(plant.pFlower[uplant.kGenderMale].minFractionOfOptimalBiomassToOpenFlower_frn, v, ft, d);
            break;
        case kFlowerMinDaysToGrowMale:
            plant.pFlower[uplant.kGenderMale].minDaysToGrow, v = plant.MFD(plant.pFlower[uplant.kGenderMale].minDaysToGrow, v, ft, d);
            break;
        case kFlowerMaxDaysToGrowIfOverMinFractionMale:
            plant.pFlower[uplant.kGenderMale].maxDaysToGrowIfOverMinFraction, v = plant.MFD(plant.pFlower[uplant.kGenderMale].maxDaysToGrowIfOverMinFraction, v, ft, d);
            break;
        case kFlowerMinDaysBeforeOpeningMale:
            plant.pFlower[uplant.kGenderMale].minDaysToOpenFlower, v = plant.MFD(plant.pFlower[uplant.kGenderMale].minDaysToOpenFlower, v, ft, d);
            break;
        case kFlowerDaysBeforeDropMale:
            plant.pFlower[uplant.kGenderMale].daysBeforeDrop, v = plant.MFD(plant.pFlower[uplant.kGenderMale].daysBeforeDrop, v, ft, d);
            break;
        case kFlowerNumStamensMale:
            plant.pFlower[uplant.kGenderMale].numStamens, v = plant.MFD(plant.pFlower[uplant.kGenderMale].numStamens, v, ft, d);
            break;
        case kFlowerFilamentLengthMale:
            plant.pFlower[uplant.kGenderMale].filamentLength_mm, v = plant.MFD(plant.pFlower[uplant.kGenderMale].filamentLength_mm, v, ft, d);
            break;
        case kFlowerFilamentWidthMale:
            plant.pFlower[uplant.kGenderMale].filamentWidth_mm, v = plant.MFD(plant.pFlower[uplant.kGenderMale].filamentWidth_mm, v, ft, d);
            break;
        case kFlowerFilamentTaperIndexMale:
            plant.pFlower[uplant.kGenderMale].filamentTaperIndex, v = plant.MFD(plant.pFlower[uplant.kGenderMale].filamentTaperIndex, v, ft, d);
            break;
        case kFlowerFilamentColorMale:
            plant.pFlower[uplant.kGenderMale].filamentColor, v = plant.MFD(plant.pFlower[uplant.kGenderMale].filamentColor, v, ft, d);
            break;
        case kFlowerAntherMaleObject3DPullbackAngle:
            plant.pFlower[uplant.kGenderMale].tdoParams[uplant.kStamens].pullBackAngle, v = plant.MFD(plant.pFlower[uplant.kGenderMale].tdoParams[uplant.kStamens].pullBackAngle, v, ft, d);
            break;
        case kFlowerAntherNumSectionsMale:
            plant.pFlower[uplant.kGenderMale].tdoParams[uplant.kStamens].repetitions, v = plant.MFD(plant.pFlower[uplant.kGenderMale].tdoParams[uplant.kStamens].repetitions, v, ft, d);
            break;
        case kFlowerMaleAntherObject3D:
            plant.transferObject3D(d, plant.pFlower[uplant.kGenderMale].tdoParams[uplant.kStamens].object3D, utdo.KfObject3D(v));
            break;
        case kFlowerAntherScaleAtFullSizeMale:
            plant.pFlower[uplant.kGenderMale].tdoParams[uplant.kStamens].scaleAtFullSize, v = plant.MFD(plant.pFlower[uplant.kGenderMale].tdoParams[uplant.kStamens].scaleAtFullSize, v, ft, d);
            break;
        case kFlowerMaleAntherObject3DXRotationBeforeDraw:
            plant.pFlower[uplant.kGenderMale].tdoParams[uplant.kStamens].xRotationBeforeDraw, v = plant.MFD(plant.pFlower[uplant.kGenderMale].tdoParams[uplant.kStamens].xRotationBeforeDraw, v, ft, d);
            break;
        case kFlowerMaleAntherObject3DYRotationBeforeDraw:
            plant.pFlower[uplant.kGenderMale].tdoParams[uplant.kStamens].yRotationBeforeDraw, v = plant.MFD(plant.pFlower[uplant.kGenderMale].tdoParams[uplant.kStamens].yRotationBeforeDraw, v, ft, d);
            break;
        case kFlowerMaleAntherObject3DZRotationBeforeDraw:
            plant.pFlower[uplant.kGenderMale].tdoParams[uplant.kStamens].zRotationBeforeDraw, v = plant.MFD(plant.pFlower[uplant.kGenderMale].tdoParams[uplant.kStamens].zRotationBeforeDraw, v, ft, d);
            break;
        case kFlowerAntherMaleFaceColor:
            plant.pFlower[uplant.kGenderMale].tdoParams[uplant.kStamens].faceColor, v = plant.MFD(plant.pFlower[uplant.kGenderMale].tdoParams[uplant.kStamens].faceColor, v, ft, d);
            break;
        case kFlowerAntherMaleBackfaceColor:
            plant.pFlower[uplant.kGenderMale].tdoParams[uplant.kStamens].backfaceColor, v = plant.MFD(plant.pFlower[uplant.kGenderMale].tdoParams[uplant.kStamens].backfaceColor, v, ft, d);
            break;
        case kFlowerAntherSectionsAreRadiallyArrangedMale:
            plant.pFlower[uplant.kGenderMale].tdoParams[uplant.kStamens].radiallyArranged, v = plant.MFD(plant.pFlower[uplant.kGenderMale].tdoParams[uplant.kStamens].radiallyArranged, v, ft, d);
            break;
        case kFlowerSepalNumPetalsMale:
            plant.pFlower[uplant.kGenderMale].tdoParams[uplant.kSepals].repetitions, v = plant.MFD(plant.pFlower[uplant.kGenderMale].tdoParams[uplant.kSepals].repetitions, v, ft, d);
            break;
        case kFlowerMaleSepalObject3D:
            plant.transferObject3D(d, plant.pFlower[uplant.kGenderMale].tdoParams[uplant.kSepals].object3D, utdo.KfObject3D(v));
            break;
        case kFlowerSepalScaleAtFullSizeMale:
            plant.pFlower[uplant.kGenderMale].tdoParams[uplant.kSepals].scaleAtFullSize, v = plant.MFD(plant.pFlower[uplant.kGenderMale].tdoParams[uplant.kSepals].scaleAtFullSize, v, ft, d);
            break;
        case kFlowerMaleSepalObject3DXRotationBeforeDraw:
            plant.pFlower[uplant.kGenderMale].tdoParams[uplant.kSepals].xRotationBeforeDraw, v = plant.MFD(plant.pFlower[uplant.kGenderMale].tdoParams[uplant.kSepals].xRotationBeforeDraw, v, ft, d);
            break;
        case kFlowerMaleSepalObject3DYRotationBeforeDraw:
            plant.pFlower[uplant.kGenderMale].tdoParams[uplant.kSepals].yRotationBeforeDraw, v = plant.MFD(plant.pFlower[uplant.kGenderMale].tdoParams[uplant.kSepals].yRotationBeforeDraw, v, ft, d);
            break;
        case kFlowerMaleSepalObject3DZRotationBeforeDraw:
            plant.pFlower[uplant.kGenderMale].tdoParams[uplant.kSepals].zRotationBeforeDraw, v = plant.MFD(plant.pFlower[uplant.kGenderMale].tdoParams[uplant.kSepals].zRotationBeforeDraw, v, ft, d);
            break;
        case kFlowerSepalMaleFaceColor:
            plant.pFlower[uplant.kGenderMale].tdoParams[uplant.kSepals].faceColor, v = plant.MFD(plant.pFlower[uplant.kGenderMale].tdoParams[uplant.kSepals].faceColor, v, ft, d);
            break;
        case kFlowerSepalMaleBackfaceColor:
            plant.pFlower[uplant.kGenderMale].tdoParams[uplant.kSepals].backfaceColor, v = plant.MFD(plant.pFlower[uplant.kGenderMale].tdoParams[uplant.kSepals].backfaceColor, v, ft, d);
            break;
        case kFlowerSepalPetalsAreRadiallyArrangedMale:
            plant.pFlower[uplant.kGenderMale].tdoParams[uplant.kSepals].radiallyArranged, v = plant.MFD(plant.pFlower[uplant.kGenderMale].tdoParams[uplant.kSepals].radiallyArranged, v, ft, d);
            break;
        case kFlowerSepalMaleObject3DPullbackAngle:
            plant.pFlower[uplant.kGenderMale].tdoParams[uplant.kSepals].pullBackAngle, v = plant.MFD(plant.pFlower[uplant.kGenderMale].tdoParams[uplant.kSepals].pullBackAngle, v, ft, d);
            break;
        case kFlowerMaleBudOption:
            plant.pFlower[uplant.kGenderMale].budDrawingOption, v = plant.MFD(plant.pFlower[uplant.kGenderMale].budDrawingOption, v, ft, d);
            break;
        case kFlowerBudNumPetalsMale:
            plant.pFlower[uplant.kGenderMale].tdoParams[uplant.kBud].repetitions, v = plant.MFD(plant.pFlower[uplant.kGenderMale].tdoParams[uplant.kBud].repetitions, v, ft, d);
            break;
        case kFlowerMaleBudObject3D:
            plant.transferObject3D(d, plant.pFlower[uplant.kGenderMale].tdoParams[uplant.kBud].object3D, utdo.KfObject3D(v));
            break;
        case kFlowerBudScaleAtFullSizeMale:
            plant.pFlower[uplant.kGenderMale].tdoParams[uplant.kBud].scaleAtFullSize, v = plant.MFD(plant.pFlower[uplant.kGenderMale].tdoParams[uplant.kBud].scaleAtFullSize, v, ft, d);
            break;
        case kFlowerMaleBudObject3DXRotationBeforeDraw:
            plant.pFlower[uplant.kGenderMale].tdoParams[uplant.kBud].xRotationBeforeDraw, v = plant.MFD(plant.pFlower[uplant.kGenderMale].tdoParams[uplant.kBud].xRotationBeforeDraw, v, ft, d);
            break;
        case kFlowerMaleBudObject3DYRotationBeforeDraw:
            plant.pFlower[uplant.kGenderMale].tdoParams[uplant.kBud].yRotationBeforeDraw, v = plant.MFD(plant.pFlower[uplant.kGenderMale].tdoParams[uplant.kBud].yRotationBeforeDraw, v, ft, d);
            break;
        case kFlowerMaleBudObject3DZRotationBeforeDraw:
            plant.pFlower[uplant.kGenderMale].tdoParams[uplant.kBud].zRotationBeforeDraw, v = plant.MFD(plant.pFlower[uplant.kGenderMale].tdoParams[uplant.kBud].zRotationBeforeDraw, v, ft, d);
            break;
        case kFlowerBudMaleFaceColor:
            plant.pFlower[uplant.kGenderMale].tdoParams[uplant.kBud].faceColor, v = plant.MFD(plant.pFlower[uplant.kGenderMale].tdoParams[uplant.kBud].faceColor, v, ft, d);
            break;
        case kFlowerBudMaleBackfaceColor:
            plant.pFlower[uplant.kGenderMale].tdoParams[uplant.kBud].backfaceColor, v = plant.MFD(plant.pFlower[uplant.kGenderMale].tdoParams[uplant.kBud].backfaceColor, v, ft, d);
            break;
        case kFlowerBudPetalsAreRadiallyArrangedMale:
            plant.pFlower[uplant.kGenderMale].tdoParams[uplant.kBud].radiallyArranged, v = plant.MFD(plant.pFlower[uplant.kGenderMale].tdoParams[uplant.kBud].radiallyArranged, v, ft, d);
            break;
        case kFlowerBudMaleObject3DPullbackAngle:
            plant.pFlower[uplant.kGenderMale].tdoParams[uplant.kBud].pullBackAngle, v = plant.MFD(plant.pFlower[uplant.kGenderMale].tdoParams[uplant.kBud].pullBackAngle, v, ft, d);
            break;
        case kInflorescenceNumFlowersOnMainBranchMale:
            plant.pInflor[uplant.kGenderMale].numFlowersOnMainBranch, v = plant.MFD(plant.pInflor[uplant.kGenderMale].numFlowersOnMainBranch, v, ft, d);
            break;
        case kInflorescenceNumFlowersPerBranchMale:
            plant.pInflor[uplant.kGenderMale].numFlowersPerBranch, v = plant.MFD(plant.pInflor[uplant.kGenderMale].numFlowersPerBranch, v, ft, d);
            break;
        case kInflorescenceNumBranchesMale:
            plant.pInflor[uplant.kGenderMale].numBranches, v = plant.MFD(plant.pInflor[uplant.kGenderMale].numBranches, v, ft, d);
            break;
        case kInflorescenceMaleStalkColor:
            plant.pInflor[uplant.kGenderMale].stalkColor, v = plant.MFD(plant.pInflor[uplant.kGenderMale].stalkColor, v, ft, d);
            break;
        case kInflorescenceMalePedicelColor:
            plant.pInflor[uplant.kGenderMale].pedicelColor, v = plant.MFD(plant.pInflor[uplant.kGenderMale].pedicelColor, v, ft, d);
            break;
        case kInflorescenceBranchesAreAlternateMale:
            plant.pInflor[uplant.kGenderMale].branchesAreAlternate, v = plant.MFD(plant.pInflor[uplant.kGenderMale].branchesAreAlternate, v, ft, d);
            break;
        case kInflorescenceBranchAngleMale:
            plant.pInflor[uplant.kGenderMale].branchAngle, v = plant.MFD(plant.pInflor[uplant.kGenderMale].branchAngle, v, ft, d);
            break;
        case kInflorescenceInternodeAngleMale:
            plant.pInflor[uplant.kGenderMale].angleBetweenInternodes, v = plant.MFD(plant.pInflor[uplant.kGenderMale].angleBetweenInternodes, v, ft, d);
            break;
        case kInflorescencePedicelAngleMale:
            plant.pInflor[uplant.kGenderMale].pedicelAngle, v = plant.MFD(plant.pInflor[uplant.kGenderMale].pedicelAngle, v, ft, d);
            break;
        case kInflorescencePeduncleAngleFromVegetativeStemMale:
            plant.pInflor[uplant.kGenderMale].peduncleAngleFromVegetativeStem, v = plant.MFD(plant.pInflor[uplant.kGenderMale].peduncleAngleFromVegetativeStem, v, ft, d);
            break;
        case kInflorescencePeduncleAngleFromVegetativeStemApicalMale:
            plant.pInflor[uplant.kGenderMale].apicalStalkAngleFromVegetativeStem, v = plant.MFD(plant.pInflor[uplant.kGenderMale].apicalStalkAngleFromVegetativeStem, v, ft, d);
            break;
        case kInflorescenceFlowersSpiralOnStemMale:
            plant.pInflor[uplant.kGenderMale].flowersSpiralOnStem, v = plant.MFD(plant.pInflor[uplant.kGenderMale].flowersSpiralOnStem, v, ft, d);
            break;
        case kInflorescenceIsHeadMale:
            plant.pInflor[uplant.kGenderMale].isHead, v = plant.MFD(plant.pInflor[uplant.kGenderMale].isHead, v, ft, d);
            break;
        case kInflorescenceTerminalStalkLengthMale:
            plant.pInflor[uplant.kGenderMale].terminalStalkLength_mm, v = plant.MFD(plant.pInflor[uplant.kGenderMale].terminalStalkLength_mm, v, ft, d);
            break;
        case kInflorescencePeduncleLengthMale:
            plant.pInflor[uplant.kGenderMale].peduncleLength_mm, v = plant.MFD(plant.pInflor[uplant.kGenderMale].peduncleLength_mm, v, ft, d);
            break;
        case kInflorescenceInternodeLengthMale:
            plant.pInflor[uplant.kGenderMale].internodeLength_mm, v = plant.MFD(plant.pInflor[uplant.kGenderMale].internodeLength_mm, v, ft, d);
            break;
        case kInflorescencePedicelLengthMale:
            plant.pInflor[uplant.kGenderMale].pedicelLength_mm, v = plant.MFD(plant.pInflor[uplant.kGenderMale].pedicelLength_mm, v, ft, d);
            break;
        case kInflorescenceInternodeWidthMale:
            plant.pInflor[uplant.kGenderMale].internodeWidth_mm, v = plant.MFD(plant.pInflor[uplant.kGenderMale].internodeWidth_mm, v, ft, d);
            break;
        case kInflorescencePedicelTaperIndexMale:
            plant.pInflor[uplant.kGenderMale].pedicelTaperIndex, v = plant.MFD(plant.pInflor[uplant.kGenderMale].pedicelTaperIndex, v, ft, d);
            break;
        case kInflorescenceIsTerminalMale:
            plant.pInflor[uplant.kGenderMale].isTerminal, v = plant.MFD(plant.pInflor[uplant.kGenderMale].isTerminal, v, ft, d);
            break;
        case kInflorescenceBiomassRequiredMale:
            plant.pInflor[uplant.kGenderMale].optimalBiomass_pctMPB, v = plant.MFD(plant.pInflor[uplant.kGenderMale].optimalBiomass_pctMPB, v, ft, d);
            break;
        case kInflorescenceMinFractOptBiomassToCreateMale:
            plant.pInflor[uplant.kGenderMale].minFractionOfOptimalBiomassToCreateInflorescence_frn, v = plant.MFD(plant.pInflor[uplant.kGenderMale].minFractionOfOptimalBiomassToCreateInflorescence_frn, v, ft, d);
            break;
        case kInflorescenceMinFractOptBiomassForFlowersMale:
            plant.pInflor[uplant.kGenderMale].minFractionOfOptimalBiomassToMakeFlowers_frn, v = plant.MFD(plant.pInflor[uplant.kGenderMale].minFractionOfOptimalBiomassToMakeFlowers_frn, v, ft, d);
            break;
        case kInflorescenceDaysToAllFlowersShowingMale:
            plant.pInflor[uplant.kGenderMale].daysToAllFlowersCreated, v = plant.MFD(plant.pInflor[uplant.kGenderMale].daysToAllFlowersCreated, v, ft, d);
            break;
        case kInflorescenceFlowersDrawTopToBottomMale:
            plant.pInflor[uplant.kGenderMale].flowersDrawTopToBottom, v = plant.MFD(plant.pInflor[uplant.kGenderMale].flowersDrawTopToBottom, v, ft, d);
            break;
        case kInflorescenceMinDaysToCreateInflorescenceMale:
            plant.pInflor[uplant.kGenderMale].minDaysToCreateInflorescence, v = plant.MFD(plant.pInflor[uplant.kGenderMale].minDaysToCreateInflorescence, v, ft, d);
            break;
        case kInflorescenceMaxDaysToCreateIfOverMinFractMale:
            plant.pInflor[uplant.kGenderMale].maxDaysToCreateInflorescenceIfOverMinFraction, v = plant.MFD(plant.pInflor[uplant.kGenderMale].maxDaysToCreateInflorescenceIfOverMinFraction, v, ft, d);
            break;
        case kInflorescenceMinDaysToGrowMale:
            plant.pInflor[uplant.kGenderMale].minDaysToGrow, v = plant.MFD(plant.pInflor[uplant.kGenderMale].minDaysToGrow, v, ft, d);
            break;
        case kInflorescenceMaxDaysToGrowMale:
            plant.pInflor[uplant.kGenderMale].maxDaysToGrow, v = plant.MFD(plant.pInflor[uplant.kGenderMale].maxDaysToGrow, v, ft, d);
            break;
        case kInflorescenceMaleBractNumBracts:
            plant.pInflor[uplant.kGenderMale].bractTdoParams.repetitions, v = plant.MFD(plant.pInflor[uplant.kGenderMale].bractTdoParams.repetitions, v, ft, d);
            break;
        case kInflorescenceMaleBractObject3D:
            plant.transferObject3D(d, plant.pInflor[uplant.kGenderMale].bractTdoParams.object3D, utdo.KfObject3D(v));
            break;
        case kInflorescenceMaleBractScaleAtFullSize:
            plant.pInflor[uplant.kGenderMale].bractTdoParams.scaleAtFullSize, v = plant.MFD(plant.pInflor[uplant.kGenderMale].bractTdoParams.scaleAtFullSize, v, ft, d);
            break;
        case kInflorescenceMaleBractObject3DXRotationBeforeDraw:
            plant.pInflor[uplant.kGenderMale].bractTdoParams.xRotationBeforeDraw, v = plant.MFD(plant.pInflor[uplant.kGenderMale].bractTdoParams.xRotationBeforeDraw, v, ft, d);
            break;
        case kInflorescenceMaleBractObject3DYRotationBeforeDraw:
            plant.pInflor[uplant.kGenderMale].bractTdoParams.yRotationBeforeDraw, v = plant.MFD(plant.pInflor[uplant.kGenderMale].bractTdoParams.yRotationBeforeDraw, v, ft, d);
            break;
        case kInflorescenceMaleBractObject3DZRotationBeforeDraw:
            plant.pInflor[uplant.kGenderMale].bractTdoParams.zRotationBeforeDraw, v = plant.MFD(plant.pInflor[uplant.kGenderMale].bractTdoParams.zRotationBeforeDraw, v, ft, d);
            break;
        case kInflorescenceMaleBractFaceColor:
            plant.pInflor[uplant.kGenderMale].bractTdoParams.faceColor, v = plant.MFD(plant.pInflor[uplant.kGenderMale].bractTdoParams.faceColor, v, ft, d);
            break;
        case kInflorescenceMaleBractBackfaceColor:
            plant.pInflor[uplant.kGenderMale].bractTdoParams.backfaceColor, v = plant.MFD(plant.pInflor[uplant.kGenderMale].bractTdoParams.backfaceColor, v, ft, d);
            break;
        case kInflorescenceMaleBractsAreRadiallyArranged:
            plant.pInflor[uplant.kGenderMale].bractTdoParams.radiallyArranged, v = plant.MFD(plant.pInflor[uplant.kGenderMale].bractTdoParams.radiallyArranged, v, ft, d);
            break;
        case kInflorescenceMaleBractObject3DPullbackAngle:
            plant.pInflor[uplant.kGenderMale].bractTdoParams.pullBackAngle, v = plant.MFD(plant.pInflor[uplant.kGenderMale].bractTdoParams.pullBackAngle, v, ft, d);
            break;
        case kFlowerNumPistilsFemale:
            plant.pFlower[uplant.kGenderFemale].numPistils, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].numPistils, v, ft, d);
            break;
        case kFlowerStyleLengthFemale:
            plant.pFlower[uplant.kGenderFemale].styleLength_mm, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].styleLength_mm, v, ft, d);
            break;
        case kFlowerStyleWidthFemale:
            plant.pFlower[uplant.kGenderFemale].styleWidth_mm, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].styleWidth_mm, v, ft, d);
            break;
        case kFlowerStyleTaperIndexFemale:
            plant.pFlower[uplant.kGenderFemale].styleTaperIndex, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].styleTaperIndex, v, ft, d);
            break;
        case kFlowerStigmaFemaleObject3DPullbackAngle:
            plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kPistils].pullBackAngle, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kPistils].pullBackAngle, v, ft, d);
            break;
        case kFlowerStyleColorFemale:
            plant.pFlower[uplant.kGenderFemale].styleColor, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].styleColor, v, ft, d);
            break;
        case kFlowerStigmaNumSectionsFemale:
            plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kPistils].repetitions, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kPistils].repetitions, v, ft, d);
            break;
        case kFlowerFemaleStigmaObject3D:
            plant.transferObject3D(d, plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kPistils].object3D, utdo.KfObject3D(v));
            break;
        case kFlowerStigmaScaleAtFullSizeFemale:
            plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kPistils].scaleAtFullSize, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kPistils].scaleAtFullSize, v, ft, d);
            break;
        case kFlowerFemaleStigmaObject3DXRotationBeforeDraw:
            plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kPistils].xRotationBeforeDraw, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kPistils].xRotationBeforeDraw, v, ft, d);
            break;
        case kFlowerFemaleStigmaObject3DYRotationBeforeDraw:
            plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kPistils].yRotationBeforeDraw, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kPistils].yRotationBeforeDraw, v, ft, d);
            break;
        case kFlowerFemaleStigmaObject3DZRotationBeforeDraw:
            plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kPistils].zRotationBeforeDraw, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kPistils].zRotationBeforeDraw, v, ft, d);
            break;
        case kFlowerStigmaFemaleFaceColor:
            plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kPistils].faceColor, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kPistils].faceColor, v, ft, d);
            break;
        case kFlowerStigmaFemaleBackfaceColor:
            plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kPistils].backfaceColor, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kPistils].backfaceColor, v, ft, d);
            break;
        case kFlowerStigmaSectionsAreRadiallyArrangedFemale:
            plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kPistils].radiallyArranged, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kPistils].radiallyArranged, v, ft, d);
            break;
        case kFlowerNumStamensFemale:
            plant.pFlower[uplant.kGenderFemale].numStamens, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].numStamens, v, ft, d);
            break;
        case kFlowerFilamentLengthFemale:
            plant.pFlower[uplant.kGenderFemale].filamentLength_mm, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].filamentLength_mm, v, ft, d);
            break;
        case kFlowerFilamentWidthFemale:
            plant.pFlower[uplant.kGenderFemale].filamentWidth_mm, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].filamentWidth_mm, v, ft, d);
            break;
        case kFlowerFilamentTaperIndexFemale:
            plant.pFlower[uplant.kGenderFemale].filamentTaperIndex, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].filamentTaperIndex, v, ft, d);
            break;
        case kFlowerFilamentColorFemale:
            plant.pFlower[uplant.kGenderFemale].filamentColor, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].filamentColor, v, ft, d);
            break;
        case kFlowerAntherFemaleObject3DPullbackAngle:
            plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kStamens].pullBackAngle, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kStamens].pullBackAngle, v, ft, d);
            break;
        case kFlowerAntherNumSectionsFemale:
            plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kStamens].repetitions, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kStamens].repetitions, v, ft, d);
            break;
        case kFlowerFemaleAntherObject3D:
            plant.transferObject3D(d, plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kStamens].object3D, utdo.KfObject3D(v));
            break;
        case kFlowerAntherScaleAtFullSizeFemale:
            plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kStamens].scaleAtFullSize, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kStamens].scaleAtFullSize, v, ft, d);
            break;
        case kFlowerFemaleAntherObject3DXRotationBeforeDraw:
            plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kStamens].xRotationBeforeDraw, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kStamens].xRotationBeforeDraw, v, ft, d);
            break;
        case kFlowerFemaleAntherObject3DYRotationBeforeDraw:
            plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kStamens].yRotationBeforeDraw, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kStamens].yRotationBeforeDraw, v, ft, d);
            break;
        case kFlowerFemaleAntherObject3DZRotationBeforeDraw:
            plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kStamens].zRotationBeforeDraw, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kStamens].zRotationBeforeDraw, v, ft, d);
            break;
        case kFlowerAntherFemaleFaceColor:
            plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kStamens].faceColor, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kStamens].faceColor, v, ft, d);
            break;
        case kFlowerAntherFemaleBackfaceColor:
            plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kStamens].backfaceColor, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kStamens].backfaceColor, v, ft, d);
            break;
        case kFlowerAntherSectionsAreRadiallyArrangedFemale:
            plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kStamens].radiallyArranged, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kStamens].radiallyArranged, v, ft, d);
            break;
        case kFlowerPetal2NumPetalsFemale:
            plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kSecondPetals].repetitions, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kSecondPetals].repetitions, v, ft, d);
            break;
        case kFlowerFemalePetal2Object3D:
            plant.transferObject3D(d, plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kSecondPetals].object3D, utdo.KfObject3D(v));
            break;
        case kFlowerPetal2ScaleAtFullSizeFemale:
            plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kSecondPetals].scaleAtFullSize, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kSecondPetals].scaleAtFullSize, v, ft, d);
            break;
        case kFlowerFemalePetal2Object3DXRotationBeforeDraw:
            plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kSecondPetals].xRotationBeforeDraw, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kSecondPetals].xRotationBeforeDraw, v, ft, d);
            break;
        case kFlowerFemalePetal2Object3DYRotationBeforeDraw:
            plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kSecondPetals].yRotationBeforeDraw, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kSecondPetals].yRotationBeforeDraw, v, ft, d);
            break;
        case kFlowerFemalePetal2Object3DZRotationBeforeDraw:
            plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kSecondPetals].zRotationBeforeDraw, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kSecondPetals].zRotationBeforeDraw, v, ft, d);
            break;
        case kFlowerPetal2FemaleFaceColor:
            plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kSecondPetals].faceColor, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kSecondPetals].faceColor, v, ft, d);
            break;
        case kFlowerPetal2FemaleBackfaceColor:
            plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kSecondPetals].backfaceColor, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kSecondPetals].backfaceColor, v, ft, d);
            break;
        case kFlowerPetal2PetalsAreRadiallyArrangedFemale:
            plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kSecondPetals].radiallyArranged, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kSecondPetals].radiallyArranged, v, ft, d);
            break;
        case kFlowerPetal2FemaleObject3DPullbackAngle:
            plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kSecondPetals].pullBackAngle, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kSecondPetals].pullBackAngle, v, ft, d);
            break;
        case kFlowerPetal3NumPetalsFemale:
            plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kThirdPetals].repetitions, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kThirdPetals].repetitions, v, ft, d);
            break;
        case kFlowerFemalePetal3Object3D:
            plant.transferObject3D(d, plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kThirdPetals].object3D, utdo.KfObject3D(v));
            break;
        case kFlowerPetal3ScaleAtFullSizeFemale:
            plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kThirdPetals].scaleAtFullSize, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kThirdPetals].scaleAtFullSize, v, ft, d);
            break;
        case kFlowerFemalePetal3Object3DXRotationBeforeDraw:
            plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kThirdPetals].xRotationBeforeDraw, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kThirdPetals].xRotationBeforeDraw, v, ft, d);
            break;
        case kFlowerFemalePetal3Object3DYRotationBeforeDraw:
            plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kThirdPetals].yRotationBeforeDraw, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kThirdPetals].yRotationBeforeDraw, v, ft, d);
            break;
        case kFlowerFemalePetal3Object3DZRotationBeforeDraw:
            plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kThirdPetals].zRotationBeforeDraw, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kThirdPetals].zRotationBeforeDraw, v, ft, d);
            break;
        case kFlowerPetal3FemaleFaceColor:
            plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kThirdPetals].faceColor, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kThirdPetals].faceColor, v, ft, d);
            break;
        case kFlowerPetal3FemaleBackfaceColor:
            plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kThirdPetals].backfaceColor, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kThirdPetals].backfaceColor, v, ft, d);
            break;
        case kFlowerPetal3PetalsAreRadiallyArrangedFemale:
            plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kThirdPetals].radiallyArranged, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kThirdPetals].radiallyArranged, v, ft, d);
            break;
        case kFlowerPetal3FemaleObject3DPullbackAngle:
            plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kThirdPetals].pullBackAngle, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kThirdPetals].pullBackAngle, v, ft, d);
            break;
        case kFlowerPetal4NumPetalsFemale:
            plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kFourthPetals].repetitions, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kFourthPetals].repetitions, v, ft, d);
            break;
        case kFlowerFemalePetal4Object3D:
            plant.transferObject3D(d, plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kFourthPetals].object3D, utdo.KfObject3D(v));
            break;
        case kFlowerPetal4ScaleAtFullSizeFemale:
            plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kFourthPetals].scaleAtFullSize, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kFourthPetals].scaleAtFullSize, v, ft, d);
            break;
        case kFlowerFemalePetal4Object3DXRotationBeforeDraw:
            plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kFourthPetals].xRotationBeforeDraw, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kFourthPetals].xRotationBeforeDraw, v, ft, d);
            break;
        case kFlowerFemalePetal4Object3DYRotationBeforeDraw:
            plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kFourthPetals].yRotationBeforeDraw, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kFourthPetals].yRotationBeforeDraw, v, ft, d);
            break;
        case kFlowerFemalePetal4Object3DZRotationBeforeDraw:
            plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kFourthPetals].zRotationBeforeDraw, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kFourthPetals].zRotationBeforeDraw, v, ft, d);
            break;
        case kFlowerPetal4FemaleFaceColor:
            plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kFourthPetals].faceColor, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kFourthPetals].faceColor, v, ft, d);
            break;
        case kFlowerPetal4FemaleBackfaceColor:
            plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kFourthPetals].backfaceColor, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kFourthPetals].backfaceColor, v, ft, d);
            break;
        case kFlowerPetal4PetalsAreRadiallyArrangedFemale:
            plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kFourthPetals].radiallyArranged, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kFourthPetals].radiallyArranged, v, ft, d);
            break;
        case kFlowerPetal4FemaleObject3DPullbackAngle:
            plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kFourthPetals].pullBackAngle, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kFourthPetals].pullBackAngle, v, ft, d);
            break;
        case kFlowerPetal5NumPetalsFemale:
            plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kFifthPetals].repetitions, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kFifthPetals].repetitions, v, ft, d);
            break;
        case kFlowerFemalePetal5Object3D:
            plant.transferObject3D(d, plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kFifthPetals].object3D, utdo.KfObject3D(v));
            break;
        case kFlowerPetal5ScaleAtFullSizeFemale:
            plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kFifthPetals].scaleAtFullSize, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kFifthPetals].scaleAtFullSize, v, ft, d);
            break;
        case kFlowerFemalePetal5Object3DXRotationBeforeDraw:
            plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kFifthPetals].xRotationBeforeDraw, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kFifthPetals].xRotationBeforeDraw, v, ft, d);
            break;
        case kFlowerFemalePetal5Object3DYRotationBeforeDraw:
            plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kFifthPetals].yRotationBeforeDraw, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kFifthPetals].yRotationBeforeDraw, v, ft, d);
            break;
        case kFlowerFemalePetal5Object3DZRotationBeforeDraw:
            plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kFifthPetals].zRotationBeforeDraw, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kFifthPetals].zRotationBeforeDraw, v, ft, d);
            break;
        case kFlowerPetal5FemaleFaceColor:
            plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kFifthPetals].faceColor, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kFifthPetals].faceColor, v, ft, d);
            break;
        case kFlowerPetal5FemaleBackfaceColor:
            plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kFifthPetals].backfaceColor, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kFifthPetals].backfaceColor, v, ft, d);
            break;
        case kFlowerPetal5PetalsAreRadiallyArrangedFemale:
            plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kFifthPetals].radiallyArranged, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kFifthPetals].radiallyArranged, v, ft, d);
            break;
        case kFlowerPetal5FemaleObject3DPullbackAngle:
            plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kFifthPetals].pullBackAngle, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kFifthPetals].pullBackAngle, v, ft, d);
            break;
        case kFlowerSepalNumPetalsFemale:
            plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kSepals].repetitions, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kSepals].repetitions, v, ft, d);
            break;
        case kFlowerFemaleSepalObject3D:
            plant.transferObject3D(d, plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kSepals].object3D, utdo.KfObject3D(v));
            break;
        case kFlowerSepalScaleAtFullSizeFemale:
            plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kSepals].scaleAtFullSize, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kSepals].scaleAtFullSize, v, ft, d);
            break;
        case kFlowerFemaleSepalObject3DXRotationBeforeDraw:
            plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kSepals].xRotationBeforeDraw, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kSepals].xRotationBeforeDraw, v, ft, d);
            break;
        case kFlowerFemaleSepalObject3DYRotationBeforeDraw:
            plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kSepals].yRotationBeforeDraw, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kSepals].yRotationBeforeDraw, v, ft, d);
            break;
        case kFlowerFemaleSepalObject3DZRotationBeforeDraw:
            plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kSepals].zRotationBeforeDraw, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kSepals].zRotationBeforeDraw, v, ft, d);
            break;
        case kFlowerSepalFemaleFaceColor:
            plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kSepals].faceColor, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kSepals].faceColor, v, ft, d);
            break;
        case kFlowerSepalFemaleBackfaceColor:
            plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kSepals].backfaceColor, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kSepals].backfaceColor, v, ft, d);
            break;
        case kFlowerSepalPetalsAreRadiallyArrangedFemale:
            plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kSepals].radiallyArranged, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kSepals].radiallyArranged, v, ft, d);
            break;
        case kFlowerSepalFemaleObject3DPullbackAngle:
            plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kSepals].pullBackAngle, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kSepals].pullBackAngle, v, ft, d);
            break;
        case kFlowerFemaleBudOption:
            plant.pFlower[uplant.kGenderFemale].budDrawingOption, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].budDrawingOption, v, ft, d);
            break;
        case kFlowerBudNumPetalsFemale:
            plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kBud].repetitions, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kBud].repetitions, v, ft, d);
            break;
        case kFlowerFemaleBudObject3D:
            plant.transferObject3D(d, plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kBud].object3D, utdo.KfObject3D(v));
            break;
        case kFlowerBudScaleAtFullSizeFemale:
            plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kBud].scaleAtFullSize, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kBud].scaleAtFullSize, v, ft, d);
            break;
        case kFlowerFemaleBudObject3DXRotationBeforeDraw:
            plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kBud].xRotationBeforeDraw, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kBud].xRotationBeforeDraw, v, ft, d);
            break;
        case kFlowerFemaleBudObject3DYRotationBeforeDraw:
            plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kBud].yRotationBeforeDraw, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kBud].yRotationBeforeDraw, v, ft, d);
            break;
        case kFlowerFemaleBudObject3DZRotationBeforeDraw:
            plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kBud].zRotationBeforeDraw, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kBud].zRotationBeforeDraw, v, ft, d);
            break;
        case kFlowerBudFemaleFaceColor:
            plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kBud].faceColor, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kBud].faceColor, v, ft, d);
            break;
        case kFlowerBudFemaleBackfaceColor:
            plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kBud].backfaceColor, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kBud].backfaceColor, v, ft, d);
            break;
        case kFlowerBudPetalsAreRadiallyArrangedFemale:
            plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kBud].radiallyArranged, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kBud].radiallyArranged, v, ft, d);
            break;
        case kFlowerBudFemaleObject3DPullbackAngle:
            plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kBud].pullBackAngle, v = plant.MFD(plant.pFlower[uplant.kGenderFemale].tdoParams[uplant.kBud].pullBackAngle, v, ft, d);
            break;
    return v;
}


